

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Mar 02 18:34:07 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22   000000                     
    23                           ; Generated 21/07/2023 GMT
    24                           ; 
    25                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F67K40 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57   000000                     
    58                           	psect	idataCOMRAM
    59   0013F8                     __pidataCOMRAM:
    60                           	callstack 0
    61                           
    62                           ;initializer for _temp
    63   0013F8  07                 	db	7
    64   000000                     _TRISFbits	set	3974
    65   000000                     _LATDbits	set	3964
    66   000000                     _TRISDbits	set	3972
    67   000000                     _TRISGbits	set	3975
    68   000000                     _RC7PPS	set	3689
    69   000000                     _RE2PPS	set	3700
    70   000000                     _LATCbits	set	3963
    71   000000                     _LATEbits	set	3965
    72   000000                     _TRISCbits	set	3971
    73   000000                     _TRISEbits	set	3973
    74   000000                     _TRISHbits	set	3976
    75   000000                     _T2PR	set	4028
    76   000000                     _T2CONbits	set	4029
    77   000000                     _CCPR2H	set	4006
    78   000000                     _CCPR1H	set	4010
    79   000000                     _LATGbits	set	3967
    80   000000                     _LATHbits	set	3968
    81   000000                     _RE4PPS	set	3702
    82   000000                     _RG6PPS	set	3720
    83   000000                     _ANSELFbits	set	3764
    84   000000                     _CCPR4H	set	3873
    85   000000                     _CCPR3H	set	3877
    86   000000                     _T2CLKCONbits	set	4031
    87   000000                     _T2HLTbits	set	4030
    88   000000                     _CCP1CONbits	set	4011
    89   000000                     _CCPTMRS0bits	set	4013
    90   000000                     _CCP2CONbits	set	4007
    91   000000                     _CCP3CONbits	set	3878
    92   000000                     _CCP4CONbits	set	3874
    93                           
    94                           ; #config settings
    95                           
    96                           	psect	cinit
    97   0013D4                     __pcinit:
    98                           	callstack 0
    99   0013D4                     start_initialization:
   100                           	callstack 0
   101   0013D4                     __initialization:
   102                           	callstack 0
   103                           
   104                           ; Initialize objects allocated to COMRAM (1 bytes)
   105                           ; load TBLPTR registers with __pidataCOMRAM
   106   0013D4  0EF8               	movlw	low __pidataCOMRAM
   107   0013D6  6EF6               	movwf	tblptrl,c
   108   0013D8  0E13               	movlw	high __pidataCOMRAM
   109   0013DA  6EF7               	movwf	tblptrh,c
   110   0013DC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   111   0013DE  6EF8               	movwf	tblptru,c
   112   0013E0  0009               	tblrd		*+	;fetch initializer
   113   0013E2  CFF5 F039          	movff	tablat,__pdataCOMRAM
   114                           
   115                           ; Clear objects allocated to COMRAM (22 bytes)
   116   0013E6  EE00  F023         	lfsr	0,__pbssCOMRAM
   117   0013EA  0E16               	movlw	22
   118   0013EC                     clear_0:
   119   0013EC  6AEE               	clrf	postinc0,c
   120   0013EE  06E8               	decf	wreg,f,c
   121   0013F0  E1FD               	bnz	clear_0
   122   0013F2                     end_of_initialization:
   123                           	callstack 0
   124   0013F2                     __end_of__initialization:
   125                           	callstack 0
   126   0013F2  0100               	movlb	0
   127   0013F4  EF6A  F008         	goto	_main	;jump to C main() function
   128                           
   129                           	psect	bssCOMRAM
   130   000023                     __pbssCOMRAM:
   131                           	callstack 0
   132   000023                     _off_period:
   133                           	callstack 0
   134   000023                     	ds	2
   135   000025                     _on_period:
   136                           	callstack 0
   137   000025                     	ds	2
   138   000027                     _motorR:
   139                           	callstack 0
   140   000027                     	ds	9
   141   000030                     _motorL:
   142                           	callstack 0
   143   000030                     	ds	9
   144                           
   145                           	psect	dataCOMRAM
   146   000039                     __pdataCOMRAM:
   147                           	callstack 0
   148   000039                     _temp:
   149                           	callstack 0
   150   000039                     	ds	1
   151                           
   152                           	psect	cstackCOMRAM
   153   000001                     __pcstackCOMRAM:
   154                           	callstack 0
   155   000001                     ?___wmul:
   156                           	callstack 0
   157   000001                     ?___awdiv:
   158                           	callstack 0
   159   000001                     initDCmotorsPWM@PWMperiod:
   160                           	callstack 0
   161   000001                     delay_ms_function@milliseconds:
   162                           	callstack 0
   163   000001                     ___wmul@multiplier:
   164                           	callstack 0
   165   000001                     ___awdiv@dividend:
   166                           	callstack 0
   167                           
   168                           ; 2 bytes @ 0x0
   169   000001                     	ds	2
   170   000003                     ??_delay_ms_function:
   171   000003                     ___wmul@multiplicand:
   172                           	callstack 0
   173   000003                     ___awdiv@divisor:
   174                           	callstack 0
   175                           
   176                           ; 2 bytes @ 0x2
   177   000003                     	ds	2
   178   000005                     ___awdiv@counter:
   179                           	callstack 0
   180   000005                     ___wmul@product:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x4
   184   000005                     	ds	1
   185   000006                     ___awdiv@sign:
   186                           	callstack 0
   187                           
   188                           ; 1 bytes @ 0x5
   189   000006                     	ds	1
   190   000007                     ?___lwdiv:
   191                           	callstack 0
   192   000007                     ___awdiv@quotient:
   193                           	callstack 0
   194   000007                     ___lwdiv@dividend:
   195                           	callstack 0
   196                           
   197                           ; 2 bytes @ 0x6
   198   000007                     	ds	2
   199   000009                     ___lwdiv@divisor:
   200                           	callstack 0
   201                           
   202                           ; 2 bytes @ 0x8
   203   000009                     	ds	2
   204   00000B                     ___lwdiv@quotient:
   205                           	callstack 0
   206                           
   207                           ; 2 bytes @ 0xA
   208   00000B                     	ds	2
   209   00000D                     ___lwdiv@counter:
   210                           	callstack 0
   211                           
   212                           ; 1 bytes @ 0xC
   213   00000D                     	ds	1
   214   00000E                     setMotorPWM@m:
   215                           	callstack 0
   216                           
   217                           ; 1 bytes @ 0xD
   218   00000E                     	ds	1
   219   00000F                     ??_setMotorPWM:
   220                           
   221                           ; 1 bytes @ 0xE
   222   00000F                     	ds	2
   223   000011                     setMotorPWM@posDuty:
   224                           	callstack 0
   225                           
   226                           ; 1 bytes @ 0x10
   227   000011                     	ds	1
   228   000012                     setMotorPWM@negDuty:
   229                           	callstack 0
   230                           
   231                           ; 1 bytes @ 0x11
   232   000012                     	ds	1
   233   000013                     turnLEFT@mL:
   234                           	callstack 0
   235                           
   236                           ; 1 bytes @ 0x12
   237   000013                     	ds	1
   238   000014                     turnLEFT@mR:
   239                           	callstack 0
   240                           
   241                           ; 1 bytes @ 0x13
   242   000014                     	ds	1
   243   000015                     ??_turnLEFT:
   244                           
   245                           ; 1 bytes @ 0x14
   246   000015                     	ds	3
   247   000018                     turnLEFT@rotation_calibration:
   248                           	callstack 0
   249                           
   250                           ; 1 bytes @ 0x17
   251   000018                     	ds	1
   252   000019                     turnLEFT@i:
   253                           	callstack 0
   254                           
   255                           ; 2 bytes @ 0x18
   256   000019                     	ds	2
   257   00001B                     turnLEFT@j:
   258                           	callstack 0
   259                           
   260                           ; 2 bytes @ 0x1A
   261   00001B                     	ds	2
   262   00001D                     turnLEFT@max_power:
   263                           	callstack 0
   264                           
   265                           ; 2 bytes @ 0x1C
   266   00001D                     	ds	2
   267   00001F                     turnLEFT@delay_time:
   268                           	callstack 0
   269                           
   270                           ; 2 bytes @ 0x1E
   271   00001F                     	ds	2
   272   000021                     ??_main:
   273                           
   274                           ; 1 bytes @ 0x20
   275   000021                     	ds	2
   276                           
   277 ;;
   278 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   279 ;;
   280 ;; *************** function _main *****************
   281 ;; Defined at:
   282 ;;		line 18 in file "../lab-6-motors-and-pwm-tomas-thomas.X/main.c"
   283 ;; Parameters:    Size  Location     Type
   284 ;;		None
   285 ;; Auto vars:     Size  Location     Type
   286 ;;  PWMperiod       2    0        unsigned int 
   287 ;; Return value:  Size  Location     Type
   288 ;;                  1    wreg      void 
   289 ;; Registers used:
   290 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   291 ;; Tracked objects:
   292 ;;		On entry : 0/0
   293 ;;		On exit  : 0/0
   294 ;;		Unchanged: 0/0
   295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   299 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   300 ;;Total ram usage:        2 bytes
   301 ;; Hardware stack levels required when called: 3
   302 ;; This function calls:
   303 ;;		_initDCmotorsPWM
   304 ;;		_turnLEFT
   305 ;; This function is called by:
   306 ;;		Startup code after reset
   307 ;; This function uses a non-reentrant model
   308 ;;
   309                           
   310                           	psect	text0
   311   0010D4                     __ptext0:
   312                           	callstack 0
   313   0010D4                     _main:
   314                           	callstack 28
   315   0010D4                     
   316                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 20:     initDCmotorsPWM(PWMperiod);
   317   0010D4  0E00               	movlw	0
   318   0010D6  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   319   0010D8  0E63               	movlw	99
   320   0010DA  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   321   0010DC  EC3C  F009         	call	_initDCmotorsPWM	;wreg free
   322   0010E0                     
   323                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 24:     motorL.power=0;
   324   0010E0  0E00               	movlw	0
   325   0010E2  6E30               	movwf	_motorL^0,c
   326   0010E4                     
   327                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 25:     motorL.direction=1;
   328   0010E4  0E01               	movlw	1
   329   0010E6  6E31               	movwf	(_motorL+1)^0,c
   330   0010E8                     
   331                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 26:     motorL.brakemode=1;
   332   0010E8  0E01               	movlw	1
   333   0010EA  6E32               	movwf	(_motorL+2)^0,c
   334   0010EC                     
   335                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 27:     motorL.posDutyHighByte=(unsigned
      +                           char *)(&CCPR1H);
   336   0010EC  0EAA               	movlw	170
   337   0010EE  6E35               	movwf	(_motorL+5)^0,c
   338   0010F0  0E0F               	movlw	15
   339   0010F2  6E36               	movwf	(_motorL+6)^0,c
   340   0010F4                     
   341                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 28:     motorL.negDutyHighByte=(unsigned
      +                           char *)(&CCPR2H);
   342   0010F4  0EA6               	movlw	166
   343   0010F6  6E37               	movwf	(_motorL+7)^0,c
   344   0010F8  0E0F               	movlw	15
   345   0010FA  6E38               	movwf	(_motorL+8)^0,c
   346   0010FC                     
   347                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 29:     motorL.PWMperiod=PWMperiod;
   348   0010FC  0E00               	movlw	0
   349   0010FE  6E34               	movwf	(_motorL+4)^0,c
   350   001100  0E63               	movlw	99
   351   001102  6E33               	movwf	(_motorL+3)^0,c
   352   001104                     
   353                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 31:     motorR.power=0;
   354   001104  0E00               	movlw	0
   355   001106  6E27               	movwf	_motorR^0,c
   356   001108                     
   357                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 32:     motorR.direction=1;
   358   001108  0E01               	movlw	1
   359   00110A  6E28               	movwf	(_motorR+1)^0,c
   360   00110C                     
   361                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 33:     motorR.brakemode=1;
   362   00110C  0E01               	movlw	1
   363   00110E  6E29               	movwf	(_motorR+2)^0,c
   364   001110                     
   365                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 34:     motorR.posDutyHighByte=(unsigned
      +                           char *)(&CCPR3H);
   366   001110  0E25               	movlw	37
   367   001112  6E2C               	movwf	(_motorR+5)^0,c
   368   001114  0E0F               	movlw	15
   369   001116  6E2D               	movwf	(_motorR+6)^0,c
   370   001118                     
   371                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 35:     motorR.negDutyHighByte=(unsigned
      +                           char *)(&CCPR4H);
   372   001118  0E21               	movlw	33
   373   00111A  6E2E               	movwf	(_motorR+7)^0,c
   374   00111C  0E0F               	movlw	15
   375   00111E  6E2F               	movwf	(_motorR+8)^0,c
   376   001120                     
   377                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 36:     motorR.PWMperiod=PWMperiod;
   378   001120  0E00               	movlw	0
   379   001122  6E2B               	movwf	(_motorR+4)^0,c
   380   001124  0E63               	movlw	99
   381   001126  6E2A               	movwf	(_motorR+3)^0,c
   382   001128                     
   383                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 41:  TRISDbits.TRISD7 = 0;
   384   001128  9E84               	bcf	132,7,c	;volatile
   385   00112A                     
   386                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 42:  LATDbits.LATD7 = 0;
   387   00112A  9E7C               	bcf	124,7,c	;volatile
   388   00112C                     
   389                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 44:  TRISHbits.TRISH3 = 0;
   390   00112C  9688               	bcf	136,3,c	;volatile
   391   00112E                     
   392                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 45:  LATHbits.LATH3 = 0;
   393   00112E  9680               	bcf	128,3,c	;volatile
   394   001130                     
   395                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 49: LATDbits.LATD7=0;
   396   001130  9E7C               	bcf	124,7,c	;volatile
   397   001132                     
   398                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 50: TRISDbits.TRISD7=0;
   399   001132  9E84               	bcf	132,7,c	;volatile
   400   001134                     
   401                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 53: TRISFbits.TRISF2=1;
   402   001134  8486               	bsf	134,2,c	;volatile
   403   001136                     
   404                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 54: ANSELFbits.ANSELF2=0;
   405   001136  010E               	movlb	14	; () banked
   406   001138  95B4               	bcf	180,2,b	;volatile
   407   00113A                     
   408                           ; BSR set to: 14
   409                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 56: TRISFbits.TRISF3=1;
   410   00113A  8686               	bsf	134,3,c	;volatile
   411   00113C                     
   412                           ; BSR set to: 14
   413                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 57: ANSELFbits.ANSELF3=0;
   414   00113C  97B4               	bcf	180,3,b	;volatile
   415   00113E                     
   416                           ; BSR set to: 14
   417                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 62: TRISDbits.TRISD3 = 0;
   418   00113E  9684               	bcf	132,3,c	;volatile
   419   001140                     
   420                           ; BSR set to: 14
   421                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 63: LATDbits.LATD3 = 1;
   422   001140  867C               	bsf	124,3,c	;volatile
   423   001142                     
   424                           ; BSR set to: 14
   425                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 71: _delay((unsigned long)((1000)*(64000
      +                          000/4000.0)));
   426   001142  0E52               	movlw	82
   427   001144  6E22               	movwf	(??_main+1)^0,c
   428   001146  0E2B               	movlw	43
   429   001148  6E21               	movwf	??_main^0,c
   430   00114A  0E00               	movlw	0
   431   00114C                     u737:
   432   00114C  2EE8               	decfsz	wreg,f,c
   433   00114E  D7FE               	bra	u737
   434   001150  2E21               	decfsz	??_main^0,f,c
   435   001152  D7FC               	bra	u737
   436   001154  2E22               	decfsz	(??_main+1)^0,f,c
   437   001156  D7FA               	bra	u737
   438   001158  D000               	nop2	
   439   00115A                     
   440                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 72: turnLEFT(40, &motorL, &motorR);
   441   00115A  0E30               	movlw	low _motorL
   442   00115C  6E13               	movwf	turnLEFT@mL^0,c
   443   00115E  0E27               	movlw	low _motorR
   444   001160  6E14               	movwf	turnLEFT@mR^0,c
   445   001162  0E28               	movlw	40
   446   001164  EC01  F007         	call	_turnLEFT
   447   001168                     
   448                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 73: _delay((unsigned long)((1000)*(64000
      +                          000/4000.0)));
   449   001168  0E52               	movlw	82
   450   00116A  6E22               	movwf	(??_main+1)^0,c
   451   00116C  0E2B               	movlw	43
   452   00116E  6E21               	movwf	??_main^0,c
   453   001170  0E00               	movlw	0
   454   001172                     u747:
   455   001172  2EE8               	decfsz	wreg,f,c
   456   001174  D7FE               	bra	u747
   457   001176  2E21               	decfsz	??_main^0,f,c
   458   001178  D7FC               	bra	u747
   459   00117A  2E22               	decfsz	(??_main+1)^0,f,c
   460   00117C  D7FA               	bra	u747
   461   00117E  D000               	nop2	
   462   001180                     
   463                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 74: _delay((unsigned long)((1000)*(64000
      +                          000/4000.0)));
   464   001180  0E52               	movlw	82
   465   001182  6E22               	movwf	(??_main+1)^0,c
   466   001184  0E2B               	movlw	43
   467   001186  6E21               	movwf	??_main^0,c
   468   001188  0E00               	movlw	0
   469   00118A                     u757:
   470   00118A  2EE8               	decfsz	wreg,f,c
   471   00118C  D7FE               	bra	u757
   472   00118E  2E21               	decfsz	??_main^0,f,c
   473   001190  D7FC               	bra	u757
   474   001192  2E22               	decfsz	(??_main+1)^0,f,c
   475   001194  D7FA               	bra	u757
   476   001196  D000               	nop2	
   477   001198                     
   478                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 75: _delay((unsigned long)((1000)*(64000
      +                          000/4000.0)));
   479   001198  0E52               	movlw	82
   480   00119A  6E22               	movwf	(??_main+1)^0,c
   481   00119C  0E2B               	movlw	43
   482   00119E  6E21               	movwf	??_main^0,c
   483   0011A0  0E00               	movlw	0
   484   0011A2                     u767:
   485   0011A2  2EE8               	decfsz	wreg,f,c
   486   0011A4  D7FE               	bra	u767
   487   0011A6  2E21               	decfsz	??_main^0,f,c
   488   0011A8  D7FC               	bra	u767
   489   0011AA  2E22               	decfsz	(??_main+1)^0,f,c
   490   0011AC  D7FA               	bra	u767
   491   0011AE  D000               	nop2	
   492   0011B0  EF00  F000         	goto	start
   493   0011B4                     __end_of_main:
   494                           	callstack 0
   495                           
   496 ;; *************** function _turnLEFT *****************
   497 ;; Defined at:
   498 ;;		line 172 in file "../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c"
   499 ;; Parameters:    Size  Location     Type
   500 ;;  rotation_cal    1    wreg     unsigned char 
   501 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   502 ;;		 -> motorL(9), 
   503 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   504 ;;		 -> motorR(9), 
   505 ;; Auto vars:     Size  Location     Type
   506 ;;  rotation_cal    1   23[COMRAM] unsigned char 
   507 ;;  j               2   26[COMRAM] int 
   508 ;;  i               2   24[COMRAM] int 
   509 ;;  delay_time      2   30[COMRAM] int 
   510 ;;  max_power       2   28[COMRAM] int 
   511 ;;  acceleration    2    0        int 
   512 ;; Return value:  Size  Location     Type
   513 ;;                  1    wreg      void 
   514 ;; Registers used:
   515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   516 ;; Tracked objects:
   517 ;;		On entry : 0/0
   518 ;;		On exit  : 0/0
   519 ;;		Unchanged: 0/0
   520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   521 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   522 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   523 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   524 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   525 ;;Total ram usage:       14 bytes
   526 ;; Hardware stack levels used: 1
   527 ;; Hardware stack levels required when called: 2
   528 ;; This function calls:
   529 ;;		___awdiv
   530 ;;		_delay_ms_function
   531 ;;		_setMotorPWM
   532 ;; This function is called by:
   533 ;;		_main
   534 ;; This function uses a non-reentrant model
   535 ;;
   536                           
   537                           	psect	text1
   538   000E02                     __ptext1:
   539                           	callstack 0
   540   000E02                     _turnLEFT:
   541                           	callstack 28
   542                           
   543                           ;incstack = 0
   544                           ;turnLEFT@rotation_calibration stored from wreg
   545   000E02  6E18               	movwf	turnLEFT@rotation_calibration^0,c
   546   000E04                     
   547                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 173:     mL->direction = 0;
   548   000E04  5013               	movf	turnLEFT@mL^0,w,c
   549   000E06  6ED9               	movwf	fsr2l,c
   550   000E08  6ADA               	clrf	fsr2h,c
   551   000E0A  0E01               	movlw	1
   552   000E0C  26D9               	addwf	fsr2l,f,c
   553   000E0E  6ADF               	clrf	indf2,c
   554                           
   555                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 174:     mR->direction = 1;
   556   000E10  5014               	movf	turnLEFT@mR^0,w,c
   557   000E12  6ED9               	movwf	fsr2l,c
   558   000E14  6ADA               	clrf	fsr2h,c
   559   000E16  0E01               	movlw	1
   560   000E18  26D9               	addwf	fsr2l,f,c
   561   000E1A  0E01               	movlw	1
   562   000E1C  6EDF               	movwf	indf2,c
   563   000E1E                     
   564                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 176:     int max_power = 70;
   565   000E1E  0E00               	movlw	0
   566   000E20  6E1E               	movwf	(turnLEFT@max_power+1)^0,c
   567   000E22  0E46               	movlw	70
   568   000E24  6E1D               	movwf	turnLEFT@max_power^0,c
   569   000E26                     
   570                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 178:     int delay_time = accelerati
      +                          on_time/max_power;
   571   000E26  0E00               	movlw	0
   572   000E28  6E02               	movwf	(___awdiv@dividend+1)^0,c
   573   000E2A  0E64               	movlw	100
   574   000E2C  6E01               	movwf	___awdiv@dividend^0,c
   575   000E2E  0E00               	movlw	0
   576   000E30  6E04               	movwf	(___awdiv@divisor+1)^0,c
   577   000E32  0E46               	movlw	70
   578   000E34  6E03               	movwf	___awdiv@divisor^0,c
   579   000E36  ECDA  F008         	call	___awdiv	;wreg free
   580   000E3A  C001  F01F         	movff	?___awdiv,turnLEFT@delay_time
   581   000E3E  C002  F020         	movff	?___awdiv+1,turnLEFT@delay_time+1
   582   000E42                     
   583                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 181:     for(int i=0; i< max_power; 
      +                          i++){
   584   000E42  0E00               	movlw	0
   585   000E44  6E1A               	movwf	(turnLEFT@i+1)^0,c
   586   000E46  0E00               	movlw	0
   587   000E48  6E19               	movwf	turnLEFT@i^0,c
   588   000E4A  EF4B  F007         	goto	l1395
   589   000E4E                     l1385:
   590                           
   591                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 182:         mL->power = mL->power +
      +                           1;
   592   000E4E  5013               	movf	turnLEFT@mL^0,w,c
   593   000E50  6ED9               	movwf	fsr2l,c
   594   000E52  6ADA               	clrf	fsr2h,c
   595   000E54  5013               	movf	turnLEFT@mL^0,w,c
   596   000E56  6EE1               	movwf	fsr1l,c
   597   000E58  6AE2               	clrf	fsr1h,c
   598   000E5A  50E7               	movf	indf1,w,c
   599   000E5C  6E15               	movwf	??_turnLEFT^0,c
   600   000E5E  2815               	incf	??_turnLEFT^0,w,c
   601   000E60  6EDF               	movwf	indf2,c
   602                           
   603                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 183:         mR->power = mR->power +
      +                           1 ;
   604   000E62  5014               	movf	turnLEFT@mR^0,w,c
   605   000E64  6ED9               	movwf	fsr2l,c
   606   000E66  6ADA               	clrf	fsr2h,c
   607   000E68  5014               	movf	turnLEFT@mR^0,w,c
   608   000E6A  6EE1               	movwf	fsr1l,c
   609   000E6C  6AE2               	clrf	fsr1h,c
   610   000E6E  50E7               	movf	indf1,w,c
   611   000E70  6E15               	movwf	??_turnLEFT^0,c
   612   000E72  2815               	incf	??_turnLEFT^0,w,c
   613   000E74  6EDF               	movwf	indf2,c
   614   000E76                     
   615                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 184:         setMotorPWM(mR);
   616   000E76  C014  F00E         	movff	turnLEFT@mR,setMotorPWM@m
   617   000E7A  ECC0  F007         	call	_setMotorPWM	;wreg free
   618   000E7E                     
   619                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 185:         setMotorPWM(mL);
   620   000E7E  C013  F00E         	movff	turnLEFT@mL,setMotorPWM@m
   621   000E82  ECC0  F007         	call	_setMotorPWM	;wreg free
   622   000E86                     
   623                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 186:         delay_ms_function(delay
      +                          _time);
   624   000E86  C01F  F001         	movff	turnLEFT@delay_time,delay_ms_function@milliseconds
   625   000E8A  C020  F002         	movff	turnLEFT@delay_time+1,delay_ms_function@milliseconds+1
   626   000E8E  ECC0  F009         	call	_delay_ms_function	;wreg free
   627   000E92                     
   628                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 187:     }
   629   000E92  4A19               	infsnz	turnLEFT@i^0,f,c
   630   000E94  2A1A               	incf	(turnLEFT@i+1)^0,f,c
   631   000E96                     l1395:
   632   000E96  501D               	movf	turnLEFT@max_power^0,w,c
   633   000E98  5C19               	subwf	turnLEFT@i^0,w,c
   634   000E9A  501A               	movf	(turnLEFT@i+1)^0,w,c
   635   000E9C  0A80               	xorlw	128
   636   000E9E  6E15               	movwf	??_turnLEFT^0,c
   637   000EA0  501E               	movf	(turnLEFT@max_power+1)^0,w,c
   638   000EA2  0A80               	xorlw	128
   639   000EA4  5815               	subwfb	??_turnLEFT^0,w,c
   640   000EA6  A0D8               	btfss	status,0,c
   641   000EA8  EF58  F007         	goto	u491
   642   000EAC  EF5A  F007         	goto	u490
   643   000EB0                     u491:
   644   000EB0  EF27  F007         	goto	l1385
   645   000EB4                     u490:
   646   000EB4                     
   647                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 190:     for(int j=0; j<rotation_cal
      +                          ibration; j++){
   648   000EB4  0E00               	movlw	0
   649   000EB6  6E1C               	movwf	(turnLEFT@j+1)^0,c
   650   000EB8  0E00               	movlw	0
   651   000EBA  6E1B               	movwf	turnLEFT@j^0,c
   652   000EBC  EF69  F007         	goto	l104
   653   000EC0                     l1399:
   654                           
   655                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 191:         _delay((unsigned long)(
      +                          (10)*(64000000/4000.0)));
   656   000EC0  0ED0               	movlw	208
   657   000EC2  6E15               	movwf	??_turnLEFT^0,c
   658   000EC4  0ECA               	movlw	202
   659   000EC6                     u777:
   660   000EC6  2EE8               	decfsz	wreg,f,c
   661   000EC8  D7FE               	bra	u777
   662   000ECA  2E15               	decfsz	??_turnLEFT^0,f,c
   663   000ECC  D7FC               	bra	u777
   664   000ECE                     
   665                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 192:     }
   666   000ECE  4A1B               	infsnz	turnLEFT@j^0,f,c
   667   000ED0  2A1C               	incf	(turnLEFT@j+1)^0,f,c
   668   000ED2                     l104:
   669   000ED2  5018               	movf	turnLEFT@rotation_calibration^0,w,c
   670   000ED4  6E15               	movwf	??_turnLEFT^0,c
   671   000ED6  6A16               	clrf	(??_turnLEFT+1)^0,c
   672   000ED8  5015               	movf	??_turnLEFT^0,w,c
   673   000EDA  5C1B               	subwf	turnLEFT@j^0,w,c
   674   000EDC  501C               	movf	(turnLEFT@j+1)^0,w,c
   675   000EDE  0A80               	xorlw	128
   676   000EE0  6E17               	movwf	(??_turnLEFT+2)^0,c
   677   000EE2  5016               	movf	(??_turnLEFT+1)^0,w,c
   678   000EE4  0A80               	xorlw	128
   679   000EE6  5817               	subwfb	(??_turnLEFT+2)^0,w,c
   680   000EE8  A0D8               	btfss	status,0,c
   681   000EEA  EF79  F007         	goto	u501
   682   000EEE  EF7B  F007         	goto	u500
   683   000EF2                     u501:
   684   000EF2  EF60  F007         	goto	l1399
   685   000EF6                     u500:
   686   000EF6  EFA9  F007         	goto	l1417
   687   000EFA                     l1403:
   688                           
   689                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 196:         if(mR->power> 0 ){
   690   000EFA  5014               	movf	turnLEFT@mR^0,w,c
   691   000EFC  6ED9               	movwf	fsr2l,c
   692   000EFE  6ADA               	clrf	fsr2h,c
   693   000F00  50DF               	movf	indf2,w,c
   694   000F02  B4D8               	btfsc	status,2,c
   695   000F04  EF86  F007         	goto	u511
   696   000F08  EF88  F007         	goto	u510
   697   000F0C                     u511:
   698   000F0C  EF8C  F007         	goto	l1407
   699   000F10                     u510:
   700   000F10                     
   701                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 197:             mR->power--;
   702   000F10  5014               	movf	turnLEFT@mR^0,w,c
   703   000F12  6ED9               	movwf	fsr2l,c
   704   000F14  6ADA               	clrf	fsr2h,c
   705   000F16  06DF               	decf	indf2,f,c
   706   000F18                     l1407:
   707                           
   708                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 199:         if(mL->power> 0 ){
   709   000F18  5013               	movf	turnLEFT@mL^0,w,c
   710   000F1A  6ED9               	movwf	fsr2l,c
   711   000F1C  6ADA               	clrf	fsr2h,c
   712   000F1E  50DF               	movf	indf2,w,c
   713   000F20  B4D8               	btfsc	status,2,c
   714   000F22  EF95  F007         	goto	u521
   715   000F26  EF97  F007         	goto	u520
   716   000F2A                     u521:
   717   000F2A  EF9B  F007         	goto	l1411
   718   000F2E                     u520:
   719   000F2E                     
   720                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 200:             mL->power--;
   721   000F2E  5013               	movf	turnLEFT@mL^0,w,c
   722   000F30  6ED9               	movwf	fsr2l,c
   723   000F32  6ADA               	clrf	fsr2h,c
   724   000F34  06DF               	decf	indf2,f,c
   725   000F36                     l1411:
   726                           
   727                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 202:         setMotorPWM(mR);
   728   000F36  C014  F00E         	movff	turnLEFT@mR,setMotorPWM@m
   729   000F3A  ECC0  F007         	call	_setMotorPWM	;wreg free
   730   000F3E                     
   731                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 203:         setMotorPWM(mL);
   732   000F3E  C013  F00E         	movff	turnLEFT@mL,setMotorPWM@m
   733   000F42  ECC0  F007         	call	_setMotorPWM	;wreg free
   734   000F46                     
   735                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 204:         delay_ms_function(delay
      +                          _time);
   736   000F46  C01F  F001         	movff	turnLEFT@delay_time,delay_ms_function@milliseconds
   737   000F4A  C020  F002         	movff	turnLEFT@delay_time+1,delay_ms_function@milliseconds+1
   738   000F4E  ECC0  F009         	call	_delay_ms_function	;wreg free
   739   000F52                     l1417:
   740                           
   741                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 195:     while(mL->power || mR->powe
      +                          r > 0){
   742   000F52  5013               	movf	turnLEFT@mL^0,w,c
   743   000F54  6ED9               	movwf	fsr2l,c
   744   000F56  6ADA               	clrf	fsr2h,c
   745   000F58  50DF               	movf	indf2,w,c
   746   000F5A  A4D8               	btfss	status,2,c
   747   000F5C  EFB2  F007         	goto	u531
   748   000F60  EFB4  F007         	goto	u530
   749   000F64                     u531:
   750   000F64  EF7D  F007         	goto	l1403
   751   000F68                     u530:
   752   000F68  5014               	movf	turnLEFT@mR^0,w,c
   753   000F6A  6ED9               	movwf	fsr2l,c
   754   000F6C  6ADA               	clrf	fsr2h,c
   755   000F6E  50DF               	movf	indf2,w,c
   756   000F70  A4D8               	btfss	status,2,c
   757   000F72  EFBD  F007         	goto	u541
   758   000F76  EFBF  F007         	goto	u540
   759   000F7A                     u541:
   760   000F7A  EF7D  F007         	goto	l1403
   761   000F7E                     u540:
   762   000F7E  0012               	return		;funcret
   763   000F80                     __end_of_turnLEFT:
   764                           	callstack 0
   765                           
   766 ;; *************** function _setMotorPWM *****************
   767 ;; Defined at:
   768 ;;		line 75 in file "../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;  m               1   13[COMRAM] PTR struct DC_motor
   771 ;;		 -> motorR(9), motorL(9), 
   772 ;; Auto vars:     Size  Location     Type
   773 ;;  negDuty         1   17[COMRAM] unsigned char 
   774 ;;  posDuty         1   16[COMRAM] unsigned char 
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   784 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   785 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   786 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   787 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   788 ;;Total ram usage:        5 bytes
   789 ;; Hardware stack levels used: 1
   790 ;; Hardware stack levels required when called: 1
   791 ;; This function calls:
   792 ;;		___lwdiv
   793 ;;		___wmul
   794 ;; This function is called by:
   795 ;;		_turnLEFT
   796 ;;		_stop
   797 ;;		_forward
   798 ;;		_turnRIGHT
   799 ;;		_fullSpeedAhead
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803                           	psect	text2
   804   000F80                     __ptext2:
   805                           	callstack 0
   806   000F80                     _setMotorPWM:
   807                           	callstack 28
   808   000F80                     
   809                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 75: void setMotorPWM(DC_motor *m);..
      +                          /lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 76: {;../lab-6-motors-and-pwm-tomas-tho
      +                          mas.X/dc_motor.c: 77:     unsigned char posDuty, negDuty;;../lab-6-motors-and-pwm-tomas-
      +                          thomas.X/dc_motor.c: 79:     if(m->brakemode) {
   810   000F80  500E               	movf	setMotorPWM@m^0,w,c
   811   000F82  6ED9               	movwf	fsr2l,c
   812   000F84  6ADA               	clrf	fsr2h,c
   813   000F86  0E02               	movlw	2
   814   000F88  26D9               	addwf	fsr2l,f,c
   815   000F8A  50DF               	movf	indf2,w,c
   816   000F8C  B4D8               	btfsc	status,2,c
   817   000F8E  EFCB  F007         	goto	u411
   818   000F92  EFCD  F007         	goto	u410
   819   000F96                     u411:
   820   000F96  EFFD  F007         	goto	l1293
   821   000F9A                     u410:
   822   000F9A                     
   823                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 80:         posDuty=m->PWMperiod - (
      +                          (unsigned int)(m->power)*(m->PWMperiod))/100;
   824   000F9A  500E               	movf	setMotorPWM@m^0,w,c
   825   000F9C  6ED9               	movwf	fsr2l,c
   826   000F9E  6ADA               	clrf	fsr2h,c
   827   000FA0  50DF               	movf	indf2,w,c
   828   000FA2  6E0F               	movwf	??_setMotorPWM^0,c
   829   000FA4  500F               	movf	??_setMotorPWM^0,w,c
   830   000FA6  6E01               	movwf	___wmul@multiplier^0,c
   831   000FA8  6A02               	clrf	(___wmul@multiplier+1)^0,c
   832   000FAA  500E               	movf	setMotorPWM@m^0,w,c
   833   000FAC  6ED9               	movwf	fsr2l,c
   834   000FAE  6ADA               	clrf	fsr2h,c
   835   000FB0  0E03               	movlw	3
   836   000FB2  26D9               	addwf	fsr2l,f,c
   837   000FB4  CFDE F003          	movff	postinc2,___wmul@multiplicand
   838   000FB8  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   839   000FBC  ECD7  F009         	call	___wmul	;wreg free
   840   000FC0  C001  F007         	movff	?___wmul,___lwdiv@dividend
   841   000FC4  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
   842   000FC8  0E00               	movlw	0
   843   000FCA  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   844   000FCC  0E64               	movlw	100
   845   000FCE  6E09               	movwf	___lwdiv@divisor^0,c
   846   000FD0  EC86  F009         	call	___lwdiv	;wreg free
   847   000FD4  500E               	movf	setMotorPWM@m^0,w,c
   848   000FD6  6ED9               	movwf	fsr2l,c
   849   000FD8  6ADA               	clrf	fsr2h,c
   850   000FDA  0E03               	movlw	3
   851   000FDC  26D9               	addwf	fsr2l,f,c
   852   000FDE  50DF               	movf	indf2,w,c
   853   000FE0  6E10               	movwf	(??_setMotorPWM+1)^0,c
   854   000FE2  5007               	movf	?___lwdiv^0,w,c
   855   000FE4  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
   856   000FE6  6E11               	movwf	setMotorPWM@posDuty^0,c
   857   000FE8                     
   858                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 81:         negDuty=m->PWMperiod;
   859   000FE8  500E               	movf	setMotorPWM@m^0,w,c
   860   000FEA  6ED9               	movwf	fsr2l,c
   861   000FEC  6ADA               	clrf	fsr2h,c
   862   000FEE  0E03               	movlw	3
   863   000FF0  26D9               	addwf	fsr2l,f,c
   864   000FF2  50DF               	movf	indf2,w,c
   865   000FF4  6E12               	movwf	setMotorPWM@negDuty^0,c
   866                           
   867                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 82:     }
   868   000FF6  EF1E  F008         	goto	l1297
   869   000FFA                     l1293:
   870                           
   871                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 84:         posDuty=0;
   872   000FFA  0E00               	movlw	0
   873   000FFC  6E11               	movwf	setMotorPWM@posDuty^0,c
   874   000FFE                     
   875                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 85:   negDuty=((unsigned int)(m->pow
      +                          er)*(m->PWMperiod))/100;
   876   000FFE  500E               	movf	setMotorPWM@m^0,w,c
   877   001000  6ED9               	movwf	fsr2l,c
   878   001002  6ADA               	clrf	fsr2h,c
   879   001004  50DF               	movf	indf2,w,c
   880   001006  6E0F               	movwf	??_setMotorPWM^0,c
   881   001008  500F               	movf	??_setMotorPWM^0,w,c
   882   00100A  6E01               	movwf	___wmul@multiplier^0,c
   883   00100C  6A02               	clrf	(___wmul@multiplier+1)^0,c
   884   00100E  500E               	movf	setMotorPWM@m^0,w,c
   885   001010  6ED9               	movwf	fsr2l,c
   886   001012  6ADA               	clrf	fsr2h,c
   887   001014  0E03               	movlw	3
   888   001016  26D9               	addwf	fsr2l,f,c
   889   001018  CFDE F003          	movff	postinc2,___wmul@multiplicand
   890   00101C  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   891   001020  ECD7  F009         	call	___wmul	;wreg free
   892   001024  C001  F007         	movff	?___wmul,___lwdiv@dividend
   893   001028  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
   894   00102C  0E00               	movlw	0
   895   00102E  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   896   001030  0E64               	movlw	100
   897   001032  6E09               	movwf	___lwdiv@divisor^0,c
   898   001034  EC86  F009         	call	___lwdiv	;wreg free
   899   001038  5007               	movf	?___lwdiv^0,w,c
   900   00103A  6E12               	movwf	setMotorPWM@negDuty^0,c
   901   00103C                     l1297:
   902                           
   903                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 88:     if (m->direction) {
   904   00103C  500E               	movf	setMotorPWM@m^0,w,c
   905   00103E  6ED9               	movwf	fsr2l,c
   906   001040  6ADA               	clrf	fsr2h,c
   907   001042  0E01               	movlw	1
   908   001044  26D9               	addwf	fsr2l,f,c
   909   001046  50DF               	movf	indf2,w,c
   910   001048  B4D8               	btfsc	status,2,c
   911   00104A  EF29  F008         	goto	u421
   912   00104E  EF2B  F008         	goto	u420
   913   001052                     u421:
   914   001052  EF4B  F008         	goto	l1301
   915   001056                     u420:
   916   001056                     
   917                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 89:         *(m->posDutyHighByte)=po
      +                          sDuty;
   918   001056  500E               	movf	setMotorPWM@m^0,w,c
   919   001058  6ED9               	movwf	fsr2l,c
   920   00105A  6ADA               	clrf	fsr2h,c
   921   00105C  0E05               	movlw	5
   922   00105E  26D9               	addwf	fsr2l,f,c
   923   001060  CFDE F00F          	movff	postinc2,??_setMotorPWM
   924   001064  CFDD F010          	movff	postdec2,??_setMotorPWM+1
   925   001068  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
   926   00106C  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
   927   001070  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
   928                           
   929                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 90:         *(m->negDutyHighByte)=ne
      +                          gDuty;
   930   001074  500E               	movf	setMotorPWM@m^0,w,c
   931   001076  6ED9               	movwf	fsr2l,c
   932   001078  6ADA               	clrf	fsr2h,c
   933   00107A  0E07               	movlw	7
   934   00107C  26D9               	addwf	fsr2l,f,c
   935   00107E  CFDE F00F          	movff	postinc2,??_setMotorPWM
   936   001082  CFDD F010          	movff	postdec2,??_setMotorPWM+1
   937   001086  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
   938   00108A  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
   939   00108E  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
   940                           
   941                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 91:     } else {
   942   001092  EF69  F008         	goto	l74
   943   001096                     l1301:
   944                           
   945                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 92:         *(m->posDutyHighByte)=ne
      +                          gDuty;
   946   001096  500E               	movf	setMotorPWM@m^0,w,c
   947   001098  6ED9               	movwf	fsr2l,c
   948   00109A  6ADA               	clrf	fsr2h,c
   949   00109C  0E05               	movlw	5
   950   00109E  26D9               	addwf	fsr2l,f,c
   951   0010A0  CFDE F00F          	movff	postinc2,??_setMotorPWM
   952   0010A4  CFDD F010          	movff	postdec2,??_setMotorPWM+1
   953   0010A8  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
   954   0010AC  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
   955   0010B0  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
   956                           
   957                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 93:         *(m->negDutyHighByte)=po
      +                          sDuty;
   958   0010B4  500E               	movf	setMotorPWM@m^0,w,c
   959   0010B6  6ED9               	movwf	fsr2l,c
   960   0010B8  6ADA               	clrf	fsr2h,c
   961   0010BA  0E07               	movlw	7
   962   0010BC  26D9               	addwf	fsr2l,f,c
   963   0010BE  CFDE F00F          	movff	postinc2,??_setMotorPWM
   964   0010C2  CFDD F010          	movff	postdec2,??_setMotorPWM+1
   965   0010C6  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
   966   0010CA  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
   967   0010CE  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
   968   0010D2                     l74:
   969   0010D2  0012               	return		;funcret
   970   0010D4                     __end_of_setMotorPWM:
   971                           	callstack 0
   972                           
   973 ;; *************** function ___wmul *****************
   974 ;; Defined at:
   975 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;  multiplier      2    0[COMRAM] unsigned int 
   978 ;;  multiplicand    2    2[COMRAM] unsigned int 
   979 ;; Auto vars:     Size  Location     Type
   980 ;;  product         2    4[COMRAM] unsigned int 
   981 ;; Return value:  Size  Location     Type
   982 ;;                  2    0[COMRAM] unsigned int 
   983 ;; Registers used:
   984 ;;		wreg, status,2, status,0, prodl, prodh
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   993 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   994 ;;Total ram usage:        6 bytes
   995 ;; Hardware stack levels used: 1
   996 ;; This function calls:
   997 ;;		Nothing
   998 ;; This function is called by:
   999 ;;		_setMotorPWM
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text3
  1004   0013AE                     __ptext3:
  1005                           	callstack 0
  1006   0013AE                     ___wmul:
  1007                           	callstack 28
  1008   0013AE  5001               	movf	___wmul@multiplier^0,w,c
  1009   0013B0  0203               	mulwf	___wmul@multiplicand^0,c
  1010   0013B2  CFF3 F005          	movff	prodl,___wmul@product
  1011   0013B6  CFF4 F006          	movff	prodh,___wmul@product+1
  1012   0013BA  5001               	movf	___wmul@multiplier^0,w,c
  1013   0013BC  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1014   0013BE  50F3               	movf	243,w,c
  1015   0013C0  2606               	addwf	(___wmul@product+1)^0,f,c
  1016   0013C2  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1017   0013C4  0203               	mulwf	___wmul@multiplicand^0,c
  1018   0013C6  50F3               	movf	243,w,c
  1019   0013C8  2606               	addwf	(___wmul@product+1)^0,f,c
  1020   0013CA  C005  F001         	movff	___wmul@product,?___wmul
  1021   0013CE  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1022   0013D2  0012               	return		;funcret
  1023   0013D4                     __end_of___wmul:
  1024                           	callstack 0
  1025                           
  1026 ;; *************** function ___lwdiv *****************
  1027 ;; Defined at:
  1028 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  1029 ;; Parameters:    Size  Location     Type
  1030 ;;  dividend        2    6[COMRAM] unsigned int 
  1031 ;;  divisor         2    8[COMRAM] unsigned int 
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;  quotient        2   10[COMRAM] unsigned int 
  1034 ;;  counter         1   12[COMRAM] unsigned char 
  1035 ;; Return value:  Size  Location     Type
  1036 ;;                  2    6[COMRAM] unsigned int 
  1037 ;; Registers used:
  1038 ;;		wreg, status,2, status,0
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1044 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1045 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1047 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1048 ;;Total ram usage:        7 bytes
  1049 ;; Hardware stack levels used: 1
  1050 ;; This function calls:
  1051 ;;		Nothing
  1052 ;; This function is called by:
  1053 ;;		_setMotorPWM
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           	psect	text4
  1058   00130C                     __ptext4:
  1059                           	callstack 0
  1060   00130C                     ___lwdiv:
  1061                           	callstack 28
  1062   00130C  0E00               	movlw	0
  1063   00130E  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  1064   001310  0E00               	movlw	0
  1065   001312  6E0B               	movwf	___lwdiv@quotient^0,c
  1066   001314  5009               	movf	___lwdiv@divisor^0,w,c
  1067   001316  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1068   001318  B4D8               	btfsc	status,2,c
  1069   00131A  EF91  F009         	goto	u371
  1070   00131E  EF93  F009         	goto	u370
  1071   001322                     u371:
  1072   001322  EFBB  F009         	goto	l691
  1073   001326                     u370:
  1074   001326  0E01               	movlw	1
  1075   001328  6E0D               	movwf	___lwdiv@counter^0,c
  1076   00132A  EF9B  F009         	goto	l1267
  1077   00132E                     l1265:
  1078   00132E  90D8               	bcf	status,0,c
  1079   001330  3609               	rlcf	___lwdiv@divisor^0,f,c
  1080   001332  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1081   001334  2A0D               	incf	___lwdiv@counter^0,f,c
  1082   001336                     l1267:
  1083   001336  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  1084   001338  EFA0  F009         	goto	u381
  1085   00133C  EFA2  F009         	goto	u380
  1086   001340                     u381:
  1087   001340  EF97  F009         	goto	l1265
  1088   001344                     u380:
  1089   001344                     l1269:
  1090   001344  90D8               	bcf	status,0,c
  1091   001346  360B               	rlcf	___lwdiv@quotient^0,f,c
  1092   001348  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1093   00134A  5009               	movf	___lwdiv@divisor^0,w,c
  1094   00134C  5C07               	subwf	___lwdiv@dividend^0,w,c
  1095   00134E  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1096   001350  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1097   001352  A0D8               	btfss	status,0,c
  1098   001354  EFAE  F009         	goto	u391
  1099   001358  EFB0  F009         	goto	u390
  1100   00135C                     u391:
  1101   00135C  EFB5  F009         	goto	l1277
  1102   001360                     u390:
  1103   001360  5009               	movf	___lwdiv@divisor^0,w,c
  1104   001362  5E07               	subwf	___lwdiv@dividend^0,f,c
  1105   001364  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1106   001366  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1107   001368  800B               	bsf	___lwdiv@quotient^0,0,c
  1108   00136A                     l1277:
  1109   00136A  90D8               	bcf	status,0,c
  1110   00136C  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1111   00136E  3209               	rrcf	___lwdiv@divisor^0,f,c
  1112   001370  2E0D               	decfsz	___lwdiv@counter^0,f,c
  1113   001372  EFA2  F009         	goto	l1269
  1114   001376                     l691:
  1115   001376  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  1116   00137A  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1117   00137E  0012               	return		;funcret
  1118   001380                     __end_of___lwdiv:
  1119                           	callstack 0
  1120                           
  1121 ;; *************** function _delay_ms_function *****************
  1122 ;; Defined at:
  1123 ;;		line 67 in file "../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;  milliseconds    2    0[COMRAM] unsigned int 
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, status,2, status,0
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1137 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1139 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1140 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1141 ;;Total ram usage:        3 bytes
  1142 ;; Hardware stack levels used: 1
  1143 ;; This function calls:
  1144 ;;		Nothing
  1145 ;; This function is called by:
  1146 ;;		_turnLEFT
  1147 ;;		_forward
  1148 ;;		_turnRIGHT
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           	psect	text5
  1153   001380                     __ptext5:
  1154                           	callstack 0
  1155   001380                     _delay_ms_function:
  1156                           	callstack 29
  1157   001380                     
  1158                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 68:     while (milliseconds > 0) {
  1159   001380  EFCD  F009         	goto	l64
  1160   001384                     l1283:
  1161                           
  1162                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 69:         _delay((unsigned long)((
      +                          1)*(64000000/4000.0)));
  1163   001384  0E15               	movlw	21
  1164   001386  6E03               	movwf	??_delay_ms_function^0,c
  1165   001388  0EC6               	movlw	198
  1166   00138A                     u787:
  1167   00138A  2EE8               	decfsz	wreg,f,c
  1168   00138C  D7FE               	bra	u787
  1169   00138E  2E03               	decfsz	??_delay_ms_function^0,f,c
  1170   001390  D7FC               	bra	u787
  1171   001392  D000               	nop2	
  1172   001394                     
  1173                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 70:         milliseconds--;
  1174   001394  0601               	decf	delay_ms_function@milliseconds^0,f,c
  1175   001396  A0D8               	btfss	status,0,c
  1176   001398  0602               	decf	(delay_ms_function@milliseconds+1)^0,f,c
  1177   00139A                     l64:
  1178                           
  1179                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 68:     while (milliseconds > 0) {
  1180   00139A  5001               	movf	delay_ms_function@milliseconds^0,w,c
  1181   00139C  1002               	iorwf	(delay_ms_function@milliseconds+1)^0,w,c
  1182   00139E  A4D8               	btfss	status,2,c
  1183   0013A0  EFD4  F009         	goto	u401
  1184   0013A4  EFD6  F009         	goto	u400
  1185   0013A8                     u401:
  1186   0013A8  EFC2  F009         	goto	l1283
  1187   0013AC                     u400:
  1188   0013AC  0012               	return		;funcret
  1189   0013AE                     __end_of_delay_ms_function:
  1190                           	callstack 0
  1191                           
  1192 ;; *************** function ___awdiv *****************
  1193 ;; Defined at:
  1194 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;  dividend        2    0[COMRAM] int 
  1197 ;;  divisor         2    2[COMRAM] int 
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;  quotient        2    6[COMRAM] int 
  1200 ;;  sign            1    5[COMRAM] unsigned char 
  1201 ;;  counter         1    4[COMRAM] unsigned char 
  1202 ;; Return value:  Size  Location     Type
  1203 ;;                  2    0[COMRAM] int 
  1204 ;; Registers used:
  1205 ;;		wreg, status,2, status,0
  1206 ;; Tracked objects:
  1207 ;;		On entry : 0/0
  1208 ;;		On exit  : 0/0
  1209 ;;		Unchanged: 0/0
  1210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1211 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1212 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1214 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1215 ;;Total ram usage:        8 bytes
  1216 ;; Hardware stack levels used: 1
  1217 ;; This function calls:
  1218 ;;		Nothing
  1219 ;; This function is called by:
  1220 ;;		_turnLEFT
  1221 ;;		_forward
  1222 ;;		_turnRIGHT
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           	psect	text6
  1227   0011B4                     __ptext6:
  1228                           	callstack 0
  1229   0011B4                     ___awdiv:
  1230                           	callstack 29
  1231   0011B4  0E00               	movlw	0
  1232   0011B6  6E06               	movwf	___awdiv@sign^0,c
  1233   0011B8  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1234   0011BA  EFE3  F008         	goto	u430
  1235   0011BE  EFE1  F008         	goto	u431
  1236   0011C2                     u431:
  1237   0011C2  EFE9  F008         	goto	l1311
  1238   0011C6                     u430:
  1239   0011C6  6C03               	negf	___awdiv@divisor^0,c
  1240   0011C8  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1241   0011CA  B0D8               	btfsc	status,0,c
  1242   0011CC  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1243   0011CE  0E01               	movlw	1
  1244   0011D0  6E06               	movwf	___awdiv@sign^0,c
  1245   0011D2                     l1311:
  1246   0011D2  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1247   0011D4  EFF0  F008         	goto	u440
  1248   0011D8  EFEE  F008         	goto	u441
  1249   0011DC                     u441:
  1250   0011DC  EFF6  F008         	goto	l1317
  1251   0011E0                     u440:
  1252   0011E0  6C01               	negf	___awdiv@dividend^0,c
  1253   0011E2  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1254   0011E4  B0D8               	btfsc	status,0,c
  1255   0011E6  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1256   0011E8  0E01               	movlw	1
  1257   0011EA  1A06               	xorwf	___awdiv@sign^0,f,c
  1258   0011EC                     l1317:
  1259   0011EC  0E00               	movlw	0
  1260   0011EE  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1261   0011F0  0E00               	movlw	0
  1262   0011F2  6E07               	movwf	___awdiv@quotient^0,c
  1263   0011F4  5003               	movf	___awdiv@divisor^0,w,c
  1264   0011F6  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1265   0011F8  B4D8               	btfsc	status,2,c
  1266   0011FA  EF01  F009         	goto	u451
  1267   0011FE  EF03  F009         	goto	u450
  1268   001202                     u451:
  1269   001202  EF2B  F009         	goto	l1339
  1270   001206                     u450:
  1271   001206  0E01               	movlw	1
  1272   001208  6E05               	movwf	___awdiv@counter^0,c
  1273   00120A  EF0B  F009         	goto	l1325
  1274   00120E                     l1323:
  1275   00120E  90D8               	bcf	status,0,c
  1276   001210  3603               	rlcf	___awdiv@divisor^0,f,c
  1277   001212  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1278   001214  2A05               	incf	___awdiv@counter^0,f,c
  1279   001216                     l1325:
  1280   001216  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1281   001218  EF10  F009         	goto	u461
  1282   00121C  EF12  F009         	goto	u460
  1283   001220                     u461:
  1284   001220  EF07  F009         	goto	l1323
  1285   001224                     u460:
  1286   001224                     l1327:
  1287   001224  90D8               	bcf	status,0,c
  1288   001226  3607               	rlcf	___awdiv@quotient^0,f,c
  1289   001228  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1290   00122A  5003               	movf	___awdiv@divisor^0,w,c
  1291   00122C  5C01               	subwf	___awdiv@dividend^0,w,c
  1292   00122E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1293   001230  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1294   001232  A0D8               	btfss	status,0,c
  1295   001234  EF1E  F009         	goto	u471
  1296   001238  EF20  F009         	goto	u470
  1297   00123C                     u471:
  1298   00123C  EF25  F009         	goto	l1335
  1299   001240                     u470:
  1300   001240  5003               	movf	___awdiv@divisor^0,w,c
  1301   001242  5E01               	subwf	___awdiv@dividend^0,f,c
  1302   001244  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1303   001246  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1304   001248  8007               	bsf	___awdiv@quotient^0,0,c
  1305   00124A                     l1335:
  1306   00124A  90D8               	bcf	status,0,c
  1307   00124C  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1308   00124E  3203               	rrcf	___awdiv@divisor^0,f,c
  1309   001250  2E05               	decfsz	___awdiv@counter^0,f,c
  1310   001252  EF12  F009         	goto	l1327
  1311   001256                     l1339:
  1312   001256  5006               	movf	___awdiv@sign^0,w,c
  1313   001258  B4D8               	btfsc	status,2,c
  1314   00125A  EF31  F009         	goto	u481
  1315   00125E  EF33  F009         	goto	u480
  1316   001262                     u481:
  1317   001262  EF37  F009         	goto	l1343
  1318   001266                     u480:
  1319   001266  6C07               	negf	___awdiv@quotient^0,c
  1320   001268  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1321   00126A  B0D8               	btfsc	status,0,c
  1322   00126C  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1323   00126E                     l1343:
  1324   00126E  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1325   001272  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1326   001276  0012               	return		;funcret
  1327   001278                     __end_of___awdiv:
  1328                           	callstack 0
  1329                           
  1330 ;; *************** function _initDCmotorsPWM *****************
  1331 ;; Defined at:
  1332 ;;		line 5 in file "../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;		None
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      void 
  1339 ;; Registers used:
  1340 ;;		wreg, status,2
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1346 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1349 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1350 ;;Total ram usage:        2 bytes
  1351 ;; Hardware stack levels used: 1
  1352 ;; This function calls:
  1353 ;;		Nothing
  1354 ;; This function is called by:
  1355 ;;		_main
  1356 ;; This function uses a non-reentrant model
  1357 ;;
  1358                           
  1359                           	psect	text7
  1360   001278                     __ptext7:
  1361                           	callstack 0
  1362   001278                     _initDCmotorsPWM:
  1363                           	callstack 30
  1364   001278                     
  1365                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  1366   001278  9485               	bcf	133,2,c	;volatile
  1367                           
  1368                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  1369   00127A  9885               	bcf	133,4,c	;volatile
  1370                           
  1371                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  1372   00127C  9E83               	bcf	131,7,c	;volatile
  1373                           
  1374                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  1375   00127E  9C87               	bcf	135,6,c	;volatile
  1376                           
  1377                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 12:     LATEbits.LATE2 = 0;
  1378   001280  947D               	bcf	125,2,c	;volatile
  1379                           
  1380                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 13:     LATEbits.LATE4 = 0;
  1381   001282  987D               	bcf	125,4,c	;volatile
  1382                           
  1383                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 14:     LATCbits.LATC7 = 0;
  1384   001284  9E7B               	bcf	123,7,c	;volatile
  1385                           
  1386                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 15:     LATGbits.LATG6 = 0;
  1387   001286  9C7F               	bcf	127,6,c	;volatile
  1388   001288                     
  1389                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 18:     RE2PPS=0x05;
  1390   001288  0E05               	movlw	5
  1391   00128A  010E               	movlb	14	; () banked
  1392   00128C  6F74               	movwf	116,b	;volatile
  1393                           
  1394                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 19:     RE4PPS=0x06;
  1395   00128E  0E06               	movlw	6
  1396   001290  6F76               	movwf	118,b	;volatile
  1397                           
  1398                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 20:     RC7PPS=0x07;
  1399   001292  0E07               	movlw	7
  1400   001294  6F69               	movwf	105,b	;volatile
  1401                           
  1402                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 21:     RG6PPS=0x08;
  1403   001296  0E08               	movlw	8
  1404   001298  6F88               	movwf	136,b	;volatile
  1405                           
  1406                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 24:     T2CONbits.CKPS=100;
  1407   00129A  50BD               	movf	189,w,c	;volatile
  1408   00129C  0B8F               	andlw	-113
  1409   00129E  0940               	iorlw	64
  1410   0012A0  6EBD               	movwf	189,c	;volatile
  1411                           
  1412                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  1413   0012A2  0EE0               	movlw	-32
  1414   0012A4  16BE               	andwf	190,f,c	;volatile
  1415                           
  1416                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  1417   0012A6  50BF               	movf	191,w,c	;volatile
  1418   0012A8  0BF0               	andlw	-16
  1419   0012AA  0901               	iorlw	1
  1420   0012AC  6EBF               	movwf	191,c	;volatile
  1421   0012AE                     
  1422                           ; BSR set to: 14
  1423                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 30:     T2PR=PWMperiod;
  1424   0012AE  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1425   0012B2                     
  1426                           ; BSR set to: 14
  1427                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 31:     T2CONbits.ON=1;
  1428   0012B2  8EBD               	bsf	189,7,c	;volatile
  1429                           
  1430                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 35:     CCPR1H=0;
  1431   0012B4  0E00               	movlw	0
  1432   0012B6  6EAA               	movwf	170,c	;volatile
  1433                           
  1434                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 36:     CCPR2H=0;
  1435   0012B8  0E00               	movlw	0
  1436   0012BA  6EA6               	movwf	166,c	;volatile
  1437                           
  1438                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 37:     CCPR3H=0;
  1439   0012BC  0E00               	movlw	0
  1440   0012BE  010F               	movlb	15	; () banked
  1441   0012C0  6F25               	movwf	37,b	;volatile
  1442                           
  1443                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 38:     CCPR4H=0;
  1444   0012C2  0E00               	movlw	0
  1445   0012C4  6F21               	movwf	33,b	;volatile
  1446                           
  1447                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1448   0012C6  0EFC               	movlw	-4
  1449   0012C8  16AD               	andwf	173,f,c	;volatile
  1450                           
  1451                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1452   0012CA  0EF3               	movlw	-13
  1453   0012CC  16AD               	andwf	173,f,c	;volatile
  1454                           
  1455                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1456   0012CE  0ECF               	movlw	-49
  1457   0012D0  16AD               	andwf	173,f,c	;volatile
  1458                           
  1459                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1460   0012D2  0E3F               	movlw	-193
  1461   0012D4  16AD               	andwf	173,f,c	;volatile
  1462   0012D6                     
  1463                           ; BSR set to: 15
  1464                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 47:     CCP1CONbits.FMT=1;
  1465   0012D6  88AB               	bsf	171,4,c	;volatile
  1466                           
  1467                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1468   0012D8  50AB               	movf	171,w,c	;volatile
  1469   0012DA  0BF0               	andlw	-16
  1470   0012DC  090C               	iorlw	12
  1471   0012DE  6EAB               	movwf	171,c	;volatile
  1472   0012E0                     
  1473                           ; BSR set to: 15
  1474                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 49:     CCP1CONbits.EN=1;
  1475   0012E0  8EAB               	bsf	171,7,c	;volatile
  1476   0012E2                     
  1477                           ; BSR set to: 15
  1478                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 51:     CCP2CONbits.FMT=1;
  1479   0012E2  88A7               	bsf	167,4,c	;volatile
  1480                           
  1481                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  1482   0012E4  50A7               	movf	167,w,c	;volatile
  1483   0012E6  0BF0               	andlw	-16
  1484   0012E8  090C               	iorlw	12
  1485   0012EA  6EA7               	movwf	167,c	;volatile
  1486   0012EC                     
  1487                           ; BSR set to: 15
  1488                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 53:     CCP2CONbits.EN=1;
  1489   0012EC  8EA7               	bsf	167,7,c	;volatile
  1490   0012EE                     
  1491                           ; BSR set to: 15
  1492                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 55:     CCP3CONbits.FMT=1;
  1493   0012EE  8926               	bsf	38,4,b	;volatile
  1494                           
  1495                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  1496   0012F0  5126               	movf	38,w,b	;volatile
  1497   0012F2  0BF0               	andlw	-16
  1498   0012F4  090C               	iorlw	12
  1499   0012F6  6F26               	movwf	38,b	;volatile
  1500   0012F8                     
  1501                           ; BSR set to: 15
  1502                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 57:     CCP3CONbits.EN=1;
  1503   0012F8  8F26               	bsf	38,7,b	;volatile
  1504   0012FA                     
  1505                           ; BSR set to: 15
  1506                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 59:     CCP4CONbits.FMT=1;
  1507   0012FA  8922               	bsf	34,4,b	;volatile
  1508                           
  1509                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  1510   0012FC  5122               	movf	34,w,b	;volatile
  1511   0012FE  0BF0               	andlw	-16
  1512   001300  090C               	iorlw	12
  1513   001302  6F22               	movwf	34,b	;volatile
  1514   001304                     
  1515                           ; BSR set to: 15
  1516                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 61:     CCP4CONbits.EN=1;
  1517   001304  8F22               	bsf	34,7,b	;volatile
  1518   001306                     
  1519                           ; BSR set to: 15
  1520                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 64:     TRISHbits.TRISH3 = 0;
  1521   001306  9688               	bcf	136,3,c	;volatile
  1522   001308                     
  1523                           ; BSR set to: 15
  1524                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor.c: 65:     LATHbits.LATH3 = 0;
  1525   001308  9680               	bcf	128,3,c	;volatile
  1526   00130A                     
  1527                           ; BSR set to: 15
  1528   00130A  0012               	return		;funcret
  1529   00130C                     __end_of_initDCmotorsPWM:
  1530                           	callstack 0
  1531                           
  1532                           	psect	smallconst
  1533   000E00                     __psmallconst:
  1534                           	callstack 0
  1535   000E00  00                 	db	0
  1536   000E01  00                 	db	0	; dummy byte at the end
  1537   000000                     
  1538                           	psect	rparam
  1539   000000                     
  1540                           	psect	config
  1541                           
  1542                           ;Config register CONFIG1L @ 0x300000
  1543                           ;	External Oscillator mode Selection bits
  1544                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1545                           ;	Power-up default value for COSC bits
  1546                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  1547   300000                     	org	3145728
  1548   300000  AA                 	db	170
  1549                           
  1550                           ;Config register CONFIG1H @ 0x300001
  1551                           ;	unspecified, using default values
  1552                           ;	Clock Out Enable bit
  1553                           ;	CLKOUTEN = 0x1, unprogrammed default
  1554                           ;	Clock Switch Enable bit
  1555                           ;	CSWEN = 0x1, unprogrammed default
  1556                           ;	Fail-Safe Clock Monitor Enable bit
  1557                           ;	FCMEN = 0x1, unprogrammed default
  1558   300001                     	org	3145729
  1559   300001  FF                 	db	255
  1560                           
  1561                           ;Config register CONFIG3L @ 0x300004
  1562                           ;	WDT Period Select bits
  1563                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  1564                           ;	WDT operating mode
  1565                           ;	WDTE = OFF, WDT Disabled
  1566   300004                     	org	3145732
  1567   300004  9F                 	db	159
  1568                           
  1569                           ;Config register CONFIG3H @ 0x300005
  1570                           ;	unspecified, using default values
  1571                           ;	WDT Window Select bits
  1572                           ;	WDTCWS = 0x7, unprogrammed default
  1573                           ;	WDT input clock selector
  1574                           ;	WDTCCS = 0x7, unprogrammed default
  1575   300005                     	org	3145733
  1576   300005  FF                 	db	255
  1577                           tosu	equ	0xFFF
  1578                           tosh	equ	0xFFE
  1579                           tosl	equ	0xFFD
  1580                           stkptr	equ	0xFFC
  1581                           pclatu	equ	0xFFB
  1582                           pclath	equ	0xFFA
  1583                           pcl	equ	0xFF9
  1584                           tblptru	equ	0xFF8
  1585                           tblptrh	equ	0xFF7
  1586                           tblptrl	equ	0xFF6
  1587                           tablat	equ	0xFF5
  1588                           prodh	equ	0xFF4
  1589                           prodl	equ	0xFF3
  1590                           indf0	equ	0xFEF
  1591                           postinc0	equ	0xFEE
  1592                           postdec0	equ	0xFED
  1593                           preinc0	equ	0xFEC
  1594                           plusw0	equ	0xFEB
  1595                           fsr0h	equ	0xFEA
  1596                           fsr0l	equ	0xFE9
  1597                           wreg	equ	0xFE8
  1598                           indf1	equ	0xFE7
  1599                           postinc1	equ	0xFE6
  1600                           postdec1	equ	0xFE5
  1601                           preinc1	equ	0xFE4
  1602                           plusw1	equ	0xFE3
  1603                           fsr1h	equ	0xFE2
  1604                           fsr1l	equ	0xFE1
  1605                           bsr	equ	0xFE0
  1606                           indf2	equ	0xFDF
  1607                           postinc2	equ	0xFDE
  1608                           postdec2	equ	0xFDD
  1609                           preinc2	equ	0xFDC
  1610                           plusw2	equ	0xFDB
  1611                           fsr2h	equ	0xFDA
  1612                           fsr2l	equ	0xFD9
  1613                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     34      57
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    forward@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    forward@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    forward@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    forward@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    turnLEFT@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLEFT@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    turnLEFT@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    turnLEFT@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLEFT@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    turnLEFT@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    turnRIGHT@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    turnRIGHT@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    turnRIGHT@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    turnRIGHT@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 


Critical Paths under _main in COMRAM

    _main->_turnLEFT
    _turnLEFT->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4372
                                             32 COMRAM     2     2      0
                    _initDCmotorsPWM
                           _turnLEFT
 ---------------------------------------------------------------------------------
 (1) _turnLEFT                                            16    14      2    4207
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2285
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _delay_ms_function                                    3     1      2     479
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     756
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initDCmotorsPWM
   _turnLEFT
     ___awdiv
     _delay_ms_function
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      48        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRllllll     7A      0       0      46        0.0%
BITBIGSFRllllhh     6C      0       0      41        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     22      39       1       60.0%
BITBIGSFRllllhh     54      0       0      39        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRllllhh     2B      0       0      42        0.0%
BITBIGSFRhhlll      1D      0       0      36        0.0%
BITBIGSFRllllhh     11      0       0      43        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRlllllh      A      0       0      45        0.0%
BITBIGSFRllllhh      2      0       0      40        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRllhh        2      0       0      37        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRllllhl      1      0       0      44        0.0%
BITBIGSFRllhl        1      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      39      47        0.0%
DATA                 0      0      39       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Mar 02 18:34:07 2024

                           l61 130A                             l64 139A                             l74 10D2  
                           l67 13AC                   ___awdiv@sign 0006            ___wmul@multiplicand 0003  
                          l200 13D2                            l112 0F7E                            l104 0ED2  
                          l172 11B0                            l431 1276                            l691 1376  
                          l698 137E                            u400 13AC                            u401 13A8  
                          u410 0F9A                            u411 0F96                            u420 1056  
                          u500 0EF6                            u421 1052                            u501 0EF2  
                          u430 11C6                            u510 0F10                            u431 11C2  
                          u511 0F0C                            u440 11E0                            u520 0F2E  
                          u441 11DC                            u521 0F2A                            u450 1206  
                          u370 1326                            u530 0F68                            u451 1202  
                          u371 1322                            u531 0F64                            u460 1224  
                          u380 1344                            u540 0F7E                            u461 1220  
                          u381 1340                            u541 0F7A                            u470 1240  
                          u390 1360                            u471 123C                            u391 135C  
                          u480 1266                            u481 1262                            u490 0EB4  
                          u491 0EB0                            u737 114C                            u747 1172  
                          u757 118A                            u767 11A2                            u777 0EC6  
                          u787 138A                            wreg 0FE8                           l1301 1096  
                         l1311 11D2                           l1303 11B4                           l1321 1206  
                         l1313 11E0                           l1305 11B8                           l1401 0ECE  
                         l1331 1240                           l1323 120E                           l1315 11E8  
                         l1307 11C6                           l1411 0F36                           l1403 0EFA  
                         l1341 1266                           l1333 1248                           l1325 1216  
                         l1317 11EC                           l1309 11CE                           l1261 1314  
                         l1253 13AE                           l1413 0F3E                           l1405 0F10  
                         l1351 12AE                           l1343 126E                           l1335 124A  
                         l1327 1224                           l1319 11F4                           l1271 134A  
                         l1263 1326                           l1255 13CA                           l1415 0F46  
                         l1407 0F18                           l1361 12EC                           l1353 12B2  
                         l1337 1250                           l1329 122A                           l1281 1380  
                         l1273 1360                           l1265 132E                           l1409 0F2E  
                         l1417 0F52                           l1601 113A                           l1371 1306  
                         l1363 12EE                           l1355 12D6                           l1347 1278  
                         l1339 1256                           l1283 1384                           l1275 1368  
                         l1267 1336                           l1259 130C                           l1291 0FE8  
                         l1419 0F68                           l1611 115A                           l1603 113C  
                         l1373 1308                           l1365 12F8                           l1357 12E0  
                         l1349 1288                           l1285 1394                           l1277 136A  
                         l1269 1344                           l1293 0FFA                           l1381 0E26  
                         l1613 1168                           l1605 113E                           l1367 12FA  
                         l1359 12E2                           l1279 1370                           l1295 0FFE  
                         l1287 0F80                           l1391 0E86                           l1383 0E42  
                         l1375 0E04                           l1615 1180                           l1607 1140  
                         l1369 1304                           l1297 103C                           l1289 0F9A  
                         l1393 0E92                           l1385 0E4E                           l1377 0E1E  
                         l1617 1198                           l1609 1142                           l1561 10E0  
                         l1299 1056                           l1387 0E76                           l1395 0E96  
                         l1379 0E26                           l1571 10FC                           l1563 10E4  
                         l1397 0EB4                           l1389 0E7E                           l1581 1118  
                         l1573 1104                           l1565 10E8                           l1557 10D4  
                         l1399 0EC0                           l1591 112E                           l1583 1120  
                         l1575 1108                           l1567 10EC                           l1559 10D4  
                         l1593 1130                           l1585 1128                           l1577 110C  
                         l1569 10F4                           l1595 1132                           l1587 112A  
                         l1579 1110                           l1597 1134                           l1589 112C  
                         l1599 1136                           _T2PR 0FBC                           _main 10D4  
                         _temp 0039                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf1 0FE7                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           prodh 0FF4                           prodl 0FF3  
                         start 0000                   ___param_bank 0000                          ?_main 0001  
              __end_of___awdiv 1278                ___awdiv@divisor 0003                __end_of___lwdiv 1380  
              ___awdiv@counter 0005                          tablat 0FF5                          status 0FD8  
              __initialization 13D4                   __end_of_main 11B4                         ??_main 0021  
                __activetblptr 0000                   ?_setMotorPWM 000E                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
             ___awdiv@dividend 0001                         _RE2PPS 0E74                         _RC7PPS 0E69  
                       _RE4PPS 0E76                         _RG6PPS 0E88                   _CCPTMRS0bits 0FAD  
                       ___wmul 13AE                      ??___awdiv 0005                      ??___lwdiv 000B  
delay_ms_function@milliseconds 0001                         clear_0 13EC               ___awdiv@quotient 0007  
                       _motorL 0030                         _motorR 0027                         isa$std 0001  
                 __pdataCOMRAM 0039                   __mediumconst 0000                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8              ??_initDCmotorsPWM 0003  
             __end_of_turnLEFT 0F80                     __accesstop 0060        __end_of__initialization 13F2  
                ___rparam_used 0001                 __pcstackCOMRAM 0001                   _T2CLKCONbits 0FBF  
                      ?___wmul 0001              _delay_ms_function 1380             ?_delay_ms_function 0001  
          ??_delay_ms_function 0003   turnLEFT@rotation_calibration 0018                        __Hparam 0000  
                      __Lparam 0000                        ___awdiv 11B4                        ___lwdiv 130C  
                   _off_period 0023                   __psmallconst 0E00                      ?_turnLEFT 0013  
    __end_of_delay_ms_function 13AE                        __pcinit 13D4                        __ramtop 0E00  
                      __ptext0 10D4                        __ptext1 0E02                        __ptext2 0F80  
                      __ptext3 13AE                        __ptext4 130C                        __ptext5 1380  
                      __ptext6 11B4                        __ptext7 1278                      _T2CONbits 0FBD  
                    _T2HLTbits 0FBE           end_of_initialization 13F2                        postdec2 0FDD  
                      postinc0 0FEE                        postinc2 0FDE                     ??_turnLEFT 0015  
              _initDCmotorsPWM 1278             setMotorPWM@negDuty 0012             setMotorPWM@posDuty 0011  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
                  _CCP1CONbits 0FAB                    _CCP2CONbits 0FA7                    _CCP3CONbits 0F26  
                  _CCP4CONbits 0F22                 __end_of___wmul 13D4                  __pidataCOMRAM 13F8  
          start_initialization 13D4             turnLEFT@delay_time 001F        __end_of_initDCmotorsPWM 130C  
                     ??___wmul 0005                    __pbssCOMRAM 0023               ___lwdiv@dividend 0007  
                     ?___awdiv 0001                       ?___lwdiv 0007                    __smallconst 0E00  
                ??_setMotorPWM 000F               ___lwdiv@quotient 000B       initDCmotorsPWM@PWMperiod 0001  
               ___wmul@product 0005                       _LATCbits 0F7B                       _LATDbits 0F7C  
                     _LATEbits 0F7D                      _on_period 0025                       _LATGbits 0F7F  
                     _LATHbits 0F80               ?_initDCmotorsPWM 0001              ___wmul@multiplier 0001  
                 setMotorPWM@m 000E            __end_of_setMotorPWM 10D4                       __Hrparam 0000  
                     __Lrparam 0000                     _ANSELFbits 0EB4                     turnLEFT@mL 0013  
                   turnLEFT@mR 0014                ___lwdiv@divisor 0009                ___lwdiv@counter 000D  
            turnLEFT@max_power 001D                       isa$xinst 0000                       _turnLEFT 0E02  
                  _setMotorPWM 0F80                      turnLEFT@i 0019                      turnLEFT@j 001B  
