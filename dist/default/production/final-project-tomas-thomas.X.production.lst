

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 21:33:00 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Generated 21/07/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F67K40 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61   000000                     
    62                           	psect	idataCOMRAM
    63   001928                     __pidataCOMRAM:
    64                           	callstack 0
    65                           
    66                           ;initializer for _temp
    67   001928  07                 	db	7
    68   000000                     _TRISFbits	set	3974
    69   000000                     _TRISDbits	set	3972
    70   000000                     _TRISGbits	set	3975
    71   000000                     _RC7PPS	set	3689
    72   000000                     _RE2PPS	set	3700
    73   000000                     _LATCbits	set	3963
    74   000000                     _LATDbits	set	3964
    75   000000                     _LATHbits	set	3968
    76   000000                     _PORTFbits	set	3982
    77   000000                     _T2PR	set	4028
    78   000000                     _T2CONbits	set	4029
    79   000000                     _CCPR2H	set	4006
    80   000000                     _CCPR1H	set	4010
    81   000000                     _TRISCbits	set	3971
    82   000000                     _TRISEbits	set	3973
    83   000000                     _LATGbits	set	3967
    84   000000                     _LATEbits	set	3965
    85   000000                     _TRISHbits	set	3976
    86   000000                     _RE4PPS	set	3702
    87   000000                     _RG6PPS	set	3720
    88   000000                     _ANSELFbits	set	3764
    89   000000                     _CCPR4H	set	3873
    90   000000                     _CCPR3H	set	3877
    91   000000                     _T2CLKCONbits	set	4031
    92   000000                     _T2HLTbits	set	4030
    93   000000                     _CCP1CONbits	set	4011
    94   000000                     _CCPTMRS0bits	set	4013
    95   000000                     _CCP2CONbits	set	4007
    96   000000                     _CCP3CONbits	set	3878
    97   000000                     _CCP4CONbits	set	3874
    98                           
    99                           ; #config settings
   100                           
   101                           	psect	cinit
   102   001904                     __pcinit:
   103                           	callstack 0
   104   001904                     start_initialization:
   105                           	callstack 0
   106   001904                     __initialization:
   107                           	callstack 0
   108                           
   109                           ; Initialize objects allocated to COMRAM (1 bytes)
   110                           ; load TBLPTR registers with __pidataCOMRAM
   111   001904  0E28               	movlw	low __pidataCOMRAM
   112   001906  6EF6               	movwf	tblptrl,c
   113   001908  0E19               	movlw	high __pidataCOMRAM
   114   00190A  6EF7               	movwf	tblptrh,c
   115   00190C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   116   00190E  6EF8               	movwf	tblptru,c
   117   001910  0009               	tblrd		*+	;fetch initializer
   118   001912  CFF5 F03C          	movff	tablat,__pdataCOMRAM
   119                           
   120                           ; Clear objects allocated to COMRAM (27 bytes)
   121   001916  EE00  F021         	lfsr	0,__pbssCOMRAM
   122   00191A  0E1B               	movlw	27
   123   00191C                     clear_0:
   124   00191C  6AEE               	clrf	postinc0,c
   125   00191E  06E8               	decf	wreg,f,c
   126   001920  E1FD               	bnz	clear_0
   127   001922                     end_of_initialization:
   128                           	callstack 0
   129   001922                     __end_of__initialization:
   130                           	callstack 0
   131   001922  0100               	movlb	0
   132   001924  EF82  F00A         	goto	_main	;jump to C main() function
   133                           
   134                           	psect	bssCOMRAM
   135   000021                     __pbssCOMRAM:
   136                           	callstack 0
   137   000021                     _motorR:
   138                           	callstack 0
   139   000021                     	ds	9
   140   00002A                     _motorL:
   141                           	callstack 0
   142   00002A                     	ds	9
   143   000033                     _calibration:
   144                           	callstack 0
   145   000033                     	ds	9
   146                           
   147                           	psect	dataCOMRAM
   148   00003C                     __pdataCOMRAM:
   149                           	callstack 0
   150   00003C                     _temp:
   151                           	callstack 0
   152   00003C                     	ds	1
   153                           
   154                           	psect	cstackCOMRAM
   155   000001                     __pcstackCOMRAM:
   156                           	callstack 0
   157   000001                     ?___wmul:
   158                           	callstack 0
   159   000001                     ?___awdiv:
   160                           	callstack 0
   161   000001                     adjust_calibration@calibration_label:
   162                           	callstack 0
   163   000001                     switch_calibration@calibration_index:
   164                           	callstack 0
   165   000001                     initDCmotorsPWM@PWMperiod:
   166                           	callstack 0
   167   000001                     delay_ms_function@milliseconds:
   168                           	callstack 0
   169   000001                     ___wmul@multiplier:
   170                           	callstack 0
   171   000001                     ___awdiv@dividend:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0x0
   175   000001                     	ds	1
   176   000002                     ??_adjust_calibration:
   177   000002                     ??_switch_calibration:
   178                           
   179                           ; 1 bytes @ 0x1
   180   000002                     	ds	1
   181   000003                     ??_delay_ms_function:
   182   000003                     ___wmul@multiplicand:
   183                           	callstack 0
   184   000003                     ___awdiv@divisor:
   185                           	callstack 0
   186                           
   187                           ; 2 bytes @ 0x2
   188   000003                     	ds	2
   189   000005                     ___awdiv@counter:
   190                           	callstack 0
   191   000005                     ___wmul@product:
   192                           	callstack 0
   193                           
   194                           ; 2 bytes @ 0x4
   195   000005                     	ds	1
   196   000006                     ___awdiv@sign:
   197                           	callstack 0
   198                           
   199                           ; 1 bytes @ 0x5
   200   000006                     	ds	1
   201   000007                     ?___lwdiv:
   202                           	callstack 0
   203   000007                     ___awdiv@quotient:
   204                           	callstack 0
   205   000007                     ___lwdiv@dividend:
   206                           	callstack 0
   207                           
   208                           ; 2 bytes @ 0x6
   209   000007                     	ds	2
   210   000009                     ___lwdiv@divisor:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x8
   214   000009                     	ds	2
   215   00000B                     ___lwdiv@quotient:
   216                           	callstack 0
   217                           
   218                           ; 2 bytes @ 0xA
   219   00000B                     	ds	2
   220   00000D                     ___lwdiv@counter:
   221                           	callstack 0
   222                           
   223                           ; 1 bytes @ 0xC
   224   00000D                     	ds	1
   225   00000E                     setMotorPWM@m:
   226                           	callstack 0
   227                           
   228                           ; 1 bytes @ 0xD
   229   00000E                     	ds	1
   230   00000F                     ??_setMotorPWM:
   231                           
   232                           ; 1 bytes @ 0xE
   233   00000F                     	ds	2
   234   000011                     setMotorPWM@posDuty:
   235                           	callstack 0
   236                           
   237                           ; 1 bytes @ 0x10
   238   000011                     	ds	1
   239   000012                     setMotorPWM@negDuty:
   240                           	callstack 0
   241                           
   242                           ; 1 bytes @ 0x11
   243   000012                     	ds	1
   244   000013                     forward@mL:
   245                           	callstack 0
   246   000013                     turnLEFT@mL:
   247                           	callstack 0
   248   000013                     turnRIGHT@mL:
   249                           	callstack 0
   250                           
   251                           ; 1 bytes @ 0x12
   252   000013                     	ds	1
   253   000014                     forward@mR:
   254                           	callstack 0
   255   000014                     turnLEFT@mR:
   256                           	callstack 0
   257   000014                     turnRIGHT@mR:
   258                           	callstack 0
   259                           
   260                           ; 1 bytes @ 0x13
   261   000014                     	ds	1
   262   000015                     ??_forward:
   263   000015                     ??_turnLEFT:
   264   000015                     ??_turnRIGHT:
   265                           
   266                           ; 1 bytes @ 0x14
   267   000015                     	ds	3
   268   000018                     forward@Distance_Calibration:
   269                           	callstack 0
   270   000018                     turnLEFT@rotation_calibration:
   271                           	callstack 0
   272   000018                     turnRIGHT@rotation_calibration:
   273                           	callstack 0
   274                           
   275                           ; 1 bytes @ 0x17
   276   000018                     	ds	1
   277   000019                     forward@i:
   278                           	callstack 0
   279   000019                     turnLEFT@i:
   280                           	callstack 0
   281   000019                     turnRIGHT@i:
   282                           	callstack 0
   283                           
   284                           ; 2 bytes @ 0x18
   285   000019                     	ds	2
   286   00001B                     forward@j:
   287                           	callstack 0
   288   00001B                     turnLEFT@j:
   289                           	callstack 0
   290   00001B                     turnRIGHT@j:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x1A
   294   00001B                     	ds	2
   295   00001D                     forward@max_power:
   296                           	callstack 0
   297   00001D                     turnLEFT@max_power:
   298                           	callstack 0
   299   00001D                     turnRIGHT@max_power:
   300                           	callstack 0
   301                           
   302                           ; 2 bytes @ 0x1C
   303   00001D                     	ds	2
   304   00001F                     forward@delay_time:
   305                           	callstack 0
   306   00001F                     turnLEFT@delay_time:
   307                           	callstack 0
   308   00001F                     turnRIGHT@delay_time:
   309                           	callstack 0
   310                           
   311                           ; 2 bytes @ 0x1E
   312   00001F                     	ds	2
   313   000021                     
   314                           ; 1 bytes @ 0x20
   315 ;;
   316 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   317 ;;
   318 ;; *************** function _main *****************
   319 ;; Defined at:
   320 ;;		line 16 in file "main.c"
   321 ;; Parameters:    Size  Location     Type
   322 ;;		None
   323 ;; Auto vars:     Size  Location     Type
   324 ;;  PWMperiod       2    0        unsigned int 
   325 ;; Return value:  Size  Location     Type
   326 ;;                  1    wreg      void 
   327 ;; Registers used:
   328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : 0/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   338 ;;Total ram usage:        0 bytes
   339 ;; Hardware stack levels required when called: 3
   340 ;; This function calls:
   341 ;;		_adjust_calibration
   342 ;;		_forward
   343 ;;		_initDCmotorsPWM
   344 ;;		_switch_calibration
   345 ;;		_turnLEFT
   346 ;;		_turnRIGHT
   347 ;; This function is called by:
   348 ;;		Startup code after reset
   349 ;; This function uses a non-reentrant model
   350 ;;
   351                           
   352                           	psect	text0
   353   001504                     __ptext0:
   354                           	callstack 0
   355   001504                     _main:
   356                           	callstack 28
   357   001504                     
   358                           ;main.c: 18:     initDCmotorsPWM(PWMperiod);
   359   001504  0E00               	movlw	0
   360   001506  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   361   001508  0E63               	movlw	99
   362   00150A  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   363   00150C  ECD4  F00B         	call	_initDCmotorsPWM	;wreg free
   364   001510                     
   365                           ;main.c: 22:     motorL.power=0;
   366   001510  0E00               	movlw	0
   367   001512  6E2A               	movwf	_motorL^0,c
   368   001514                     
   369                           ;main.c: 23:     motorL.direction=1;
   370   001514  0E01               	movlw	1
   371   001516  6E2B               	movwf	(_motorL+1)^0,c
   372   001518                     
   373                           ;main.c: 24:     motorL.brakemode=1;
   374   001518  0E01               	movlw	1
   375   00151A  6E2C               	movwf	(_motorL+2)^0,c
   376   00151C                     
   377                           ;main.c: 25:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   378   00151C  0EAA               	movlw	170
   379   00151E  6E2F               	movwf	(_motorL+5)^0,c
   380   001520  0E0F               	movlw	15
   381   001522  6E30               	movwf	(_motorL+6)^0,c
   382   001524                     
   383                           ;main.c: 26:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   384   001524  0EA6               	movlw	166
   385   001526  6E31               	movwf	(_motorL+7)^0,c
   386   001528  0E0F               	movlw	15
   387   00152A  6E32               	movwf	(_motorL+8)^0,c
   388   00152C                     
   389                           ;main.c: 27:     motorL.PWMperiod=PWMperiod;
   390   00152C  0E00               	movlw	0
   391   00152E  6E2E               	movwf	(_motorL+4)^0,c
   392   001530  0E63               	movlw	99
   393   001532  6E2D               	movwf	(_motorL+3)^0,c
   394   001534                     
   395                           ;main.c: 29:     motorR.power=0;
   396   001534  0E00               	movlw	0
   397   001536  6E21               	movwf	_motorR^0,c
   398   001538                     
   399                           ;main.c: 30:     motorR.direction=1;
   400   001538  0E01               	movlw	1
   401   00153A  6E22               	movwf	(_motorR+1)^0,c
   402   00153C                     
   403                           ;main.c: 31:     motorR.brakemode=1;
   404   00153C  0E01               	movlw	1
   405   00153E  6E23               	movwf	(_motorR+2)^0,c
   406   001540                     
   407                           ;main.c: 32:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   408   001540  0E25               	movlw	37
   409   001542  6E26               	movwf	(_motorR+5)^0,c
   410   001544  0E0F               	movlw	15
   411   001546  6E27               	movwf	(_motorR+6)^0,c
   412   001548                     
   413                           ;main.c: 33:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   414   001548  0E21               	movlw	33
   415   00154A  6E28               	movwf	(_motorR+7)^0,c
   416   00154C  0E0F               	movlw	15
   417   00154E  6E29               	movwf	(_motorR+8)^0,c
   418   001550                     
   419                           ;main.c: 34:     motorR.PWMperiod=PWMperiod;
   420   001550  0E00               	movlw	0
   421   001552  6E25               	movwf	(_motorR+4)^0,c
   422   001554  0E63               	movlw	99
   423   001556  6E24               	movwf	(_motorR+3)^0,c
   424   001558                     
   425                           ;main.c: 40:     TRISDbits.TRISD7 = 0;
   426   001558  9E84               	bcf	132,7,c	;volatile
   427   00155A                     
   428                           ;main.c: 41:     LATDbits.LATD7 = 0;
   429   00155A  9E7C               	bcf	124,7,c	;volatile
   430   00155C                     
   431                           ;main.c: 44:     TRISHbits.TRISH3 = 0;
   432   00155C  9688               	bcf	136,3,c	;volatile
   433   00155E                     
   434                           ;main.c: 45:     LATHbits.LATH3 = 0;
   435   00155E  9680               	bcf	128,3,c	;volatile
   436   001560                     
   437                           ;main.c: 48:     TRISFbits.TRISF2=1;
   438   001560  8486               	bsf	134,2,c	;volatile
   439   001562                     
   440                           ;main.c: 49:     ANSELFbits.ANSELF2=0;
   441   001562  010E               	movlb	14	; () banked
   442   001564  95B4               	bcf	180,2,b	;volatile
   443   001566                     
   444                           ; BSR set to: 14
   445                           ;main.c: 52:     TRISFbits.TRISF3=1;
   446   001566  8686               	bsf	134,3,c	;volatile
   447   001568                     
   448                           ; BSR set to: 14
   449                           ;main.c: 53:     ANSELFbits.ANSELF3=0;
   450   001568  97B4               	bcf	180,3,b	;volatile
   451   00156A                     
   452                           ; BSR set to: 14
   453                           ;main.c: 57:     calibration.index = 1;
   454   00156A  0E01               	movlw	1
   455   00156C  6E33               	movwf	_calibration^0,c
   456   00156E                     
   457                           ; BSR set to: 14
   458                           ;main.c: 58:     calibration.over = 0;
   459   00156E  0E00               	movlw	0
   460   001570  6E34               	movwf	(_calibration+1)^0,c
   461   001572                     
   462                           ; BSR set to: 14
   463                           ;main.c: 64:     calibration.left_90 = 60;
   464   001572  0E3C               	movlw	60
   465   001574  6E35               	movwf	(_calibration+2)^0,c
   466   001576                     
   467                           ; BSR set to: 14
   468                           ;main.c: 65:     calibration.right_90 = 10;
   469   001576  0E0A               	movlw	10
   470   001578  6E36               	movwf	(_calibration+3)^0,c
   471   00157A                     
   472                           ; BSR set to: 14
   473                           ;main.c: 66:     calibration.left_135 = 60;
   474   00157A  0E3C               	movlw	60
   475   00157C  6E37               	movwf	(_calibration+4)^0,c
   476   00157E                     
   477                           ; BSR set to: 14
   478                           ;main.c: 67:     calibration.right_135 = 10;
   479   00157E  0E0A               	movlw	10
   480   001580  6E38               	movwf	(_calibration+5)^0,c
   481   001582                     
   482                           ; BSR set to: 14
   483                           ;main.c: 68:     calibration.forward = 10;
   484   001582  0E0A               	movlw	10
   485   001584  6E39               	movwf	(_calibration+6)^0,c
   486   001586                     
   487                           ; BSR set to: 14
   488                           ;main.c: 69:     calibration.forward_motorL = 20;
   489   001586  0E14               	movlw	20
   490   001588  6E3A               	movwf	(_calibration+7)^0,c
   491   00158A                     
   492                           ; BSR set to: 14
   493                           ;main.c: 70:     calibration.forward_motorR = 20;
   494   00158A  0E14               	movlw	20
   495   00158C  6E3B               	movwf	(_calibration+8)^0,c
   496   00158E                     l1744:
   497                           
   498                           ;main.c: 81:         if(calibration.index == 1){
   499   00158E  0433               	decf	_calibration^0,w,c
   500   001590  A4D8               	btfss	status,2,c
   501   001592  EFCD  F00A         	goto	u891
   502   001596  EFCF  F00A         	goto	u890
   503   00159A                     u891:
   504   00159A  EFDE  F00A         	goto	l1752
   505   00159E                     u890:
   506   00159E                     
   507                           ;main.c: 82:             adjust_calibration(&calibration.right_90);
   508   00159E  0E36               	movlw	low (_calibration+3)
   509   0015A0  6E01               	movwf	adjust_calibration@calibration_label^0,c
   510   0015A2  ECDB  F009         	call	_adjust_calibration	;wreg free
   511   0015A6                     
   512                           ;main.c: 83:             turnRIGHT(calibration.right_90, &motorL, &motorR);
   513   0015A6  0E2A               	movlw	low _motorL
   514   0015A8  6E13               	movwf	turnRIGHT@mL^0,c
   515   0015AA  0E21               	movlw	low _motorR
   516   0015AC  6E14               	movwf	turnRIGHT@mR^0,c
   517   0015AE  5036               	movf	(_calibration+3)^0,w,c
   518   0015B0  EC01  F007         	call	_turnRIGHT
   519   0015B4                     
   520                           ;main.c: 84:             switch_calibration(&calibration.index);
   521   0015B4  0E33               	movlw	low _calibration
   522   0015B6  6E01               	movwf	switch_calibration@calibration_index^0,c
   523   0015B8  EC7D  F00B         	call	_switch_calibration	;wreg free
   524   0015BC                     l1752:
   525                           
   526                           ;main.c: 88:         if(calibration.index == 2){
   527   0015BC  0E02               	movlw	2
   528   0015BE  1833               	xorwf	_calibration^0,w,c
   529   0015C0  A4D8               	btfss	status,2,c
   530   0015C2  EFE5  F00A         	goto	u901
   531   0015C6  EFE7  F00A         	goto	u900
   532   0015CA                     u901:
   533   0015CA  EFF6  F00A         	goto	l1760
   534   0015CE                     u900:
   535   0015CE                     
   536                           ;main.c: 89:             adjust_calibration(&calibration.left_90);
   537   0015CE  0E35               	movlw	low (_calibration+2)
   538   0015D0  6E01               	movwf	adjust_calibration@calibration_label^0,c
   539   0015D2  ECDB  F009         	call	_adjust_calibration	;wreg free
   540   0015D6                     
   541                           ;main.c: 90:             turnLEFT(calibration.left_90, &motorL, &motorR);
   542   0015D6  0E2A               	movlw	low _motorL
   543   0015D8  6E13               	movwf	turnLEFT@mL^0,c
   544   0015DA  0E21               	movlw	low _motorR
   545   0015DC  6E14               	movwf	turnLEFT@mR^0,c
   546   0015DE  5035               	movf	(_calibration+2)^0,w,c
   547   0015E0  ECC0  F007         	call	_turnLEFT
   548   0015E4                     
   549                           ;main.c: 91:             switch_calibration(&calibration.index);
   550   0015E4  0E33               	movlw	low _calibration
   551   0015E6  6E01               	movwf	switch_calibration@calibration_index^0,c
   552   0015E8  EC7D  F00B         	call	_switch_calibration	;wreg free
   553   0015EC                     l1760:
   554                           
   555                           ;main.c: 95:         if(calibration.index == 3){
   556   0015EC  0E03               	movlw	3
   557   0015EE  1833               	xorwf	_calibration^0,w,c
   558   0015F0  A4D8               	btfss	status,2,c
   559   0015F2  EFFD  F00A         	goto	u911
   560   0015F6  EFFF  F00A         	goto	u910
   561   0015FA                     u911:
   562   0015FA  EF0E  F00B         	goto	l1768
   563   0015FE                     u910:
   564   0015FE                     
   565                           ;main.c: 96:             adjust_calibration(&calibration.forward);
   566   0015FE  0E39               	movlw	low (_calibration+6)
   567   001600  6E01               	movwf	adjust_calibration@calibration_label^0,c
   568   001602  ECDB  F009         	call	_adjust_calibration	;wreg free
   569   001606                     
   570                           ;main.c: 97:             forward(calibration.forward, &motorL, &motorR);
   571   001606  0E2A               	movlw	low _motorL
   572   001608  6E13               	movwf	forward@mL^0,c
   573   00160A  0E21               	movlw	low _motorR
   574   00160C  6E14               	movwf	forward@mR^0,c
   575   00160E  5039               	movf	(_calibration+6)^0,w,c
   576   001610  EC7F  F008         	call	_forward
   577   001614                     
   578                           ;main.c: 98:             switch_calibration(&calibration.index);
   579   001614  0E33               	movlw	low _calibration
   580   001616  6E01               	movwf	switch_calibration@calibration_index^0,c
   581   001618  EC7D  F00B         	call	_switch_calibration	;wreg free
   582   00161C                     l1768:
   583                           
   584                           ;main.c: 118:         if(calibration.index == 5){
   585   00161C  0E05               	movlw	5
   586   00161E  1833               	xorwf	_calibration^0,w,c
   587   001620  A4D8               	btfss	status,2,c
   588   001622  EF15  F00B         	goto	u921
   589   001626  EF17  F00B         	goto	u920
   590   00162A                     u921:
   591   00162A  EFC7  F00A         	goto	l1744
   592   00162E                     u920:
   593   00162E                     
   594                           ;main.c: 119:             calibration.index = 1;
   595   00162E  0E01               	movlw	1
   596   001630  6E33               	movwf	_calibration^0,c
   597   001632  EF00  F000         	goto	start
   598   001636                     __end_of_main:
   599                           	callstack 0
   600                           
   601 ;; *************** function _turnRIGHT *****************
   602 ;; Defined at:
   603 ;;		line 203 in file "dc_motor_v1.c"
   604 ;; Parameters:    Size  Location     Type
   605 ;;  rotation_cal    1    wreg     unsigned char 
   606 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   607 ;;		 -> motorL(9), 
   608 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   609 ;;		 -> motorR(9), 
   610 ;; Auto vars:     Size  Location     Type
   611 ;;  rotation_cal    1   23[COMRAM] unsigned char 
   612 ;;  j               2   26[COMRAM] int 
   613 ;;  i               2   24[COMRAM] int 
   614 ;;  delay_time      2   30[COMRAM] int 
   615 ;;  max_power       2   28[COMRAM] int 
   616 ;;  acceleration    2    0        int 
   617 ;; Return value:  Size  Location     Type
   618 ;;                  1    wreg      void 
   619 ;; Registers used:
   620 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   621 ;; Tracked objects:
   622 ;;		On entry : 0/0
   623 ;;		On exit  : 0/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   626 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   627 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   628 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   629 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   630 ;;Total ram usage:       14 bytes
   631 ;; Hardware stack levels used: 1
   632 ;; Hardware stack levels required when called: 2
   633 ;; This function calls:
   634 ;;		___awdiv
   635 ;;		_delay_ms_function
   636 ;;		_setMotorPWM
   637 ;; This function is called by:
   638 ;;		_main
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           	psect	text1
   643   000E02                     __ptext1:
   644                           	callstack 0
   645   000E02                     _turnRIGHT:
   646                           	callstack 28
   647                           
   648                           ;incstack = 0
   649                           ;turnRIGHT@rotation_calibration stored from wreg
   650   000E02  6E18               	movwf	turnRIGHT@rotation_calibration^0,c
   651   000E04                     
   652                           ;dc_motor_v1.c: 204:     mL->direction = 1;
   653   000E04  5013               	movf	turnRIGHT@mL^0,w,c
   654   000E06  6ED9               	movwf	fsr2l,c
   655   000E08  6ADA               	clrf	fsr2h,c
   656   000E0A  0E01               	movlw	1
   657   000E0C  26D9               	addwf	fsr2l,f,c
   658   000E0E  0E01               	movlw	1
   659   000E10  6EDF               	movwf	indf2,c
   660                           
   661                           ;dc_motor_v1.c: 205:     mR->direction = 0;
   662   000E12  5014               	movf	turnRIGHT@mR^0,w,c
   663   000E14  6ED9               	movwf	fsr2l,c
   664   000E16  6ADA               	clrf	fsr2h,c
   665   000E18  0E01               	movlw	1
   666   000E1A  26D9               	addwf	fsr2l,f,c
   667   000E1C  6ADF               	clrf	indf2,c
   668   000E1E                     
   669                           ;dc_motor_v1.c: 207:    int max_power = 20;
   670   000E1E  0E00               	movlw	0
   671   000E20  6E1E               	movwf	(turnRIGHT@max_power+1)^0,c
   672   000E22  0E14               	movlw	20
   673   000E24  6E1D               	movwf	turnRIGHT@max_power^0,c
   674   000E26                     
   675                           ;dc_motor_v1.c: 209:     int delay_time = acceleration_time/max_power;
   676   000E26  0E00               	movlw	0
   677   000E28  6E02               	movwf	(___awdiv@dividend+1)^0,c
   678   000E2A  0E64               	movlw	100
   679   000E2C  6E01               	movwf	___awdiv@dividend^0,c
   680   000E2E  0E00               	movlw	0
   681   000E30  6E04               	movwf	(___awdiv@divisor+1)^0,c
   682   000E32  0E14               	movlw	20
   683   000E34  6E03               	movwf	___awdiv@divisor^0,c
   684   000E36  EC1B  F00B         	call	___awdiv	;wreg free
   685   000E3A  C001  F01F         	movff	?___awdiv,turnRIGHT@delay_time
   686   000E3E  C002  F020         	movff	?___awdiv+1,turnRIGHT@delay_time+1
   687   000E42                     
   688                           ;dc_motor_v1.c: 212:     for(int i=0; i< max_power; i++){
   689   000E42  0E00               	movlw	0
   690   000E44  6E1A               	movwf	(turnRIGHT@i+1)^0,c
   691   000E46  0E00               	movlw	0
   692   000E48  6E19               	movwf	turnRIGHT@i^0,c
   693   000E4A  EF4B  F007         	goto	l1636
   694   000E4E                     l1626:
   695                           
   696                           ;dc_motor_v1.c: 213:         mL->power = mL->power + 1;
   697   000E4E  5013               	movf	turnRIGHT@mL^0,w,c
   698   000E50  6ED9               	movwf	fsr2l,c
   699   000E52  6ADA               	clrf	fsr2h,c
   700   000E54  5013               	movf	turnRIGHT@mL^0,w,c
   701   000E56  6EE1               	movwf	fsr1l,c
   702   000E58  6AE2               	clrf	fsr1h,c
   703   000E5A  50E7               	movf	indf1,w,c
   704   000E5C  6E15               	movwf	??_turnRIGHT^0,c
   705   000E5E  2815               	incf	??_turnRIGHT^0,w,c
   706   000E60  6EDF               	movwf	indf2,c
   707                           
   708                           ;dc_motor_v1.c: 214:         mR->power = mR->power + 1 ;
   709   000E62  5014               	movf	turnRIGHT@mR^0,w,c
   710   000E64  6ED9               	movwf	fsr2l,c
   711   000E66  6ADA               	clrf	fsr2h,c
   712   000E68  5014               	movf	turnRIGHT@mR^0,w,c
   713   000E6A  6EE1               	movwf	fsr1l,c
   714   000E6C  6AE2               	clrf	fsr1h,c
   715   000E6E  50E7               	movf	indf1,w,c
   716   000E70  6E15               	movwf	??_turnRIGHT^0,c
   717   000E72  2815               	incf	??_turnRIGHT^0,w,c
   718   000E74  6EDF               	movwf	indf2,c
   719   000E76                     
   720                           ;dc_motor_v1.c: 215:         setMotorPWM(mR);
   721   000E76  C014  F00E         	movff	turnRIGHT@mR,setMotorPWM@m
   722   000E7A  EC31  F009         	call	_setMotorPWM	;wreg free
   723   000E7E                     
   724                           ;dc_motor_v1.c: 216:         setMotorPWM(mL);
   725   000E7E  C013  F00E         	movff	turnRIGHT@mL,setMotorPWM@m
   726   000E82  EC31  F009         	call	_setMotorPWM	;wreg free
   727   000E86                     
   728                           ;dc_motor_v1.c: 217:         delay_ms_function(delay_time);
   729   000E86  C01F  F001         	movff	turnRIGHT@delay_time,delay_ms_function@milliseconds
   730   000E8A  C020  F002         	movff	turnRIGHT@delay_time+1,delay_ms_function@milliseconds+1
   731   000E8E  EC58  F00C         	call	_delay_ms_function	;wreg free
   732   000E92                     
   733                           ;dc_motor_v1.c: 218:     }
   734   000E92  4A19               	infsnz	turnRIGHT@i^0,f,c
   735   000E94  2A1A               	incf	(turnRIGHT@i+1)^0,f,c
   736   000E96                     l1636:
   737   000E96  501D               	movf	turnRIGHT@max_power^0,w,c
   738   000E98  5C19               	subwf	turnRIGHT@i^0,w,c
   739   000E9A  501A               	movf	(turnRIGHT@i+1)^0,w,c
   740   000E9C  0A80               	xorlw	128
   741   000E9E  6E15               	movwf	??_turnRIGHT^0,c
   742   000EA0  501E               	movf	(turnRIGHT@max_power+1)^0,w,c
   743   000EA2  0A80               	xorlw	128
   744   000EA4  5815               	subwfb	??_turnRIGHT^0,w,c
   745   000EA6  A0D8               	btfss	status,0,c
   746   000EA8  EF58  F007         	goto	u791
   747   000EAC  EF5A  F007         	goto	u790
   748   000EB0                     u791:
   749   000EB0  EF27  F007         	goto	l1626
   750   000EB4                     u790:
   751   000EB4                     
   752                           ;dc_motor_v1.c: 221:     for(int j=0; j<rotation_calibration; j++){
   753   000EB4  0E00               	movlw	0
   754   000EB6  6E1C               	movwf	(turnRIGHT@j+1)^0,c
   755   000EB8  0E00               	movlw	0
   756   000EBA  6E1B               	movwf	turnRIGHT@j^0,c
   757   000EBC  EF69  F007         	goto	l178
   758   000EC0                     l1640:
   759                           
   760                           ;dc_motor_v1.c: 222:         _delay((unsigned long)((10)*(64000000/4000.0)));
   761   000EC0  0ED0               	movlw	208
   762   000EC2  6E15               	movwf	??_turnRIGHT^0,c
   763   000EC4  0ECA               	movlw	202
   764   000EC6                     u937:
   765   000EC6  2EE8               	decfsz	wreg,f,c
   766   000EC8  D7FE               	bra	u937
   767   000ECA  2E15               	decfsz	??_turnRIGHT^0,f,c
   768   000ECC  D7FC               	bra	u937
   769   000ECE                     
   770                           ;dc_motor_v1.c: 223:     }
   771   000ECE  4A1B               	infsnz	turnRIGHT@j^0,f,c
   772   000ED0  2A1C               	incf	(turnRIGHT@j+1)^0,f,c
   773   000ED2                     l178:
   774   000ED2  5018               	movf	turnRIGHT@rotation_calibration^0,w,c
   775   000ED4  6E15               	movwf	??_turnRIGHT^0,c
   776   000ED6  6A16               	clrf	(??_turnRIGHT+1)^0,c
   777   000ED8  5015               	movf	??_turnRIGHT^0,w,c
   778   000EDA  5C1B               	subwf	turnRIGHT@j^0,w,c
   779   000EDC  501C               	movf	(turnRIGHT@j+1)^0,w,c
   780   000EDE  0A80               	xorlw	128
   781   000EE0  6E17               	movwf	(??_turnRIGHT+2)^0,c
   782   000EE2  5016               	movf	(??_turnRIGHT+1)^0,w,c
   783   000EE4  0A80               	xorlw	128
   784   000EE6  5817               	subwfb	(??_turnRIGHT+2)^0,w,c
   785   000EE8  A0D8               	btfss	status,0,c
   786   000EEA  EF79  F007         	goto	u801
   787   000EEE  EF7B  F007         	goto	u800
   788   000EF2                     u801:
   789   000EF2  EF60  F007         	goto	l1640
   790   000EF6                     u800:
   791   000EF6  EFA9  F007         	goto	l1658
   792   000EFA                     l1644:
   793                           
   794                           ;dc_motor_v1.c: 227:         if(mR->power> 0 ){
   795   000EFA  5014               	movf	turnRIGHT@mR^0,w,c
   796   000EFC  6ED9               	movwf	fsr2l,c
   797   000EFE  6ADA               	clrf	fsr2h,c
   798   000F00  50DF               	movf	indf2,w,c
   799   000F02  B4D8               	btfsc	status,2,c
   800   000F04  EF86  F007         	goto	u811
   801   000F08  EF88  F007         	goto	u810
   802   000F0C                     u811:
   803   000F0C  EF8C  F007         	goto	l1648
   804   000F10                     u810:
   805   000F10                     
   806                           ;dc_motor_v1.c: 228:             mR->power--;
   807   000F10  5014               	movf	turnRIGHT@mR^0,w,c
   808   000F12  6ED9               	movwf	fsr2l,c
   809   000F14  6ADA               	clrf	fsr2h,c
   810   000F16  06DF               	decf	indf2,f,c
   811   000F18                     l1648:
   812                           
   813                           ;dc_motor_v1.c: 230:         if(mL->power> 0 ){
   814   000F18  5013               	movf	turnRIGHT@mL^0,w,c
   815   000F1A  6ED9               	movwf	fsr2l,c
   816   000F1C  6ADA               	clrf	fsr2h,c
   817   000F1E  50DF               	movf	indf2,w,c
   818   000F20  B4D8               	btfsc	status,2,c
   819   000F22  EF95  F007         	goto	u821
   820   000F26  EF97  F007         	goto	u820
   821   000F2A                     u821:
   822   000F2A  EF9B  F007         	goto	l1652
   823   000F2E                     u820:
   824   000F2E                     
   825                           ;dc_motor_v1.c: 231:             mL->power--;
   826   000F2E  5013               	movf	turnRIGHT@mL^0,w,c
   827   000F30  6ED9               	movwf	fsr2l,c
   828   000F32  6ADA               	clrf	fsr2h,c
   829   000F34  06DF               	decf	indf2,f,c
   830   000F36                     l1652:
   831                           
   832                           ;dc_motor_v1.c: 233:         setMotorPWM(mR);
   833   000F36  C014  F00E         	movff	turnRIGHT@mR,setMotorPWM@m
   834   000F3A  EC31  F009         	call	_setMotorPWM	;wreg free
   835   000F3E                     
   836                           ;dc_motor_v1.c: 234:         setMotorPWM(mL);
   837   000F3E  C013  F00E         	movff	turnRIGHT@mL,setMotorPWM@m
   838   000F42  EC31  F009         	call	_setMotorPWM	;wreg free
   839   000F46                     
   840                           ;dc_motor_v1.c: 235:         delay_ms_function(delay_time);
   841   000F46  C01F  F001         	movff	turnRIGHT@delay_time,delay_ms_function@milliseconds
   842   000F4A  C020  F002         	movff	turnRIGHT@delay_time+1,delay_ms_function@milliseconds+1
   843   000F4E  EC58  F00C         	call	_delay_ms_function	;wreg free
   844   000F52                     l1658:
   845                           
   846                           ;dc_motor_v1.c: 226:     while(mL->power || mR->power > 0){
   847   000F52  5013               	movf	turnRIGHT@mL^0,w,c
   848   000F54  6ED9               	movwf	fsr2l,c
   849   000F56  6ADA               	clrf	fsr2h,c
   850   000F58  50DF               	movf	indf2,w,c
   851   000F5A  A4D8               	btfss	status,2,c
   852   000F5C  EFB2  F007         	goto	u831
   853   000F60  EFB4  F007         	goto	u830
   854   000F64                     u831:
   855   000F64  EF7D  F007         	goto	l1644
   856   000F68                     u830:
   857   000F68  5014               	movf	turnRIGHT@mR^0,w,c
   858   000F6A  6ED9               	movwf	fsr2l,c
   859   000F6C  6ADA               	clrf	fsr2h,c
   860   000F6E  50DF               	movf	indf2,w,c
   861   000F70  A4D8               	btfss	status,2,c
   862   000F72  EFBD  F007         	goto	u841
   863   000F76  EFBF  F007         	goto	u840
   864   000F7A                     u841:
   865   000F7A  EF7D  F007         	goto	l1644
   866   000F7E                     u840:
   867   000F7E  0012               	return		;funcret
   868   000F80                     __end_of_turnRIGHT:
   869                           	callstack 0
   870                           
   871 ;; *************** function _turnLEFT *****************
   872 ;; Defined at:
   873 ;;		line 165 in file "dc_motor_v1.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;  rotation_cal    1    wreg     unsigned char 
   876 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   877 ;;		 -> motorL(9), 
   878 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   879 ;;		 -> motorR(9), 
   880 ;; Auto vars:     Size  Location     Type
   881 ;;  rotation_cal    1   23[COMRAM] unsigned char 
   882 ;;  j               2   26[COMRAM] int 
   883 ;;  i               2   24[COMRAM] int 
   884 ;;  delay_time      2   30[COMRAM] int 
   885 ;;  max_power       2   28[COMRAM] int 
   886 ;;  acceleration    2    0        int 
   887 ;; Return value:  Size  Location     Type
   888 ;;                  1    wreg      void 
   889 ;; Registers used:
   890 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   896 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   897 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   898 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   899 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   900 ;;Total ram usage:       14 bytes
   901 ;; Hardware stack levels used: 1
   902 ;; Hardware stack levels required when called: 2
   903 ;; This function calls:
   904 ;;		___awdiv
   905 ;;		_delay_ms_function
   906 ;;		_setMotorPWM
   907 ;; This function is called by:
   908 ;;		_main
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912                           	psect	text2
   913   000F80                     __ptext2:
   914                           	callstack 0
   915   000F80                     _turnLEFT:
   916                           	callstack 28
   917                           
   918                           ;incstack = 0
   919                           ;turnLEFT@rotation_calibration stored from wreg
   920   000F80  6E18               	movwf	turnLEFT@rotation_calibration^0,c
   921   000F82                     
   922                           ;dc_motor_v1.c: 166:     mL->direction = 0;
   923   000F82  5013               	movf	turnLEFT@mL^0,w,c
   924   000F84  6ED9               	movwf	fsr2l,c
   925   000F86  6ADA               	clrf	fsr2h,c
   926   000F88  0E01               	movlw	1
   927   000F8A  26D9               	addwf	fsr2l,f,c
   928   000F8C  6ADF               	clrf	indf2,c
   929                           
   930                           ;dc_motor_v1.c: 167:     mR->direction = 1;
   931   000F8E  5014               	movf	turnLEFT@mR^0,w,c
   932   000F90  6ED9               	movwf	fsr2l,c
   933   000F92  6ADA               	clrf	fsr2h,c
   934   000F94  0E01               	movlw	1
   935   000F96  26D9               	addwf	fsr2l,f,c
   936   000F98  0E01               	movlw	1
   937   000F9A  6EDF               	movwf	indf2,c
   938   000F9C                     
   939                           ;dc_motor_v1.c: 169:     int max_power = 20;
   940   000F9C  0E00               	movlw	0
   941   000F9E  6E1E               	movwf	(turnLEFT@max_power+1)^0,c
   942   000FA0  0E14               	movlw	20
   943   000FA2  6E1D               	movwf	turnLEFT@max_power^0,c
   944   000FA4                     
   945                           ;dc_motor_v1.c: 171:     int delay_time = acceleration_time/max_power;
   946   000FA4  0E00               	movlw	0
   947   000FA6  6E02               	movwf	(___awdiv@dividend+1)^0,c
   948   000FA8  0E64               	movlw	100
   949   000FAA  6E01               	movwf	___awdiv@dividend^0,c
   950   000FAC  0E00               	movlw	0
   951   000FAE  6E04               	movwf	(___awdiv@divisor+1)^0,c
   952   000FB0  0E14               	movlw	20
   953   000FB2  6E03               	movwf	___awdiv@divisor^0,c
   954   000FB4  EC1B  F00B         	call	___awdiv	;wreg free
   955   000FB8  C001  F01F         	movff	?___awdiv,turnLEFT@delay_time
   956   000FBC  C002  F020         	movff	?___awdiv+1,turnLEFT@delay_time+1
   957   000FC0                     
   958                           ;dc_motor_v1.c: 174:     for(int i=0; i< max_power; i++){
   959   000FC0  0E00               	movlw	0
   960   000FC2  6E1A               	movwf	(turnLEFT@i+1)^0,c
   961   000FC4  0E00               	movlw	0
   962   000FC6  6E19               	movwf	turnLEFT@i^0,c
   963   000FC8  EF0A  F008         	goto	l1590
   964   000FCC                     l1580:
   965                           
   966                           ;dc_motor_v1.c: 175:         mL->power = mL->power + 1;
   967   000FCC  5013               	movf	turnLEFT@mL^0,w,c
   968   000FCE  6ED9               	movwf	fsr2l,c
   969   000FD0  6ADA               	clrf	fsr2h,c
   970   000FD2  5013               	movf	turnLEFT@mL^0,w,c
   971   000FD4  6EE1               	movwf	fsr1l,c
   972   000FD6  6AE2               	clrf	fsr1h,c
   973   000FD8  50E7               	movf	indf1,w,c
   974   000FDA  6E15               	movwf	??_turnLEFT^0,c
   975   000FDC  2815               	incf	??_turnLEFT^0,w,c
   976   000FDE  6EDF               	movwf	indf2,c
   977                           
   978                           ;dc_motor_v1.c: 176:         mR->power = mR->power + 1 ;
   979   000FE0  5014               	movf	turnLEFT@mR^0,w,c
   980   000FE2  6ED9               	movwf	fsr2l,c
   981   000FE4  6ADA               	clrf	fsr2h,c
   982   000FE6  5014               	movf	turnLEFT@mR^0,w,c
   983   000FE8  6EE1               	movwf	fsr1l,c
   984   000FEA  6AE2               	clrf	fsr1h,c
   985   000FEC  50E7               	movf	indf1,w,c
   986   000FEE  6E15               	movwf	??_turnLEFT^0,c
   987   000FF0  2815               	incf	??_turnLEFT^0,w,c
   988   000FF2  6EDF               	movwf	indf2,c
   989   000FF4                     
   990                           ;dc_motor_v1.c: 177:         setMotorPWM(mR);
   991   000FF4  C014  F00E         	movff	turnLEFT@mR,setMotorPWM@m
   992   000FF8  EC31  F009         	call	_setMotorPWM	;wreg free
   993   000FFC                     
   994                           ;dc_motor_v1.c: 178:         setMotorPWM(mL);
   995   000FFC  C013  F00E         	movff	turnLEFT@mL,setMotorPWM@m
   996   001000  EC31  F009         	call	_setMotorPWM	;wreg free
   997   001004                     
   998                           ;dc_motor_v1.c: 179:         delay_ms_function(delay_time);
   999   001004  C01F  F001         	movff	turnLEFT@delay_time,delay_ms_function@milliseconds
  1000   001008  C020  F002         	movff	turnLEFT@delay_time+1,delay_ms_function@milliseconds+1
  1001   00100C  EC58  F00C         	call	_delay_ms_function	;wreg free
  1002   001010                     
  1003                           ;dc_motor_v1.c: 180:     }
  1004   001010  4A19               	infsnz	turnLEFT@i^0,f,c
  1005   001012  2A1A               	incf	(turnLEFT@i+1)^0,f,c
  1006   001014                     l1590:
  1007   001014  501D               	movf	turnLEFT@max_power^0,w,c
  1008   001016  5C19               	subwf	turnLEFT@i^0,w,c
  1009   001018  501A               	movf	(turnLEFT@i+1)^0,w,c
  1010   00101A  0A80               	xorlw	128
  1011   00101C  6E15               	movwf	??_turnLEFT^0,c
  1012   00101E  501E               	movf	(turnLEFT@max_power+1)^0,w,c
  1013   001020  0A80               	xorlw	128
  1014   001022  5815               	subwfb	??_turnLEFT^0,w,c
  1015   001024  A0D8               	btfss	status,0,c
  1016   001026  EF17  F008         	goto	u731
  1017   00102A  EF19  F008         	goto	u730
  1018   00102E                     u731:
  1019   00102E  EFE6  F007         	goto	l1580
  1020   001032                     u730:
  1021   001032                     
  1022                           ;dc_motor_v1.c: 183:     for(int j=0; j<rotation_calibration; j++){
  1023   001032  0E00               	movlw	0
  1024   001034  6E1C               	movwf	(turnLEFT@j+1)^0,c
  1025   001036  0E00               	movlw	0
  1026   001038  6E1B               	movwf	turnLEFT@j^0,c
  1027   00103A  EF28  F008         	goto	l164
  1028   00103E                     l1594:
  1029                           
  1030                           ;dc_motor_v1.c: 184:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1031   00103E  0ED0               	movlw	208
  1032   001040  6E15               	movwf	??_turnLEFT^0,c
  1033   001042  0ECA               	movlw	202
  1034   001044                     u947:
  1035   001044  2EE8               	decfsz	wreg,f,c
  1036   001046  D7FE               	bra	u947
  1037   001048  2E15               	decfsz	??_turnLEFT^0,f,c
  1038   00104A  D7FC               	bra	u947
  1039   00104C                     
  1040                           ;dc_motor_v1.c: 185:     }
  1041   00104C  4A1B               	infsnz	turnLEFT@j^0,f,c
  1042   00104E  2A1C               	incf	(turnLEFT@j+1)^0,f,c
  1043   001050                     l164:
  1044   001050  5018               	movf	turnLEFT@rotation_calibration^0,w,c
  1045   001052  6E15               	movwf	??_turnLEFT^0,c
  1046   001054  6A16               	clrf	(??_turnLEFT+1)^0,c
  1047   001056  5015               	movf	??_turnLEFT^0,w,c
  1048   001058  5C1B               	subwf	turnLEFT@j^0,w,c
  1049   00105A  501C               	movf	(turnLEFT@j+1)^0,w,c
  1050   00105C  0A80               	xorlw	128
  1051   00105E  6E17               	movwf	(??_turnLEFT+2)^0,c
  1052   001060  5016               	movf	(??_turnLEFT+1)^0,w,c
  1053   001062  0A80               	xorlw	128
  1054   001064  5817               	subwfb	(??_turnLEFT+2)^0,w,c
  1055   001066  A0D8               	btfss	status,0,c
  1056   001068  EF38  F008         	goto	u741
  1057   00106C  EF3A  F008         	goto	u740
  1058   001070                     u741:
  1059   001070  EF1F  F008         	goto	l1594
  1060   001074                     u740:
  1061   001074  EF68  F008         	goto	l1612
  1062   001078                     l1598:
  1063                           
  1064                           ;dc_motor_v1.c: 189:         if(mR->power> 0 ){
  1065   001078  5014               	movf	turnLEFT@mR^0,w,c
  1066   00107A  6ED9               	movwf	fsr2l,c
  1067   00107C  6ADA               	clrf	fsr2h,c
  1068   00107E  50DF               	movf	indf2,w,c
  1069   001080  B4D8               	btfsc	status,2,c
  1070   001082  EF45  F008         	goto	u751
  1071   001086  EF47  F008         	goto	u750
  1072   00108A                     u751:
  1073   00108A  EF4B  F008         	goto	l1602
  1074   00108E                     u750:
  1075   00108E                     
  1076                           ;dc_motor_v1.c: 190:             mR->power--;
  1077   00108E  5014               	movf	turnLEFT@mR^0,w,c
  1078   001090  6ED9               	movwf	fsr2l,c
  1079   001092  6ADA               	clrf	fsr2h,c
  1080   001094  06DF               	decf	indf2,f,c
  1081   001096                     l1602:
  1082                           
  1083                           ;dc_motor_v1.c: 192:         if(mL->power> 0 ){
  1084   001096  5013               	movf	turnLEFT@mL^0,w,c
  1085   001098  6ED9               	movwf	fsr2l,c
  1086   00109A  6ADA               	clrf	fsr2h,c
  1087   00109C  50DF               	movf	indf2,w,c
  1088   00109E  B4D8               	btfsc	status,2,c
  1089   0010A0  EF54  F008         	goto	u761
  1090   0010A4  EF56  F008         	goto	u760
  1091   0010A8                     u761:
  1092   0010A8  EF5A  F008         	goto	l1606
  1093   0010AC                     u760:
  1094   0010AC                     
  1095                           ;dc_motor_v1.c: 193:             mL->power--;
  1096   0010AC  5013               	movf	turnLEFT@mL^0,w,c
  1097   0010AE  6ED9               	movwf	fsr2l,c
  1098   0010B0  6ADA               	clrf	fsr2h,c
  1099   0010B2  06DF               	decf	indf2,f,c
  1100   0010B4                     l1606:
  1101                           
  1102                           ;dc_motor_v1.c: 195:         setMotorPWM(mR);
  1103   0010B4  C014  F00E         	movff	turnLEFT@mR,setMotorPWM@m
  1104   0010B8  EC31  F009         	call	_setMotorPWM	;wreg free
  1105   0010BC                     
  1106                           ;dc_motor_v1.c: 196:         setMotorPWM(mL);
  1107   0010BC  C013  F00E         	movff	turnLEFT@mL,setMotorPWM@m
  1108   0010C0  EC31  F009         	call	_setMotorPWM	;wreg free
  1109   0010C4                     
  1110                           ;dc_motor_v1.c: 197:         delay_ms_function(delay_time);
  1111   0010C4  C01F  F001         	movff	turnLEFT@delay_time,delay_ms_function@milliseconds
  1112   0010C8  C020  F002         	movff	turnLEFT@delay_time+1,delay_ms_function@milliseconds+1
  1113   0010CC  EC58  F00C         	call	_delay_ms_function	;wreg free
  1114   0010D0                     l1612:
  1115                           
  1116                           ;dc_motor_v1.c: 188:     while(mL->power || mR->power > 0){
  1117   0010D0  5013               	movf	turnLEFT@mL^0,w,c
  1118   0010D2  6ED9               	movwf	fsr2l,c
  1119   0010D4  6ADA               	clrf	fsr2h,c
  1120   0010D6  50DF               	movf	indf2,w,c
  1121   0010D8  A4D8               	btfss	status,2,c
  1122   0010DA  EF71  F008         	goto	u771
  1123   0010DE  EF73  F008         	goto	u770
  1124   0010E2                     u771:
  1125   0010E2  EF3C  F008         	goto	l1598
  1126   0010E6                     u770:
  1127   0010E6  5014               	movf	turnLEFT@mR^0,w,c
  1128   0010E8  6ED9               	movwf	fsr2l,c
  1129   0010EA  6ADA               	clrf	fsr2h,c
  1130   0010EC  50DF               	movf	indf2,w,c
  1131   0010EE  A4D8               	btfss	status,2,c
  1132   0010F0  EF7C  F008         	goto	u781
  1133   0010F4  EF7E  F008         	goto	u780
  1134   0010F8                     u781:
  1135   0010F8  EF3C  F008         	goto	l1598
  1136   0010FC                     u780:
  1137   0010FC  0012               	return		;funcret
  1138   0010FE                     __end_of_turnLEFT:
  1139                           	callstack 0
  1140                           
  1141 ;; *************** function _switch_calibration *****************
  1142 ;; Defined at:
  1143 ;;		line 44 in file "calibration.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;  calibration_    1    0[COMRAM] PTR int 
  1146 ;;		 -> calibration(9), 
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;		None
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      void 
  1151 ;; Registers used:
  1152 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1158 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1160 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1161 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1162 ;;Total ram usage:        3 bytes
  1163 ;; Hardware stack levels used: 1
  1164 ;; This function calls:
  1165 ;;		Nothing
  1166 ;; This function is called by:
  1167 ;;		_main
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text3
  1172   0016FA                     __ptext3:
  1173                           	callstack 0
  1174   0016FA                     _switch_calibration:
  1175                           	callstack 30
  1176   0016FA                     l57:
  1177                           
  1178                           ;calibration.c: 46:         if(!PORTFbits.RF2){
  1179   0016FA  B48E               	btfsc	142,2,c	;volatile
  1180   0016FC  EF82  F00B         	goto	u651
  1181   001700  EF84  F00B         	goto	u650
  1182   001704                     u651:
  1183   001704  EFB2  F00B         	goto	l58
  1184   001708                     u650:
  1185   001708                     
  1186                           ;calibration.c: 47:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1187   001708  0E11               	movlw	17
  1188   00170A  6E03               	movwf	(??_switch_calibration+1)^0,c
  1189   00170C  0E3C               	movlw	60
  1190   00170E  6E02               	movwf	??_switch_calibration^0,c
  1191   001710  0ECB               	movlw	203
  1192   001712                     u957:
  1193   001712  2EE8               	decfsz	wreg,f,c
  1194   001714  D7FE               	bra	u957
  1195   001716  2E02               	decfsz	??_switch_calibration^0,f,c
  1196   001718  D7FC               	bra	u957
  1197   00171A  2E03               	decfsz	(??_switch_calibration+1)^0,f,c
  1198   00171C  D7FA               	bra	u957
  1199   00171E  0000               	nop	
  1200   001720                     
  1201                           ;calibration.c: 48:             *calibration_index = *calibration_index + 1;
  1202   001720  5001               	movf	switch_calibration@calibration_index^0,w,c
  1203   001722  6ED9               	movwf	fsr2l,c
  1204   001724  6ADA               	clrf	fsr2h,c
  1205   001726  CFDE F002          	movff	postinc2,??_switch_calibration
  1206   00172A  CFDD F003          	movff	postdec2,??_switch_calibration+1
  1207   00172E  0E01               	movlw	1
  1208   001730  2602               	addwf	??_switch_calibration^0,f,c
  1209   001732  0E00               	movlw	0
  1210   001734  2203               	addwfc	(??_switch_calibration+1)^0,f,c
  1211   001736  5001               	movf	switch_calibration@calibration_index^0,w,c
  1212   001738  6ED9               	movwf	fsr2l,c
  1213   00173A  6ADA               	clrf	fsr2h,c
  1214   00173C  C002  FFDE         	movff	??_switch_calibration,postinc2
  1215   001740  C003  FFDD         	movff	??_switch_calibration+1,postdec2
  1216   001744                     
  1217                           ;calibration.c: 49:             LATDbits.LATD7 = 1;
  1218   001744  8E7C               	bsf	124,7,c	;volatile
  1219   001746                     
  1220                           ;calibration.c: 50:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1221   001746  0E11               	movlw	17
  1222   001748  6E03               	movwf	(??_switch_calibration+1)^0,c
  1223   00174A  0E3C               	movlw	60
  1224   00174C  6E02               	movwf	??_switch_calibration^0,c
  1225   00174E  0ECB               	movlw	203
  1226   001750                     u967:
  1227   001750  2EE8               	decfsz	wreg,f,c
  1228   001752  D7FE               	bra	u967
  1229   001754  2E02               	decfsz	??_switch_calibration^0,f,c
  1230   001756  D7FC               	bra	u967
  1231   001758  2E03               	decfsz	(??_switch_calibration+1)^0,f,c
  1232   00175A  D7FA               	bra	u967
  1233   00175C  0000               	nop	
  1234   00175E                     
  1235                           ;calibration.c: 51:             LATDbits.LATD7 = 0;
  1236   00175E  9E7C               	bcf	124,7,c	;volatile
  1237                           
  1238                           ;calibration.c: 52:             break;
  1239   001760  EFD3  F00B         	goto	l62
  1240   001764                     l58:
  1241                           
  1242                           ;calibration.c: 55:         if(!PORTFbits.RF3){
  1243   001764  B68E               	btfsc	142,3,c	;volatile
  1244   001766  EFB7  F00B         	goto	u661
  1245   00176A  EFB9  F00B         	goto	u660
  1246   00176E                     u661:
  1247   00176E  EF7D  F00B         	goto	l57
  1248   001772                     u660:
  1249   001772                     
  1250                           ;calibration.c: 56:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1251   001772  0E11               	movlw	17
  1252   001774  6E03               	movwf	(??_switch_calibration+1)^0,c
  1253   001776  0E3C               	movlw	60
  1254   001778  6E02               	movwf	??_switch_calibration^0,c
  1255   00177A  0ECB               	movlw	203
  1256   00177C                     u977:
  1257   00177C  2EE8               	decfsz	wreg,f,c
  1258   00177E  D7FE               	bra	u977
  1259   001780  2E02               	decfsz	??_switch_calibration^0,f,c
  1260   001782  D7FC               	bra	u977
  1261   001784  2E03               	decfsz	(??_switch_calibration+1)^0,f,c
  1262   001786  D7FA               	bra	u977
  1263   001788  0000               	nop	
  1264   00178A                     
  1265                           ;calibration.c: 57:             LATHbits.LATH3 = 1;
  1266   00178A  8680               	bsf	128,3,c	;volatile
  1267                           
  1268                           ;calibration.c: 58:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1269   00178C  0E11               	movlw	17
  1270   00178E  6E03               	movwf	(??_switch_calibration+1)^0,c
  1271   001790  0E3C               	movlw	60
  1272   001792  6E02               	movwf	??_switch_calibration^0,c
  1273   001794  0ECB               	movlw	203
  1274   001796                     u987:
  1275   001796  2EE8               	decfsz	wreg,f,c
  1276   001798  D7FE               	bra	u987
  1277   00179A  2E02               	decfsz	??_switch_calibration^0,f,c
  1278   00179C  D7FC               	bra	u987
  1279   00179E  2E03               	decfsz	(??_switch_calibration+1)^0,f,c
  1280   0017A0  D7FA               	bra	u987
  1281   0017A2  0000               	nop	
  1282   0017A4                     
  1283                           ;calibration.c: 59:             LATHbits.LATH3 = 0;
  1284   0017A4  9680               	bcf	128,3,c	;volatile
  1285   0017A6                     l62:
  1286   0017A6  0012               	return		;funcret
  1287   0017A8                     __end_of_switch_calibration:
  1288                           	callstack 0
  1289                           
  1290 ;; *************** function _initDCmotorsPWM *****************
  1291 ;; Defined at:
  1292 ;;		line 5 in file "dc_motor_v1.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;		None
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  1    wreg      void 
  1299 ;; Registers used:
  1300 ;;		wreg, status,2
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1306 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1309 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1310 ;;Total ram usage:        2 bytes
  1311 ;; Hardware stack levels used: 1
  1312 ;; This function calls:
  1313 ;;		Nothing
  1314 ;; This function is called by:
  1315 ;;		_main
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           	psect	text4
  1320   0017A8                     __ptext4:
  1321                           	callstack 0
  1322   0017A8                     _initDCmotorsPWM:
  1323                           	callstack 30
  1324   0017A8                     
  1325                           ;dc_motor_v1.c: 7:     TRISEbits.TRISE2 = 0;
  1326   0017A8  9485               	bcf	133,2,c	;volatile
  1327                           
  1328                           ;dc_motor_v1.c: 8:     TRISEbits.TRISE4 = 0;
  1329   0017AA  9885               	bcf	133,4,c	;volatile
  1330                           
  1331                           ;dc_motor_v1.c: 9:     TRISCbits.TRISC7 = 0;
  1332   0017AC  9E83               	bcf	131,7,c	;volatile
  1333                           
  1334                           ;dc_motor_v1.c: 10:     TRISGbits.TRISG6 = 0;
  1335   0017AE  9C87               	bcf	135,6,c	;volatile
  1336                           
  1337                           ;dc_motor_v1.c: 12:     LATEbits.LATE2 = 0;
  1338   0017B0  947D               	bcf	125,2,c	;volatile
  1339                           
  1340                           ;dc_motor_v1.c: 13:     LATEbits.LATE4 = 0;
  1341   0017B2  987D               	bcf	125,4,c	;volatile
  1342                           
  1343                           ;dc_motor_v1.c: 14:     LATCbits.LATC7 = 0;
  1344   0017B4  9E7B               	bcf	123,7,c	;volatile
  1345                           
  1346                           ;dc_motor_v1.c: 15:     LATGbits.LATG6 = 0;
  1347   0017B6  9C7F               	bcf	127,6,c	;volatile
  1348   0017B8                     
  1349                           ;dc_motor_v1.c: 18:     RE2PPS=0x05;
  1350   0017B8  0E05               	movlw	5
  1351   0017BA  010E               	movlb	14	; () banked
  1352   0017BC  6F74               	movwf	116,b	;volatile
  1353                           
  1354                           ;dc_motor_v1.c: 19:     RE4PPS=0x06;
  1355   0017BE  0E06               	movlw	6
  1356   0017C0  6F76               	movwf	118,b	;volatile
  1357                           
  1358                           ;dc_motor_v1.c: 20:     RC7PPS=0x07;
  1359   0017C2  0E07               	movlw	7
  1360   0017C4  6F69               	movwf	105,b	;volatile
  1361                           
  1362                           ;dc_motor_v1.c: 21:     RG6PPS=0x08;
  1363   0017C6  0E08               	movlw	8
  1364   0017C8  6F88               	movwf	136,b	;volatile
  1365                           
  1366                           ;dc_motor_v1.c: 24:     T2CONbits.CKPS=100;
  1367   0017CA  50BD               	movf	189,w,c	;volatile
  1368   0017CC  0B8F               	andlw	-113
  1369   0017CE  0940               	iorlw	64
  1370   0017D0  6EBD               	movwf	189,c	;volatile
  1371                           
  1372                           ;dc_motor_v1.c: 25:     T2HLTbits.MODE=0b00000;
  1373   0017D2  0EE0               	movlw	-32
  1374   0017D4  16BE               	andwf	190,f,c	;volatile
  1375                           
  1376                           ;dc_motor_v1.c: 26:     T2CLKCONbits.CS=0b0001;
  1377   0017D6  50BF               	movf	191,w,c	;volatile
  1378   0017D8  0BF0               	andlw	-16
  1379   0017DA  0901               	iorlw	1
  1380   0017DC  6EBF               	movwf	191,c	;volatile
  1381   0017DE                     
  1382                           ; BSR set to: 14
  1383                           ;dc_motor_v1.c: 30:     T2PR=PWMperiod;
  1384   0017DE  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1385   0017E2                     
  1386                           ; BSR set to: 14
  1387                           ;dc_motor_v1.c: 31:     T2CONbits.ON=1;
  1388   0017E2  8EBD               	bsf	189,7,c	;volatile
  1389                           
  1390                           ;dc_motor_v1.c: 35:     CCPR1H=0;
  1391   0017E4  0E00               	movlw	0
  1392   0017E6  6EAA               	movwf	170,c	;volatile
  1393                           
  1394                           ;dc_motor_v1.c: 36:     CCPR2H=0;
  1395   0017E8  0E00               	movlw	0
  1396   0017EA  6EA6               	movwf	166,c	;volatile
  1397                           
  1398                           ;dc_motor_v1.c: 37:     CCPR3H=0;
  1399   0017EC  0E00               	movlw	0
  1400   0017EE  010F               	movlb	15	; () banked
  1401   0017F0  6F25               	movwf	37,b	;volatile
  1402                           
  1403                           ;dc_motor_v1.c: 38:     CCPR4H=0;
  1404   0017F2  0E00               	movlw	0
  1405   0017F4  6F21               	movwf	33,b	;volatile
  1406                           
  1407                           ;dc_motor_v1.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1408   0017F6  0EFC               	movlw	-4
  1409   0017F8  16AD               	andwf	173,f,c	;volatile
  1410                           
  1411                           ;dc_motor_v1.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1412   0017FA  0EF3               	movlw	-13
  1413   0017FC  16AD               	andwf	173,f,c	;volatile
  1414                           
  1415                           ;dc_motor_v1.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1416   0017FE  0ECF               	movlw	-49
  1417   001800  16AD               	andwf	173,f,c	;volatile
  1418                           
  1419                           ;dc_motor_v1.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1420   001802  0E3F               	movlw	-193
  1421   001804  16AD               	andwf	173,f,c	;volatile
  1422   001806                     
  1423                           ; BSR set to: 15
  1424                           ;dc_motor_v1.c: 47:     CCP1CONbits.FMT=1;
  1425   001806  88AB               	bsf	171,4,c	;volatile
  1426                           
  1427                           ;dc_motor_v1.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1428   001808  50AB               	movf	171,w,c	;volatile
  1429   00180A  0BF0               	andlw	-16
  1430   00180C  090C               	iorlw	12
  1431   00180E  6EAB               	movwf	171,c	;volatile
  1432   001810                     
  1433                           ; BSR set to: 15
  1434                           ;dc_motor_v1.c: 49:     CCP1CONbits.EN=1;
  1435   001810  8EAB               	bsf	171,7,c	;volatile
  1436   001812                     
  1437                           ; BSR set to: 15
  1438                           ;dc_motor_v1.c: 51:     CCP2CONbits.FMT=1;
  1439   001812  88A7               	bsf	167,4,c	;volatile
  1440                           
  1441                           ;dc_motor_v1.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  1442   001814  50A7               	movf	167,w,c	;volatile
  1443   001816  0BF0               	andlw	-16
  1444   001818  090C               	iorlw	12
  1445   00181A  6EA7               	movwf	167,c	;volatile
  1446   00181C                     
  1447                           ; BSR set to: 15
  1448                           ;dc_motor_v1.c: 53:     CCP2CONbits.EN=1;
  1449   00181C  8EA7               	bsf	167,7,c	;volatile
  1450   00181E                     
  1451                           ; BSR set to: 15
  1452                           ;dc_motor_v1.c: 55:     CCP3CONbits.FMT=1;
  1453   00181E  8926               	bsf	38,4,b	;volatile
  1454                           
  1455                           ;dc_motor_v1.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  1456   001820  5126               	movf	38,w,b	;volatile
  1457   001822  0BF0               	andlw	-16
  1458   001824  090C               	iorlw	12
  1459   001826  6F26               	movwf	38,b	;volatile
  1460   001828                     
  1461                           ; BSR set to: 15
  1462                           ;dc_motor_v1.c: 57:     CCP3CONbits.EN=1;
  1463   001828  8F26               	bsf	38,7,b	;volatile
  1464   00182A                     
  1465                           ; BSR set to: 15
  1466                           ;dc_motor_v1.c: 59:     CCP4CONbits.FMT=1;
  1467   00182A  8922               	bsf	34,4,b	;volatile
  1468                           
  1469                           ;dc_motor_v1.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  1470   00182C  5122               	movf	34,w,b	;volatile
  1471   00182E  0BF0               	andlw	-16
  1472   001830  090C               	iorlw	12
  1473   001832  6F22               	movwf	34,b	;volatile
  1474   001834                     
  1475                           ; BSR set to: 15
  1476                           ;dc_motor_v1.c: 61:     CCP4CONbits.EN=1;
  1477   001834  8F22               	bsf	34,7,b	;volatile
  1478   001836                     
  1479                           ; BSR set to: 15
  1480                           ;dc_motor_v1.c: 64:     TRISHbits.TRISH3 = 0;
  1481   001836  9688               	bcf	136,3,c	;volatile
  1482   001838                     
  1483                           ; BSR set to: 15
  1484                           ;dc_motor_v1.c: 65:     LATHbits.LATH3 = 0;
  1485   001838  9680               	bcf	128,3,c	;volatile
  1486   00183A                     
  1487                           ; BSR set to: 15
  1488   00183A  0012               	return		;funcret
  1489   00183C                     __end_of_initDCmotorsPWM:
  1490                           	callstack 0
  1491                           
  1492 ;; *************** function _forward *****************
  1493 ;; Defined at:
  1494 ;;		line 122 in file "dc_motor_v1.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;  Distance_Cal    1    wreg     unsigned char 
  1497 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1498 ;;		 -> motorL(9), 
  1499 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1500 ;;		 -> motorR(9), 
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;  Distance_Cal    1   23[COMRAM] unsigned char 
  1503 ;;  j               2   26[COMRAM] int 
  1504 ;;  i               2   24[COMRAM] int 
  1505 ;;  delay_time      2   30[COMRAM] int 
  1506 ;;  max_power       2   28[COMRAM] int 
  1507 ;;  acceleration    2    0        int 
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  1    wreg      void 
  1510 ;; Registers used:
  1511 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1517 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1518 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1519 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1520 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1521 ;;Total ram usage:       14 bytes
  1522 ;; Hardware stack levels used: 1
  1523 ;; Hardware stack levels required when called: 2
  1524 ;; This function calls:
  1525 ;;		___awdiv
  1526 ;;		_delay_ms_function
  1527 ;;		_setMotorPWM
  1528 ;; This function is called by:
  1529 ;;		_main
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text5
  1534   0010FE                     __ptext5:
  1535                           	callstack 0
  1536   0010FE                     _forward:
  1537                           	callstack 28
  1538                           
  1539                           ; BSR set to: 15
  1540                           ;incstack = 0
  1541                           ;forward@Distance_Calibration stored from wreg
  1542   0010FE  6E18               	movwf	forward@Distance_Calibration^0,c
  1543   001100                     
  1544                           ;dc_motor_v1.c: 128:     int max_power = 20;
  1545   001100  0E00               	movlw	0
  1546   001102  6E1E               	movwf	(forward@max_power+1)^0,c
  1547   001104  0E14               	movlw	20
  1548   001106  6E1D               	movwf	forward@max_power^0,c
  1549   001108                     
  1550                           ;dc_motor_v1.c: 130:     int delay_time = acceleration_time/max_power;
  1551   001108  0E00               	movlw	0
  1552   00110A  6E02               	movwf	(___awdiv@dividend+1)^0,c
  1553   00110C  0E64               	movlw	100
  1554   00110E  6E01               	movwf	___awdiv@dividend^0,c
  1555   001110  0E00               	movlw	0
  1556   001112  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1557   001114  0E14               	movlw	20
  1558   001116  6E03               	movwf	___awdiv@divisor^0,c
  1559   001118  EC1B  F00B         	call	___awdiv	;wreg free
  1560   00111C  C001  F01F         	movff	?___awdiv,forward@delay_time
  1561   001120  C002  F020         	movff	?___awdiv+1,forward@delay_time+1
  1562   001124                     
  1563                           ;dc_motor_v1.c: 133:     for(int i=0; i< max_power; i++){
  1564   001124  0E00               	movlw	0
  1565   001126  6E1A               	movwf	(forward@i+1)^0,c
  1566   001128  0E00               	movlw	0
  1567   00112A  6E19               	movwf	forward@i^0,c
  1568   00112C  EFBC  F008         	goto	l1544
  1569   001130                     l1534:
  1570                           
  1571                           ;dc_motor_v1.c: 134:         mL->power = mL->power + 1;
  1572   001130  5013               	movf	forward@mL^0,w,c
  1573   001132  6ED9               	movwf	fsr2l,c
  1574   001134  6ADA               	clrf	fsr2h,c
  1575   001136  5013               	movf	forward@mL^0,w,c
  1576   001138  6EE1               	movwf	fsr1l,c
  1577   00113A  6AE2               	clrf	fsr1h,c
  1578   00113C  50E7               	movf	indf1,w,c
  1579   00113E  6E15               	movwf	??_forward^0,c
  1580   001140  2815               	incf	??_forward^0,w,c
  1581   001142  6EDF               	movwf	indf2,c
  1582                           
  1583                           ;dc_motor_v1.c: 135:         mR->power = mR->power + 1 ;
  1584   001144  5014               	movf	forward@mR^0,w,c
  1585   001146  6ED9               	movwf	fsr2l,c
  1586   001148  6ADA               	clrf	fsr2h,c
  1587   00114A  5014               	movf	forward@mR^0,w,c
  1588   00114C  6EE1               	movwf	fsr1l,c
  1589   00114E  6AE2               	clrf	fsr1h,c
  1590   001150  50E7               	movf	indf1,w,c
  1591   001152  6E15               	movwf	??_forward^0,c
  1592   001154  2815               	incf	??_forward^0,w,c
  1593   001156  6EDF               	movwf	indf2,c
  1594   001158                     
  1595                           ;dc_motor_v1.c: 136:         setMotorPWM(mR);
  1596   001158  C014  F00E         	movff	forward@mR,setMotorPWM@m
  1597   00115C  EC31  F009         	call	_setMotorPWM	;wreg free
  1598   001160                     
  1599                           ;dc_motor_v1.c: 137:         setMotorPWM(mL);
  1600   001160  C013  F00E         	movff	forward@mL,setMotorPWM@m
  1601   001164  EC31  F009         	call	_setMotorPWM	;wreg free
  1602   001168                     
  1603                           ;dc_motor_v1.c: 138:         delay_ms_function(delay_time);
  1604   001168  C01F  F001         	movff	forward@delay_time,delay_ms_function@milliseconds
  1605   00116C  C020  F002         	movff	forward@delay_time+1,delay_ms_function@milliseconds+1
  1606   001170  EC58  F00C         	call	_delay_ms_function	;wreg free
  1607   001174                     
  1608                           ;dc_motor_v1.c: 139:     }
  1609   001174  4A19               	infsnz	forward@i^0,f,c
  1610   001176  2A1A               	incf	(forward@i+1)^0,f,c
  1611   001178                     l1544:
  1612   001178  501D               	movf	forward@max_power^0,w,c
  1613   00117A  5C19               	subwf	forward@i^0,w,c
  1614   00117C  501A               	movf	(forward@i+1)^0,w,c
  1615   00117E  0A80               	xorlw	128
  1616   001180  6E15               	movwf	??_forward^0,c
  1617   001182  501E               	movf	(forward@max_power+1)^0,w,c
  1618   001184  0A80               	xorlw	128
  1619   001186  5815               	subwfb	??_forward^0,w,c
  1620   001188  A0D8               	btfss	status,0,c
  1621   00118A  EFC9  F008         	goto	u671
  1622   00118E  EFCB  F008         	goto	u670
  1623   001192                     u671:
  1624   001192  EF98  F008         	goto	l1534
  1625   001196                     u670:
  1626   001196                     
  1627                           ;dc_motor_v1.c: 144:     for(int j=0; j<Distance_Calibration; j++){
  1628   001196  0E00               	movlw	0
  1629   001198  6E1C               	movwf	(forward@j+1)^0,c
  1630   00119A  0E00               	movlw	0
  1631   00119C  6E1B               	movwf	forward@j^0,c
  1632   00119E  EFDA  F008         	goto	l150
  1633   0011A2                     l1548:
  1634                           
  1635                           ;dc_motor_v1.c: 145:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1636   0011A2  0ED0               	movlw	208
  1637   0011A4  6E15               	movwf	??_forward^0,c
  1638   0011A6  0ECA               	movlw	202
  1639   0011A8                     u997:
  1640   0011A8  2EE8               	decfsz	wreg,f,c
  1641   0011AA  D7FE               	bra	u997
  1642   0011AC  2E15               	decfsz	??_forward^0,f,c
  1643   0011AE  D7FC               	bra	u997
  1644   0011B0                     
  1645                           ;dc_motor_v1.c: 146:     }
  1646   0011B0  4A1B               	infsnz	forward@j^0,f,c
  1647   0011B2  2A1C               	incf	(forward@j+1)^0,f,c
  1648   0011B4                     l150:
  1649   0011B4  5018               	movf	forward@Distance_Calibration^0,w,c
  1650   0011B6  6E15               	movwf	??_forward^0,c
  1651   0011B8  6A16               	clrf	(??_forward+1)^0,c
  1652   0011BA  5015               	movf	??_forward^0,w,c
  1653   0011BC  5C1B               	subwf	forward@j^0,w,c
  1654   0011BE  501C               	movf	(forward@j+1)^0,w,c
  1655   0011C0  0A80               	xorlw	128
  1656   0011C2  6E17               	movwf	(??_forward+2)^0,c
  1657   0011C4  5016               	movf	(??_forward+1)^0,w,c
  1658   0011C6  0A80               	xorlw	128
  1659   0011C8  5817               	subwfb	(??_forward+2)^0,w,c
  1660   0011CA  A0D8               	btfss	status,0,c
  1661   0011CC  EFEA  F008         	goto	u681
  1662   0011D0  EFEC  F008         	goto	u680
  1663   0011D4                     u681:
  1664   0011D4  EFD1  F008         	goto	l1548
  1665   0011D8                     u680:
  1666   0011D8  EF1A  F009         	goto	l1566
  1667   0011DC                     l1552:
  1668                           
  1669                           ;dc_motor_v1.c: 150:         if(mR->power> 0 ){
  1670   0011DC  5014               	movf	forward@mR^0,w,c
  1671   0011DE  6ED9               	movwf	fsr2l,c
  1672   0011E0  6ADA               	clrf	fsr2h,c
  1673   0011E2  50DF               	movf	indf2,w,c
  1674   0011E4  B4D8               	btfsc	status,2,c
  1675   0011E6  EFF7  F008         	goto	u691
  1676   0011EA  EFF9  F008         	goto	u690
  1677   0011EE                     u691:
  1678   0011EE  EFFD  F008         	goto	l1556
  1679   0011F2                     u690:
  1680   0011F2                     
  1681                           ;dc_motor_v1.c: 151:             mR->power--;
  1682   0011F2  5014               	movf	forward@mR^0,w,c
  1683   0011F4  6ED9               	movwf	fsr2l,c
  1684   0011F6  6ADA               	clrf	fsr2h,c
  1685   0011F8  06DF               	decf	indf2,f,c
  1686   0011FA                     l1556:
  1687                           
  1688                           ;dc_motor_v1.c: 153:         if(mL->power> 0 ){
  1689   0011FA  5013               	movf	forward@mL^0,w,c
  1690   0011FC  6ED9               	movwf	fsr2l,c
  1691   0011FE  6ADA               	clrf	fsr2h,c
  1692   001200  50DF               	movf	indf2,w,c
  1693   001202  B4D8               	btfsc	status,2,c
  1694   001204  EF06  F009         	goto	u701
  1695   001208  EF08  F009         	goto	u700
  1696   00120C                     u701:
  1697   00120C  EF0C  F009         	goto	l1560
  1698   001210                     u700:
  1699   001210                     
  1700                           ;dc_motor_v1.c: 154:             mL->power--;
  1701   001210  5013               	movf	forward@mL^0,w,c
  1702   001212  6ED9               	movwf	fsr2l,c
  1703   001214  6ADA               	clrf	fsr2h,c
  1704   001216  06DF               	decf	indf2,f,c
  1705   001218                     l1560:
  1706                           
  1707                           ;dc_motor_v1.c: 156:         setMotorPWM(mR);
  1708   001218  C014  F00E         	movff	forward@mR,setMotorPWM@m
  1709   00121C  EC31  F009         	call	_setMotorPWM	;wreg free
  1710   001220                     
  1711                           ;dc_motor_v1.c: 157:         setMotorPWM(mL);
  1712   001220  C013  F00E         	movff	forward@mL,setMotorPWM@m
  1713   001224  EC31  F009         	call	_setMotorPWM	;wreg free
  1714   001228                     
  1715                           ;dc_motor_v1.c: 158:         delay_ms_function(delay_time);
  1716   001228  C01F  F001         	movff	forward@delay_time,delay_ms_function@milliseconds
  1717   00122C  C020  F002         	movff	forward@delay_time+1,delay_ms_function@milliseconds+1
  1718   001230  EC58  F00C         	call	_delay_ms_function	;wreg free
  1719   001234                     l1566:
  1720                           
  1721                           ;dc_motor_v1.c: 149:     while(mL->power || mR->power > 0){
  1722   001234  5013               	movf	forward@mL^0,w,c
  1723   001236  6ED9               	movwf	fsr2l,c
  1724   001238  6ADA               	clrf	fsr2h,c
  1725   00123A  50DF               	movf	indf2,w,c
  1726   00123C  A4D8               	btfss	status,2,c
  1727   00123E  EF23  F009         	goto	u711
  1728   001242  EF25  F009         	goto	u710
  1729   001246                     u711:
  1730   001246  EFEE  F008         	goto	l1552
  1731   00124A                     u710:
  1732   00124A  5014               	movf	forward@mR^0,w,c
  1733   00124C  6ED9               	movwf	fsr2l,c
  1734   00124E  6ADA               	clrf	fsr2h,c
  1735   001250  50DF               	movf	indf2,w,c
  1736   001252  A4D8               	btfss	status,2,c
  1737   001254  EF2E  F009         	goto	u721
  1738   001258  EF30  F009         	goto	u720
  1739   00125C                     u721:
  1740   00125C  EFEE  F008         	goto	l1552
  1741   001260                     u720:
  1742   001260  0012               	return		;funcret
  1743   001262                     __end_of_forward:
  1744                           	callstack 0
  1745                           
  1746 ;; *************** function _setMotorPWM *****************
  1747 ;; Defined at:
  1748 ;;		line 75 in file "dc_motor_v1.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1751 ;;		 -> motorR(9), motorL(9), 
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;  negDuty         1   17[COMRAM] unsigned char 
  1754 ;;  posDuty         1   16[COMRAM] unsigned char 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  1    wreg      void 
  1757 ;; Registers used:
  1758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1764 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1765 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1766 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1767 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1768 ;;Total ram usage:        5 bytes
  1769 ;; Hardware stack levels used: 1
  1770 ;; Hardware stack levels required when called: 1
  1771 ;; This function calls:
  1772 ;;		___lwdiv
  1773 ;;		___wmul
  1774 ;; This function is called by:
  1775 ;;		_forward
  1776 ;;		_turnLEFT
  1777 ;;		_turnRIGHT
  1778 ;;		_stop
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           	psect	text6
  1783   001262                     __ptext6:
  1784                           	callstack 0
  1785   001262                     _setMotorPWM:
  1786                           	callstack 28
  1787   001262                     
  1788                           ;dc_motor_v1.c: 75: void setMotorPWM(DC_motor *m);dc_motor_v1.c: 76: {;dc_motor_v1.c: 77
      +                          :     unsigned char posDuty, negDuty;;dc_motor_v1.c: 79:     if(m->brakemode) {
  1789   001262  500E               	movf	setMotorPWM@m^0,w,c
  1790   001264  6ED9               	movwf	fsr2l,c
  1791   001266  6ADA               	clrf	fsr2h,c
  1792   001268  0E02               	movlw	2
  1793   00126A  26D9               	addwf	fsr2l,f,c
  1794   00126C  50DF               	movf	indf2,w,c
  1795   00126E  B4D8               	btfsc	status,2,c
  1796   001270  EF3C  F009         	goto	u511
  1797   001274  EF3E  F009         	goto	u510
  1798   001278                     u511:
  1799   001278  EF6E  F009         	goto	l1390
  1800   00127C                     u510:
  1801   00127C                     
  1802                           ;dc_motor_v1.c: 80:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperi
      +                          od))/100;
  1803   00127C  500E               	movf	setMotorPWM@m^0,w,c
  1804   00127E  6ED9               	movwf	fsr2l,c
  1805   001280  6ADA               	clrf	fsr2h,c
  1806   001282  50DF               	movf	indf2,w,c
  1807   001284  6E0F               	movwf	??_setMotorPWM^0,c
  1808   001286  500F               	movf	??_setMotorPWM^0,w,c
  1809   001288  6E01               	movwf	___wmul@multiplier^0,c
  1810   00128A  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1811   00128C  500E               	movf	setMotorPWM@m^0,w,c
  1812   00128E  6ED9               	movwf	fsr2l,c
  1813   001290  6ADA               	clrf	fsr2h,c
  1814   001292  0E03               	movlw	3
  1815   001294  26D9               	addwf	fsr2l,f,c
  1816   001296  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1817   00129A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1818   00129E  EC6F  F00C         	call	___wmul	;wreg free
  1819   0012A2  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1820   0012A6  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1821   0012AA  0E00               	movlw	0
  1822   0012AC  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1823   0012AE  0E64               	movlw	100
  1824   0012B0  6E09               	movwf	___lwdiv@divisor^0,c
  1825   0012B2  EC1E  F00C         	call	___lwdiv	;wreg free
  1826   0012B6  500E               	movf	setMotorPWM@m^0,w,c
  1827   0012B8  6ED9               	movwf	fsr2l,c
  1828   0012BA  6ADA               	clrf	fsr2h,c
  1829   0012BC  0E03               	movlw	3
  1830   0012BE  26D9               	addwf	fsr2l,f,c
  1831   0012C0  50DF               	movf	indf2,w,c
  1832   0012C2  6E10               	movwf	(??_setMotorPWM+1)^0,c
  1833   0012C4  5007               	movf	?___lwdiv^0,w,c
  1834   0012C6  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  1835   0012C8  6E11               	movwf	setMotorPWM@posDuty^0,c
  1836   0012CA                     
  1837                           ;dc_motor_v1.c: 81:         negDuty=m->PWMperiod;
  1838   0012CA  500E               	movf	setMotorPWM@m^0,w,c
  1839   0012CC  6ED9               	movwf	fsr2l,c
  1840   0012CE  6ADA               	clrf	fsr2h,c
  1841   0012D0  0E03               	movlw	3
  1842   0012D2  26D9               	addwf	fsr2l,f,c
  1843   0012D4  50DF               	movf	indf2,w,c
  1844   0012D6  6E12               	movwf	setMotorPWM@negDuty^0,c
  1845                           
  1846                           ;dc_motor_v1.c: 82:     }
  1847   0012D8  EF8F  F009         	goto	l1394
  1848   0012DC                     l1390:
  1849                           
  1850                           ;dc_motor_v1.c: 84:         posDuty=0;
  1851   0012DC  0E00               	movlw	0
  1852   0012DE  6E11               	movwf	setMotorPWM@posDuty^0,c
  1853   0012E0                     
  1854                           ;dc_motor_v1.c: 85:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1855   0012E0  500E               	movf	setMotorPWM@m^0,w,c
  1856   0012E2  6ED9               	movwf	fsr2l,c
  1857   0012E4  6ADA               	clrf	fsr2h,c
  1858   0012E6  50DF               	movf	indf2,w,c
  1859   0012E8  6E0F               	movwf	??_setMotorPWM^0,c
  1860   0012EA  500F               	movf	??_setMotorPWM^0,w,c
  1861   0012EC  6E01               	movwf	___wmul@multiplier^0,c
  1862   0012EE  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1863   0012F0  500E               	movf	setMotorPWM@m^0,w,c
  1864   0012F2  6ED9               	movwf	fsr2l,c
  1865   0012F4  6ADA               	clrf	fsr2h,c
  1866   0012F6  0E03               	movlw	3
  1867   0012F8  26D9               	addwf	fsr2l,f,c
  1868   0012FA  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1869   0012FE  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1870   001302  EC6F  F00C         	call	___wmul	;wreg free
  1871   001306  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1872   00130A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1873   00130E  0E00               	movlw	0
  1874   001310  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1875   001312  0E64               	movlw	100
  1876   001314  6E09               	movwf	___lwdiv@divisor^0,c
  1877   001316  EC1E  F00C         	call	___lwdiv	;wreg free
  1878   00131A  5007               	movf	?___lwdiv^0,w,c
  1879   00131C  6E12               	movwf	setMotorPWM@negDuty^0,c
  1880   00131E                     l1394:
  1881                           
  1882                           ;dc_motor_v1.c: 88:     if (m->direction) {
  1883   00131E  500E               	movf	setMotorPWM@m^0,w,c
  1884   001320  6ED9               	movwf	fsr2l,c
  1885   001322  6ADA               	clrf	fsr2h,c
  1886   001324  0E01               	movlw	1
  1887   001326  26D9               	addwf	fsr2l,f,c
  1888   001328  50DF               	movf	indf2,w,c
  1889   00132A  B4D8               	btfsc	status,2,c
  1890   00132C  EF9A  F009         	goto	u521
  1891   001330  EF9C  F009         	goto	u520
  1892   001334                     u521:
  1893   001334  EFBC  F009         	goto	l1398
  1894   001338                     u520:
  1895   001338                     
  1896                           ;dc_motor_v1.c: 89:         *(m->posDutyHighByte)=posDuty;
  1897   001338  500E               	movf	setMotorPWM@m^0,w,c
  1898   00133A  6ED9               	movwf	fsr2l,c
  1899   00133C  6ADA               	clrf	fsr2h,c
  1900   00133E  0E05               	movlw	5
  1901   001340  26D9               	addwf	fsr2l,f,c
  1902   001342  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1903   001346  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1904   00134A  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1905   00134E  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1906   001352  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1907                           
  1908                           ;dc_motor_v1.c: 90:         *(m->negDutyHighByte)=negDuty;
  1909   001356  500E               	movf	setMotorPWM@m^0,w,c
  1910   001358  6ED9               	movwf	fsr2l,c
  1911   00135A  6ADA               	clrf	fsr2h,c
  1912   00135C  0E07               	movlw	7
  1913   00135E  26D9               	addwf	fsr2l,f,c
  1914   001360  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1915   001364  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1916   001368  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1917   00136C  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1918   001370  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1919                           
  1920                           ;dc_motor_v1.c: 91:     } else {
  1921   001374  EFDA  F009         	goto	l136
  1922   001378                     l1398:
  1923                           
  1924                           ;dc_motor_v1.c: 92:         *(m->posDutyHighByte)=negDuty;
  1925   001378  500E               	movf	setMotorPWM@m^0,w,c
  1926   00137A  6ED9               	movwf	fsr2l,c
  1927   00137C  6ADA               	clrf	fsr2h,c
  1928   00137E  0E05               	movlw	5
  1929   001380  26D9               	addwf	fsr2l,f,c
  1930   001382  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1931   001386  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1932   00138A  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1933   00138E  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1934   001392  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1935                           
  1936                           ;dc_motor_v1.c: 93:         *(m->negDutyHighByte)=posDuty;
  1937   001396  500E               	movf	setMotorPWM@m^0,w,c
  1938   001398  6ED9               	movwf	fsr2l,c
  1939   00139A  6ADA               	clrf	fsr2h,c
  1940   00139C  0E07               	movlw	7
  1941   00139E  26D9               	addwf	fsr2l,f,c
  1942   0013A0  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1943   0013A4  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1944   0013A8  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1945   0013AC  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1946   0013B0  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1947   0013B4                     l136:
  1948   0013B4  0012               	return		;funcret
  1949   0013B6                     __end_of_setMotorPWM:
  1950                           	callstack 0
  1951                           
  1952 ;; *************** function ___wmul *****************
  1953 ;; Defined at:
  1954 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;  multiplier      2    0[COMRAM] unsigned int 
  1957 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;  product         2    4[COMRAM] unsigned int 
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  2    0[COMRAM] unsigned int 
  1962 ;; Registers used:
  1963 ;;		wreg, status,2, status,0, prodl, prodh
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1969 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1970 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1972 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1973 ;;Total ram usage:        6 bytes
  1974 ;; Hardware stack levels used: 1
  1975 ;; This function calls:
  1976 ;;		Nothing
  1977 ;; This function is called by:
  1978 ;;		_setMotorPWM
  1979 ;; This function uses a non-reentrant model
  1980 ;;
  1981                           
  1982                           	psect	text7
  1983   0018DE                     __ptext7:
  1984                           	callstack 0
  1985   0018DE                     ___wmul:
  1986                           	callstack 28
  1987   0018DE  5001               	movf	___wmul@multiplier^0,w,c
  1988   0018E0  0203               	mulwf	___wmul@multiplicand^0,c
  1989   0018E2  CFF3 F005          	movff	prodl,___wmul@product
  1990   0018E6  CFF4 F006          	movff	prodh,___wmul@product+1
  1991   0018EA  5001               	movf	___wmul@multiplier^0,w,c
  1992   0018EC  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1993   0018EE  50F3               	movf	243,w,c
  1994   0018F0  2606               	addwf	(___wmul@product+1)^0,f,c
  1995   0018F2  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1996   0018F4  0203               	mulwf	___wmul@multiplicand^0,c
  1997   0018F6  50F3               	movf	243,w,c
  1998   0018F8  2606               	addwf	(___wmul@product+1)^0,f,c
  1999   0018FA  C005  F001         	movff	___wmul@product,?___wmul
  2000   0018FE  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2001   001902  0012               	return		;funcret
  2002   001904                     __end_of___wmul:
  2003                           	callstack 0
  2004                           
  2005 ;; *************** function ___lwdiv *****************
  2006 ;; Defined at:
  2007 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;  dividend        2    6[COMRAM] unsigned int 
  2010 ;;  divisor         2    8[COMRAM] unsigned int 
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;  quotient        2   10[COMRAM] unsigned int 
  2013 ;;  counter         1   12[COMRAM] unsigned char 
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  2    6[COMRAM] unsigned int 
  2016 ;; Registers used:
  2017 ;;		wreg, status,2, status,0
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2023 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2024 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2026 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2027 ;;Total ram usage:        7 bytes
  2028 ;; Hardware stack levels used: 1
  2029 ;; This function calls:
  2030 ;;		Nothing
  2031 ;; This function is called by:
  2032 ;;		_setMotorPWM
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text8
  2037   00183C                     __ptext8:
  2038                           	callstack 0
  2039   00183C                     ___lwdiv:
  2040                           	callstack 28
  2041   00183C  0E00               	movlw	0
  2042   00183E  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  2043   001840  0E00               	movlw	0
  2044   001842  6E0B               	movwf	___lwdiv@quotient^0,c
  2045   001844  5009               	movf	___lwdiv@divisor^0,w,c
  2046   001846  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2047   001848  B4D8               	btfsc	status,2,c
  2048   00184A  EF29  F00C         	goto	u471
  2049   00184E  EF2B  F00C         	goto	u470
  2050   001852                     u471:
  2051   001852  EF53  F00C         	goto	l732
  2052   001856                     u470:
  2053   001856  0E01               	movlw	1
  2054   001858  6E0D               	movwf	___lwdiv@counter^0,c
  2055   00185A  EF33  F00C         	goto	l1364
  2056   00185E                     l1362:
  2057   00185E  90D8               	bcf	status,0,c
  2058   001860  3609               	rlcf	___lwdiv@divisor^0,f,c
  2059   001862  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2060   001864  2A0D               	incf	___lwdiv@counter^0,f,c
  2061   001866                     l1364:
  2062   001866  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2063   001868  EF38  F00C         	goto	u481
  2064   00186C  EF3A  F00C         	goto	u480
  2065   001870                     u481:
  2066   001870  EF2F  F00C         	goto	l1362
  2067   001874                     u480:
  2068   001874                     l1366:
  2069   001874  90D8               	bcf	status,0,c
  2070   001876  360B               	rlcf	___lwdiv@quotient^0,f,c
  2071   001878  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2072   00187A  5009               	movf	___lwdiv@divisor^0,w,c
  2073   00187C  5C07               	subwf	___lwdiv@dividend^0,w,c
  2074   00187E  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2075   001880  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2076   001882  A0D8               	btfss	status,0,c
  2077   001884  EF46  F00C         	goto	u491
  2078   001888  EF48  F00C         	goto	u490
  2079   00188C                     u491:
  2080   00188C  EF4D  F00C         	goto	l1374
  2081   001890                     u490:
  2082   001890  5009               	movf	___lwdiv@divisor^0,w,c
  2083   001892  5E07               	subwf	___lwdiv@dividend^0,f,c
  2084   001894  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2085   001896  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2086   001898  800B               	bsf	___lwdiv@quotient^0,0,c
  2087   00189A                     l1374:
  2088   00189A  90D8               	bcf	status,0,c
  2089   00189C  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2090   00189E  3209               	rrcf	___lwdiv@divisor^0,f,c
  2091   0018A0  2E0D               	decfsz	___lwdiv@counter^0,f,c
  2092   0018A2  EF3A  F00C         	goto	l1366
  2093   0018A6                     l732:
  2094   0018A6  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  2095   0018AA  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2096   0018AE  0012               	return		;funcret
  2097   0018B0                     __end_of___lwdiv:
  2098                           	callstack 0
  2099                           
  2100 ;; *************** function _delay_ms_function *****************
  2101 ;; Defined at:
  2102 ;;		line 67 in file "dc_motor_v1.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;  milliseconds    2    0[COMRAM] unsigned int 
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;		None
  2107 ;; Return value:  Size  Location     Type
  2108 ;;                  1    wreg      void 
  2109 ;; Registers used:
  2110 ;;		wreg, status,2, status,0
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2118 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2119 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2120 ;;Total ram usage:        3 bytes
  2121 ;; Hardware stack levels used: 1
  2122 ;; This function calls:
  2123 ;;		Nothing
  2124 ;; This function is called by:
  2125 ;;		_forward
  2126 ;;		_turnLEFT
  2127 ;;		_turnRIGHT
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text9
  2132   0018B0                     __ptext9:
  2133                           	callstack 0
  2134   0018B0                     _delay_ms_function:
  2135                           	callstack 29
  2136   0018B0                     
  2137                           ;dc_motor_v1.c: 68:     while (milliseconds > 0) {
  2138   0018B0  EF65  F00C         	goto	l126
  2139   0018B4                     l1380:
  2140                           
  2141                           ;dc_motor_v1.c: 69:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2142   0018B4  0E15               	movlw	21
  2143   0018B6  6E03               	movwf	??_delay_ms_function^0,c
  2144   0018B8  0EC6               	movlw	198
  2145   0018BA                     u1007:
  2146   0018BA  2EE8               	decfsz	wreg,f,c
  2147   0018BC  D7FE               	bra	u1007
  2148   0018BE  2E03               	decfsz	??_delay_ms_function^0,f,c
  2149   0018C0  D7FC               	bra	u1007
  2150   0018C2  D000               	nop2	
  2151   0018C4                     
  2152                           ;dc_motor_v1.c: 70:         milliseconds--;
  2153   0018C4  0601               	decf	delay_ms_function@milliseconds^0,f,c
  2154   0018C6  A0D8               	btfss	status,0,c
  2155   0018C8  0602               	decf	(delay_ms_function@milliseconds+1)^0,f,c
  2156   0018CA                     l126:
  2157                           
  2158                           ;dc_motor_v1.c: 68:     while (milliseconds > 0) {
  2159   0018CA  5001               	movf	delay_ms_function@milliseconds^0,w,c
  2160   0018CC  1002               	iorwf	(delay_ms_function@milliseconds+1)^0,w,c
  2161   0018CE  A4D8               	btfss	status,2,c
  2162   0018D0  EF6C  F00C         	goto	u501
  2163   0018D4  EF6E  F00C         	goto	u500
  2164   0018D8                     u501:
  2165   0018D8  EF5A  F00C         	goto	l1380
  2166   0018DC                     u500:
  2167   0018DC  0012               	return		;funcret
  2168   0018DE                     __end_of_delay_ms_function:
  2169                           	callstack 0
  2170                           
  2171 ;; *************** function ___awdiv *****************
  2172 ;; Defined at:
  2173 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;  dividend        2    0[COMRAM] int 
  2176 ;;  divisor         2    2[COMRAM] int 
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;  quotient        2    6[COMRAM] int 
  2179 ;;  sign            1    5[COMRAM] unsigned char 
  2180 ;;  counter         1    4[COMRAM] unsigned char 
  2181 ;; Return value:  Size  Location     Type
  2182 ;;                  2    0[COMRAM] int 
  2183 ;; Registers used:
  2184 ;;		wreg, status,2, status,0
  2185 ;; Tracked objects:
  2186 ;;		On entry : 0/0
  2187 ;;		On exit  : 0/0
  2188 ;;		Unchanged: 0/0
  2189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2190 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2191 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2193 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2194 ;;Total ram usage:        8 bytes
  2195 ;; Hardware stack levels used: 1
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_forward
  2200 ;;		_turnLEFT
  2201 ;;		_turnRIGHT
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text10
  2206   001636                     __ptext10:
  2207                           	callstack 0
  2208   001636                     ___awdiv:
  2209                           	callstack 29
  2210   001636  0E00               	movlw	0
  2211   001638  6E06               	movwf	___awdiv@sign^0,c
  2212   00163A  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2213   00163C  EF24  F00B         	goto	u530
  2214   001640  EF22  F00B         	goto	u531
  2215   001644                     u531:
  2216   001644  EF2A  F00B         	goto	l1408
  2217   001648                     u530:
  2218   001648  6C03               	negf	___awdiv@divisor^0,c
  2219   00164A  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2220   00164C  B0D8               	btfsc	status,0,c
  2221   00164E  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2222   001650  0E01               	movlw	1
  2223   001652  6E06               	movwf	___awdiv@sign^0,c
  2224   001654                     l1408:
  2225   001654  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2226   001656  EF31  F00B         	goto	u540
  2227   00165A  EF2F  F00B         	goto	u541
  2228   00165E                     u541:
  2229   00165E  EF37  F00B         	goto	l1414
  2230   001662                     u540:
  2231   001662  6C01               	negf	___awdiv@dividend^0,c
  2232   001664  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2233   001666  B0D8               	btfsc	status,0,c
  2234   001668  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2235   00166A  0E01               	movlw	1
  2236   00166C  1A06               	xorwf	___awdiv@sign^0,f,c
  2237   00166E                     l1414:
  2238   00166E  0E00               	movlw	0
  2239   001670  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2240   001672  0E00               	movlw	0
  2241   001674  6E07               	movwf	___awdiv@quotient^0,c
  2242   001676  5003               	movf	___awdiv@divisor^0,w,c
  2243   001678  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2244   00167A  B4D8               	btfsc	status,2,c
  2245   00167C  EF42  F00B         	goto	u551
  2246   001680  EF44  F00B         	goto	u550
  2247   001684                     u551:
  2248   001684  EF6C  F00B         	goto	l1436
  2249   001688                     u550:
  2250   001688  0E01               	movlw	1
  2251   00168A  6E05               	movwf	___awdiv@counter^0,c
  2252   00168C  EF4C  F00B         	goto	l1422
  2253   001690                     l1420:
  2254   001690  90D8               	bcf	status,0,c
  2255   001692  3603               	rlcf	___awdiv@divisor^0,f,c
  2256   001694  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2257   001696  2A05               	incf	___awdiv@counter^0,f,c
  2258   001698                     l1422:
  2259   001698  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2260   00169A  EF51  F00B         	goto	u561
  2261   00169E  EF53  F00B         	goto	u560
  2262   0016A2                     u561:
  2263   0016A2  EF48  F00B         	goto	l1420
  2264   0016A6                     u560:
  2265   0016A6                     l1424:
  2266   0016A6  90D8               	bcf	status,0,c
  2267   0016A8  3607               	rlcf	___awdiv@quotient^0,f,c
  2268   0016AA  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2269   0016AC  5003               	movf	___awdiv@divisor^0,w,c
  2270   0016AE  5C01               	subwf	___awdiv@dividend^0,w,c
  2271   0016B0  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2272   0016B2  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2273   0016B4  A0D8               	btfss	status,0,c
  2274   0016B6  EF5F  F00B         	goto	u571
  2275   0016BA  EF61  F00B         	goto	u570
  2276   0016BE                     u571:
  2277   0016BE  EF66  F00B         	goto	l1432
  2278   0016C2                     u570:
  2279   0016C2  5003               	movf	___awdiv@divisor^0,w,c
  2280   0016C4  5E01               	subwf	___awdiv@dividend^0,f,c
  2281   0016C6  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2282   0016C8  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2283   0016CA  8007               	bsf	___awdiv@quotient^0,0,c
  2284   0016CC                     l1432:
  2285   0016CC  90D8               	bcf	status,0,c
  2286   0016CE  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2287   0016D0  3203               	rrcf	___awdiv@divisor^0,f,c
  2288   0016D2  2E05               	decfsz	___awdiv@counter^0,f,c
  2289   0016D4  EF53  F00B         	goto	l1424
  2290   0016D8                     l1436:
  2291   0016D8  5006               	movf	___awdiv@sign^0,w,c
  2292   0016DA  B4D8               	btfsc	status,2,c
  2293   0016DC  EF72  F00B         	goto	u581
  2294   0016E0  EF74  F00B         	goto	u580
  2295   0016E4                     u581:
  2296   0016E4  EF78  F00B         	goto	l1440
  2297   0016E8                     u580:
  2298   0016E8  6C07               	negf	___awdiv@quotient^0,c
  2299   0016EA  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2300   0016EC  B0D8               	btfsc	status,0,c
  2301   0016EE  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2302   0016F0                     l1440:
  2303   0016F0  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2304   0016F4  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2305   0016F8  0012               	return		;funcret
  2306   0016FA                     __end_of___awdiv:
  2307                           	callstack 0
  2308                           
  2309 ;; *************** function _adjust_calibration *****************
  2310 ;; Defined at:
  2311 ;;		line 6 in file "calibration.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;  calibration_    1    0[COMRAM] PTR int 
  2314 ;;		 -> calibration(9), 
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;		None
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  1    wreg      void 
  2319 ;; Registers used:
  2320 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2321 ;; Tracked objects:
  2322 ;;		On entry : 0/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2326 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2328 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2329 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2330 ;;Total ram usage:        5 bytes
  2331 ;; Hardware stack levels used: 1
  2332 ;; This function calls:
  2333 ;;		Nothing
  2334 ;; This function is called by:
  2335 ;;		_main
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           	psect	text11
  2340   0013B6                     __ptext11:
  2341                           	callstack 0
  2342   0013B6                     _adjust_calibration:
  2343                           	callstack 30
  2344   0013B6                     l44:
  2345                           
  2346                           ;calibration.c: 11:         if(!PORTFbits.RF3 || !PORTFbits.RF2){
  2347   0013B6  A68E               	btfss	142,3,c	;volatile
  2348   0013B8  EFE0  F009         	goto	u591
  2349   0013BC  EFE2  F009         	goto	u590
  2350   0013C0                     u591:
  2351   0013C0  EFE9  F009         	goto	l1446
  2352   0013C4                     u590:
  2353   0013C4  B48E               	btfsc	142,2,c	;volatile
  2354   0013C6  EFE7  F009         	goto	u601
  2355   0013CA  EFE9  F009         	goto	u600
  2356   0013CE                     u601:
  2357   0013CE  EFDB  F009         	goto	l44
  2358   0013D2                     u600:
  2359   0013D2                     l1446:
  2360                           
  2361                           ;calibration.c: 12:             _delay((unsigned long)((100)*(64000000/4000.0)));
  2362   0013D2  0E09               	movlw	9
  2363   0013D4  6E03               	movwf	(??_adjust_calibration+1)^0,c
  2364   0013D6  0E1E               	movlw	30
  2365   0013D8  6E02               	movwf	??_adjust_calibration^0,c
  2366   0013DA  0EE4               	movlw	228
  2367   0013DC                     u1017:
  2368   0013DC  2EE8               	decfsz	wreg,f,c
  2369   0013DE  D7FE               	bra	u1017
  2370   0013E0  2E02               	decfsz	??_adjust_calibration^0,f,c
  2371   0013E2  D7FC               	bra	u1017
  2372   0013E4  2E03               	decfsz	(??_adjust_calibration+1)^0,f,c
  2373   0013E6  D7FA               	bra	u1017
  2374   0013E8  D000               	nop2	
  2375   0013EA                     
  2376                           ;calibration.c: 14:             if(!PORTFbits.RF3 && !PORTFbits.RF2 ){
  2377   0013EA  B68E               	btfsc	142,3,c	;volatile
  2378   0013EC  EFFA  F009         	goto	u611
  2379   0013F0  EFFC  F009         	goto	u610
  2380   0013F4                     u611:
  2381   0013F4  EF15  F00A         	goto	l48
  2382   0013F8                     u610:
  2383   0013F8  B48E               	btfsc	142,2,c	;volatile
  2384   0013FA  EF01  F00A         	goto	u621
  2385   0013FE  EF03  F00A         	goto	u620
  2386   001402                     u621:
  2387   001402  EF15  F00A         	goto	l48
  2388   001406                     u620:
  2389   001406                     
  2390                           ;calibration.c: 16:                 LATHbits.LATH3 = 1;
  2391   001406  8680               	bsf	128,3,c	;volatile
  2392                           
  2393                           ;calibration.c: 17:                 LATDbits.LATD7 = 1;
  2394   001408  8E7C               	bsf	124,7,c	;volatile
  2395   00140A                     
  2396                           ;calibration.c: 18:                 _delay((unsigned long)((1000)*(64000000/4000.0)));
  2397   00140A  0E52               	movlw	82
  2398   00140C  6E03               	movwf	(??_adjust_calibration+1)^0,c
  2399   00140E  0E2B               	movlw	43
  2400   001410  6E02               	movwf	??_adjust_calibration^0,c
  2401   001412  0E00               	movlw	0
  2402   001414                     u1027:
  2403   001414  2EE8               	decfsz	wreg,f,c
  2404   001416  D7FE               	bra	u1027
  2405   001418  2E02               	decfsz	??_adjust_calibration^0,f,c
  2406   00141A  D7FC               	bra	u1027
  2407   00141C  2E03               	decfsz	(??_adjust_calibration+1)^0,f,c
  2408   00141E  D7FA               	bra	u1027
  2409   001420  D000               	nop2	
  2410   001422                     
  2411                           ;calibration.c: 19:                 LATHbits.LATH3 = 0;
  2412   001422  9680               	bcf	128,3,c	;volatile
  2413   001424                     
  2414                           ;calibration.c: 20:                 LATDbits.LATD7 = 0;
  2415   001424  9E7C               	bcf	124,7,c	;volatile
  2416                           
  2417                           ;calibration.c: 21:                 break;
  2418   001426  EF81  F00A         	goto	l54
  2419   00142A                     l48:
  2420                           
  2421                           ;calibration.c: 24:                 if(!PORTFbits.RF2){
  2422   00142A  B48E               	btfsc	142,2,c	;volatile
  2423   00142C  EF1A  F00A         	goto	u631
  2424   001430  EF1C  F00A         	goto	u630
  2425   001434                     u631:
  2426   001434  EF48  F00A         	goto	l1472
  2427   001438                     u630:
  2428   001438                     
  2429                           ;calibration.c: 25:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  2430   001438  0E11               	movlw	17
  2431   00143A  6E03               	movwf	(??_adjust_calibration+1)^0,c
  2432   00143C  0E3C               	movlw	60
  2433   00143E  6E02               	movwf	??_adjust_calibration^0,c
  2434   001440  0ECB               	movlw	203
  2435   001442                     u1037:
  2436   001442  2EE8               	decfsz	wreg,f,c
  2437   001444  D7FE               	bra	u1037
  2438   001446  2E02               	decfsz	??_adjust_calibration^0,f,c
  2439   001448  D7FC               	bra	u1037
  2440   00144A  2E03               	decfsz	(??_adjust_calibration+1)^0,f,c
  2441   00144C  D7FA               	bra	u1037
  2442   00144E  0000               	nop	
  2443   001450                     
  2444                           ;calibration.c: 26:                     *calibration_label = *calibration_label + 5;
  2445   001450  5001               	movf	adjust_calibration@calibration_label^0,w,c
  2446   001452  6ED9               	movwf	fsr2l,c
  2447   001454  6ADA               	clrf	fsr2h,c
  2448   001456  CFDE F002          	movff	postinc2,??_adjust_calibration
  2449   00145A  CFDD F003          	movff	postdec2,??_adjust_calibration+1
  2450   00145E  0E05               	movlw	5
  2451   001460  2602               	addwf	??_adjust_calibration^0,f,c
  2452   001462  0E00               	movlw	0
  2453   001464  2203               	addwfc	(??_adjust_calibration+1)^0,f,c
  2454   001466  5001               	movf	adjust_calibration@calibration_label^0,w,c
  2455   001468  6ED9               	movwf	fsr2l,c
  2456   00146A  6ADA               	clrf	fsr2h,c
  2457   00146C  C002  FFDE         	movff	??_adjust_calibration,postinc2
  2458   001470  C003  FFDD         	movff	??_adjust_calibration+1,postdec2
  2459   001474                     
  2460                           ;calibration.c: 27:                     LATDbits.LATD7 = 1;
  2461   001474  8E7C               	bsf	124,7,c	;volatile
  2462   001476                     
  2463                           ;calibration.c: 28:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  2464   001476  0E11               	movlw	17
  2465   001478  6E03               	movwf	(??_adjust_calibration+1)^0,c
  2466   00147A  0E3C               	movlw	60
  2467   00147C  6E02               	movwf	??_adjust_calibration^0,c
  2468   00147E  0ECB               	movlw	203
  2469   001480                     u1047:
  2470   001480  2EE8               	decfsz	wreg,f,c
  2471   001482  D7FE               	bra	u1047
  2472   001484  2E02               	decfsz	??_adjust_calibration^0,f,c
  2473   001486  D7FC               	bra	u1047
  2474   001488  2E03               	decfsz	(??_adjust_calibration+1)^0,f,c
  2475   00148A  D7FA               	bra	u1047
  2476   00148C  0000               	nop	
  2477   00148E                     
  2478                           ;calibration.c: 29:                     LATDbits.LATD7 = 0;
  2479   00148E  9E7C               	bcf	124,7,c	;volatile
  2480   001490                     l1472:
  2481                           
  2482                           ;calibration.c: 32:                 if(!PORTFbits.RF3){
  2483   001490  B68E               	btfsc	142,3,c	;volatile
  2484   001492  EF4D  F00A         	goto	u641
  2485   001496  EF4F  F00A         	goto	u640
  2486   00149A                     u641:
  2487   00149A  EF7F  F00A         	goto	l45
  2488   00149E                     u640:
  2489   00149E                     
  2490                           ;calibration.c: 33:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  2491   00149E  0E11               	movlw	17
  2492   0014A0  6E03               	movwf	(??_adjust_calibration+1)^0,c
  2493   0014A2  0E3C               	movlw	60
  2494   0014A4  6E02               	movwf	??_adjust_calibration^0,c
  2495   0014A6  0ECB               	movlw	203
  2496   0014A8                     u1057:
  2497   0014A8  2EE8               	decfsz	wreg,f,c
  2498   0014AA  D7FE               	bra	u1057
  2499   0014AC  2E02               	decfsz	??_adjust_calibration^0,f,c
  2500   0014AE  D7FC               	bra	u1057
  2501   0014B0  2E03               	decfsz	(??_adjust_calibration+1)^0,f,c
  2502   0014B2  D7FA               	bra	u1057
  2503   0014B4  0000               	nop	
  2504   0014B6                     
  2505                           ;calibration.c: 34:                     *calibration_label = *calibration_label - 5;
  2506   0014B6  5001               	movf	adjust_calibration@calibration_label^0,w,c
  2507   0014B8  6ED9               	movwf	fsr2l,c
  2508   0014BA  6ADA               	clrf	fsr2h,c
  2509   0014BC  CFDE F002          	movff	postinc2,??_adjust_calibration
  2510   0014C0  CFDD F003          	movff	postdec2,??_adjust_calibration+1
  2511   0014C4  0EFB               	movlw	251
  2512   0014C6  2402               	addwf	??_adjust_calibration^0,w,c
  2513   0014C8  6E04               	movwf	(??_adjust_calibration+2)^0,c
  2514   0014CA  0EFF               	movlw	255
  2515   0014CC  2003               	addwfc	(??_adjust_calibration+1)^0,w,c
  2516   0014CE  6E05               	movwf	(??_adjust_calibration+3)^0,c
  2517   0014D0  5001               	movf	adjust_calibration@calibration_label^0,w,c
  2518   0014D2  6ED9               	movwf	fsr2l,c
  2519   0014D4  6ADA               	clrf	fsr2h,c
  2520   0014D6  C004  FFDE         	movff	??_adjust_calibration+2,postinc2
  2521   0014DA  C005  FFDD         	movff	??_adjust_calibration+3,postdec2
  2522   0014DE                     
  2523                           ;calibration.c: 35:                     LATHbits.LATH3 = 1;
  2524   0014DE  8680               	bsf	128,3,c	;volatile
  2525   0014E0                     
  2526                           ;calibration.c: 36:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  2527   0014E0  0E11               	movlw	17
  2528   0014E2  6E03               	movwf	(??_adjust_calibration+1)^0,c
  2529   0014E4  0E3C               	movlw	60
  2530   0014E6  6E02               	movwf	??_adjust_calibration^0,c
  2531   0014E8  0ECB               	movlw	203
  2532   0014EA                     u1067:
  2533   0014EA  2EE8               	decfsz	wreg,f,c
  2534   0014EC  D7FE               	bra	u1067
  2535   0014EE  2E02               	decfsz	??_adjust_calibration^0,f,c
  2536   0014F0  D7FC               	bra	u1067
  2537   0014F2  2E03               	decfsz	(??_adjust_calibration+1)^0,f,c
  2538   0014F4  D7FA               	bra	u1067
  2539   0014F6  0000               	nop	
  2540   0014F8                     
  2541                           ;calibration.c: 37:                     LATHbits.LATH3 = 0;
  2542   0014F8  9680               	bcf	128,3,c	;volatile
  2543   0014FA  EFDB  F009         	goto	l44
  2544   0014FE                     l45:
  2545   0014FE  EFDB  F009         	goto	l44
  2546   001502                     l54:
  2547   001502  0012               	return		;funcret
  2548   001504                     __end_of_adjust_calibration:
  2549                           	callstack 0
  2550                           
  2551                           	psect	smallconst
  2552   000E00                     __psmallconst:
  2553                           	callstack 0
  2554   000E00  00                 	db	0
  2555   000E01  00                 	db	0	; dummy byte at the end
  2556   000000                     
  2557                           	psect	rparam
  2558   000000                     
  2559                           	psect	config
  2560                           
  2561                           ;Config register CONFIG1L @ 0x300000
  2562                           ;	External Oscillator mode Selection bits
  2563                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2564                           ;	Power-up default value for COSC bits
  2565                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2566   300000                     	org	3145728
  2567   300000  AA                 	db	170
  2568                           
  2569                           ;Config register CONFIG1H @ 0x300001
  2570                           ;	unspecified, using default values
  2571                           ;	Clock Out Enable bit
  2572                           ;	CLKOUTEN = 0x1, unprogrammed default
  2573                           ;	Clock Switch Enable bit
  2574                           ;	CSWEN = 0x1, unprogrammed default
  2575                           ;	Fail-Safe Clock Monitor Enable bit
  2576                           ;	FCMEN = 0x1, unprogrammed default
  2577   300001                     	org	3145729
  2578   300001  FF                 	db	255
  2579                           
  2580                           ;Config register CONFIG3L @ 0x300004
  2581                           ;	WDT Period Select bits
  2582                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2583                           ;	WDT operating mode
  2584                           ;	WDTE = OFF, WDT Disabled
  2585   300004                     	org	3145732
  2586   300004  9F                 	db	159
  2587                           
  2588                           ;Config register CONFIG3H @ 0x300005
  2589                           ;	unspecified, using default values
  2590                           ;	WDT Window Select bits
  2591                           ;	WDTCWS = 0x7, unprogrammed default
  2592                           ;	WDT input clock selector
  2593                           ;	WDTCCS = 0x7, unprogrammed default
  2594   300005                     	org	3145733
  2595   300005  FF                 	db	255
  2596                           tosu	equ	0xFFF
  2597                           tosh	equ	0xFFE
  2598                           tosl	equ	0xFFD
  2599                           stkptr	equ	0xFFC
  2600                           pclatu	equ	0xFFB
  2601                           pclath	equ	0xFFA
  2602                           pcl	equ	0xFF9
  2603                           tblptru	equ	0xFF8
  2604                           tblptrh	equ	0xFF7
  2605                           tblptrl	equ	0xFF6
  2606                           tablat	equ	0xFF5
  2607                           prodh	equ	0xFF4
  2608                           prodl	equ	0xFF3
  2609                           indf0	equ	0xFEF
  2610                           postinc0	equ	0xFEE
  2611                           postdec0	equ	0xFED
  2612                           preinc0	equ	0xFEC
  2613                           plusw0	equ	0xFEB
  2614                           fsr0h	equ	0xFEA
  2615                           fsr0l	equ	0xFE9
  2616                           wreg	equ	0xFE8
  2617                           indf1	equ	0xFE7
  2618                           postinc1	equ	0xFE6
  2619                           postdec1	equ	0xFE5
  2620                           preinc1	equ	0xFE4
  2621                           plusw1	equ	0xFE3
  2622                           fsr1h	equ	0xFE2
  2623                           fsr1l	equ	0xFE1
  2624                           bsr	equ	0xFE0
  2625                           indf2	equ	0xFDF
  2626                           postinc2	equ	0xFDE
  2627                           postdec2	equ	0xFDD
  2628                           preinc2	equ	0xFDC
  2629                           plusw2	equ	0xFDB
  2630                           fsr2h	equ	0xFDA
  2631                           fsr2l	equ	0xFD9
  2632                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     32      60
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    adjust_calibration@calibration_label	PTR int  size(1) Largest target is 9
		 -> calibration(COMRAM[9]), 

    forward@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    forward@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    forward@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    forward@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    forward@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    forward@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    S78DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    S78DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    switch_calibration@calibration_index	PTR int  size(1) Largest target is 9
		 -> calibration(COMRAM[9]), 

    turnLEFT@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLEFT@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    turnLEFT@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    turnLEFT@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLEFT@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    turnLEFT@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    turnRIGHT@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRIGHT@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    turnRIGHT@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    turnRIGHT@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRIGHT@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    turnRIGHT@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 


Critical Paths under _main in COMRAM

    _main->_forward
    _main->_turnLEFT
    _main->_turnRIGHT
    _turnRIGHT->_setMotorPWM
    _turnLEFT->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   12874
                 _adjust_calibration
                            _forward
                    _initDCmotorsPWM
                 _switch_calibration
                           _turnLEFT
                          _turnRIGHT
 ---------------------------------------------------------------------------------
 (1) _turnRIGHT                                           16    14      2    4055
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLEFT                                            16    14      2    4055
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _switch_calibration                                   3     2      1     272
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                             16    14      2    4011
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2133
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _delay_ms_function                                    3     1      2     479
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     756
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _adjust_calibration                                   5     4      1     316
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adjust_calibration
   _forward
     ___awdiv
     _delay_ms_function
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _switch_calibration
   _turnLEFT
     ___awdiv
     _delay_ms_function
     _setMotorPWM
   _turnRIGHT
     ___awdiv
     _delay_ms_function
     _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      49        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRlllll      7A      0       0      47        0.0%
BITBIGSFRlllhhh     6C      0       0      42        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     20      3C       1       63.2%
BITBIGSFRlllhhh     54      0       0      40        0.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRlllhhh     2B      0       0      43        0.0%
BITBIGSFRhlll       17      0       0      36        0.0%
BITBIGSFRlllhhl     11      0       0      44        0.0%
BITBIGSFRhlhh        E      0       0      33        0.0%
BITBIGSFRllllh       A      0       0      46        0.0%
BITBIGSFRlhhh        5      0       0      37        0.0%
BITBIGSFRlllhhh      2      0       0      41        0.0%
BITBIGSFRhllh        2      0       0      35        0.0%
BITBIGSFRlhll        2      0       0      38        0.0%
BITBIGSFRhlhl        1      0       0      34        0.0%
BITBIGSFRlllhl       1      0       0      45        0.0%
BITBIGSFRllh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3C      48        0.0%
DATA                 0      0      3C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 21:33:00 2024

                                 l44 13B6                                   l45 14FE  
                                 l54 1502                                   l62 17A6  
                                 l48 142A                                   l57 16FA  
                                 l58 1764                         ___awdiv@sign 0006  
                ___wmul@multiplicand 0003                                  l123 183A  
                                l126 18CA                                  l150 11B4  
                                l136 13B4                                  l129 18DC  
                                l241 1902                                  l172 10FC  
                                l164 1050                                  l158 1260  
                                l238 1632                                  l186 0F7E  
                                l178 0ED2                                  l472 16F8  
                                l732 18A6                                  l739 18AE  
                                u500 18DC                                  u501 18D8  
                                u510 127C                                  u511 1278  
                                u600 13D2                                  u520 1338  
                                u601 13CE                                  u521 1334  
                                u610 13F8                                  u530 1648  
                                u611 13F4                                  u531 1644  
                                u620 1406                                  u540 1662  
                                u700 1210                                  u621 1402  
                                u541 165E                                  u701 120C  
                                u630 1438                                  u550 1688  
                                u470 1856                                  u710 124A  
                                u631 1434                                  u551 1684  
                                u471 1852                                  u711 1246  
                                u640 149E                                  u560 16A6  
                                u480 1874                                  u720 1260  
                                u800 0EF6                                  u641 149A  
                                u561 16A2                                  u481 1870  
                                u721 125C                                  u801 0EF2  
                                u570 16C2                                  u490 1890  
                                u650 1708                                  u730 1032  
                                u810 0F10                                  u571 16BE  
                                u491 188C                                  u651 1704  
                                u731 102E                                  u811 0F0C  
                                u580 16E8                                  u660 1772  
                                u740 1074                                  u820 0F2E  
                                u900 15CE                                  u581 16E4  
                                u661 176E                                  u741 1070  
                                u821 0F2A                                  u901 15CA  
                                u590 13C4                                  u670 1196  
                                u750 108E                                  u830 0F68  
                                u910 15FE                                  u591 13C0  
                                u671 1192                                  u751 108A  
                                u831 0F64                                  u911 15FA  
                                u680 11D8                                  u760 10AC  
                                u840 0F7E                                  u920 162E  
                                u681 11D4                                  u761 10A8  
                                u841 0F7A                                  u921 162A  
                                u690 11F2                                  u770 10E6  
                                u691 11EE                                  u771 10E2  
                                u780 10FC                                  u781 10F8  
                                u790 0EB4                                  u791 0EB0  
                                u937 0EC6                                  u890 159E  
                                u947 1044                                  u891 159A  
                                u957 1712                                  u967 1750  
                                u977 177C                                  u987 1796  
                                u997 11A8                                  wreg 0FE8  
         __end_of_adjust_calibration 1504                                 l1400 1636  
                               l1410 1662                                 l1402 163A  
                               l1420 1690                                 l1412 166A  
                               l1404 1648                                 l1500 17A8  
                               l1430 16CA                                 l1422 1698  
                               l1414 166E                                 l1406 1650  
                               l1350 18DE                                 l1510 1810  
                               l1502 17B8                                 l1440 16F0  
                               l1432 16CC                                 l1424 16A6  
                               l1416 1676                                 l1408 1654  
                               l1360 1856                                 l1352 18FA  
                               l1520 182A                                 l1512 1812  
                               l1504 17DE                                 l1600 108E  
                               l1450 13F8                                 l1434 16D2  
                               l1426 16AC                                 l1418 1688  
                               l1370 1890                                 l1362 185E  
                               l1530 1108                                 l1522 1834  
                               l1514 181C                                 l1506 17E2  
                               l1610 10C4                                 l1602 1096  
                               l1452 1406                                 l1444 13C4  
                               l1428 16C2                                 l1436 16D8  
                               l1380 18B4                                 l1372 1898  
                               l1364 1866                                 l1356 183C  
                               l1540 1168                                 l1532 1124  
                               l1524 1836                                 l1516 181E  
                               l1508 1806                                 l1604 10AC  
                               l1612 10D0                                 l1620 0E26  
                               l1700 1538                                 l1470 148E  
                               l1462 1438                                 l1454 140A  
                               l1446 13D2                                 l1438 16E8  
                               l1382 18C4                                 l1374 189A  
                               l1366 1874                                 l1358 1844  
                               l1390 12DC                                 l1550 11B0  
                               l1542 1174                                 l1534 1130  
                               l1526 1838                                 l1518 1828  
                               l1614 10E6                                 l1606 10B4  
                               l1630 0E7E                                 l1622 0E26  
                               l1710 1558                                 l1702 153C  
                               l1480 14E0                                 l1464 1450  
                               l1472 1490                                 l1456 1422  
                               l1448 13EA                                 l1376 18A0  
                               l1368 187A                                 l1392 12E0  
                               l1384 1262                                 l1560 1218  
                               l1552 11DC                                 l1536 1158  
                               l1544 1178                                 l1528 1100  
                               l1608 10BC                                 l1640 0EC0  
                               l1632 0E86                                 l1624 0E42  
                               l1616 0E04                                 l1720 1562  
                               l1712 155A                                 l1704 1540  
                               l1482 14F8                                 l1474 149E  
                               l1466 1474                                 l1458 1424  
                               l1378 18B0                                 l1394 131E  
                               l1386 127C                                 l1562 1220  
                               l1554 11F2                                 l1546 1196  
                               l1538 1160                                 l1490 1746  
                               l1570 0F82                                 l1650 0F2E  
                               l1642 0ECE                                 l1634 0E92  
                               l1626 0E4E                                 l1618 0E1E  
                               l1730 1572                                 l1722 1566  
                               l1714 155C                                 l1706 1548  
                               l1476 14B6                                 l1468 1476  
                               l1396 1338                                 l1388 12CA  
                               l1564 1228                                 l1556 11FA  
                               l1548 11A2                                 l1492 175E  
                               l1484 1708                                 l1580 0FCC  
                               l1572 0F9C                                 l1660 0F68  
                               l1652 0F36                                 l1644 0EFA  
                               l1628 0E76                                 l1636 0E96  
                               l1740 1586                                 l1732 1576  
                               l1724 1568                                 l1716 155E  
                               l1708 1550                                 l1478 14DE  
                               l1398 1378                                 l1558 1210  
                               l1566 1234                                 l1494 1772  
                               l1486 1720                                 l1582 0FF4  
                               l1590 1014                                 l1574 0FA4  
                               l1654 0F3E                                 l1646 0F10  
                               l1638 0EB4                                 l1750 15B4  
                               l1742 158A                                 l1734 157A  
                               l1726 156A                                 l1718 1560  
                               l1568 124A                                 l1496 178A  
                               l1488 1744                                 l1592 1032  
                               l1584 0FFC                                 l1576 0FA4  
                               l1656 0F46                                 l1648 0F18  
                               l1760 15EC                                 l1752 15BC  
                               l1744 158E                                 l1736 157E  
                               l1728 156E                                 l1498 17A4  
                               l1594 103E                                 l1586 1004  
                               l1578 0FC0                                 l1658 0F52  
                               l1770 162E                                 l1762 15FE  
                               l1754 15CE                                 l1746 159E  
                               l1738 1582                                 l1690 1518  
                               l1682 1504                                 l1596 104C  
                               l1588 1010                                 l1764 1606  
                               l1756 15D6                                 l1748 15A6  
                               l1692 151C                                 l1684 1504  
                               l1598 1078                                 l1766 1614  
                               l1758 15E4                                 l1694 1524  
                               l1686 1510                                 l1768 161C  
                               l1696 152C                                 l1688 1514  
                               l1698 1534                                 u1007 18BA  
                               u1017 13DC                                 u1027 1414  
                               u1037 1442                                 u1047 1480  
                               u1057 14A8                                 u1067 14EA  
                               _T2PR 0FBC                                 _main 1504  
                               _temp 003C                                 fsr1h 0FE2  
                               fsr2h 0FDA                                 indf1 0FE7  
                               indf2 0FDF                                 fsr1l 0FE1  
                               fsr2l 0FD9                                 prodh 0FF4  
                               prodl 0FF3                                 start 0000  
                       ___param_bank 0000                                ?_main 0001  
                    __end_of___awdiv 16FA                      ___awdiv@divisor 0003  
                    __end_of___lwdiv 18B0                      ___awdiv@counter 0005  
                    __end_of_forward 1262                                tablat 0FF5  
                              status 0FD8                   _switch_calibration 16FA  
                    __initialization 1904                         __end_of_main 1636  
                ?_switch_calibration 0001                               ??_main 0021  
                      __activetblptr 0000                         ?_setMotorPWM 000E  
                             _CCPR1H 0FAA                               _CCPR2H 0FA6  
                             _CCPR3H 0F25                               _CCPR4H 0F21  
                   ___awdiv@dividend 0001                 ??_switch_calibration 0002  
                             _RE2PPS 0E74                               _RC7PPS 0E69  
                             _RE4PPS 0E76                               _RG6PPS 0E88  
                   forward@max_power 001D                         _CCPTMRS0bits 0FAD  
                             ___wmul 18DE                            ??___awdiv 0005  
                          ??___lwdiv 000B        delay_ms_function@milliseconds 0001  
                             clear_0 191C                     ___awdiv@quotient 0007  
                             _motorL 002A                               _motorR 0021  
                             isa$std 0001                         __pdataCOMRAM 003C  
                          ??_forward 0015                         __mediumconst 0000  
                             tblptrh 0FF7                               tblptrl 0FF6  
                             tblptru 0FF8                    ??_initDCmotorsPWM 0003  
                   __end_of_turnLEFT 10FE                           __accesstop 0060  
            __end_of__initialization 1922                        ___rparam_used 0001  
                     __pcstackCOMRAM 0001                    forward@delay_time 001F  
                       _T2CLKCONbits 0FBF                   _adjust_calibration 13B6  
                            ?___wmul 0001                  ?_adjust_calibration 0001  
                  _delay_ms_function 18B0                   ?_delay_ms_function 0001  
                ??_delay_ms_function 0003                 ??_adjust_calibration 0002  
       turnLEFT@rotation_calibration 0018                              __Hparam 0000  
                            __Lparam 0000                              ___awdiv 1636  
                            ___lwdiv 183C                         __psmallconst 0E00  
                          ?_turnLEFT 0013            __end_of_delay_ms_function 18DE  
                            __pcinit 1904                              __ramtop 0E00  
                            __ptext0 1504                              __ptext1 0E02  
                            __ptext2 0F80                              __ptext3 16FA  
                            __ptext4 17A8                              __ptext5 10FE  
                            __ptext6 1262                              __ptext7 18DE  
                            __ptext8 183C                              __ptext9 18B0  
                          _T2CONbits 0FBD                              _forward 10FE  
                          _T2HLTbits 0FBE                 end_of_initialization 1922  
                            postdec2 0FDD                              postinc0 0FEE  
                            postinc2 0FDE                           ??_turnLEFT 0015  
                  __end_of_turnRIGHT 0F80                      _initDCmotorsPWM 17A8  
                 turnRIGHT@max_power 001D                            _PORTFbits 0F8E  
                 setMotorPWM@negDuty 0012                   setMotorPWM@posDuty 0011  
                          _TRISCbits 0F83                            _TRISDbits 0F84  
                          _TRISEbits 0F85                            _TRISFbits 0F86  
                          _TRISGbits 0F87                            _TRISHbits 0F88  
adjust_calibration@calibration_label 0001  switch_calibration@calibration_index 0001  
                        _CCP1CONbits 0FAB                          _CCP2CONbits 0FA7  
                        _CCP3CONbits 0F26          forward@Distance_Calibration 0018  
                        _CCP4CONbits 0F22                       __end_of___wmul 1904  
                      __pidataCOMRAM 1928                  start_initialization 1904  
                 turnLEFT@delay_time 001F              __end_of_initDCmotorsPWM 183C  
                           ??___wmul 0005                          _calibration 0033  
                        __pbssCOMRAM 0021                     ___lwdiv@dividend 0007  
                        turnRIGHT@mL 0013                          turnRIGHT@mR 0014  
                           ?___awdiv 0001                             ?___lwdiv 0007  
                        __smallconst 0E00                             ?_forward 0013  
                      ??_setMotorPWM 000F                     ___lwdiv@quotient 000B  
           initDCmotorsPWM@PWMperiod 0001                       ___wmul@product 0005  
                           _LATCbits 0F7B                             _LATDbits 0F7C  
                           _LATEbits 0F7D                             _LATGbits 0F7F  
                           _LATHbits 0F80                     ?_initDCmotorsPWM 0001  
                  ___wmul@multiplier 0001                         setMotorPWM@m 000E  
      turnRIGHT@rotation_calibration 0018                            _turnRIGHT 0E02  
                __end_of_setMotorPWM 13B6                             __Hrparam 0000  
                           __Lrparam 0000                            forward@mL 0013  
                          forward@mR 0014                           _ANSELFbits 0EB4  
                         turnLEFT@mL 0013                           turnLEFT@mR 0014  
                         ?_turnRIGHT 0013                      ___lwdiv@divisor 0009  
                         turnRIGHT@i 0019                           turnRIGHT@j 001B  
         __end_of_switch_calibration 17A8                      ___lwdiv@counter 000D  
                           __ptext10 1636                             __ptext11 13B6  
                  turnLEFT@max_power 001D                             isa$xinst 0000  
                           _turnLEFT 0F80                  turnRIGHT@delay_time 001F  
                           forward@i 0019                             forward@j 001B  
                        _setMotorPWM 1262                            turnLEFT@i 0019  
                          turnLEFT@j 001B                          ??_turnRIGHT 0015  
