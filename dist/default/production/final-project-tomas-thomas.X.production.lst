

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 21:38:35 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Generated 21/07/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F67K40 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61   000000                     
    62                           	psect	idataCOMRAM
    63   001944                     __pidataCOMRAM:
    64                           	callstack 0
    65                           
    66                           ;initializer for _temp
    67   001944  07                 	db	7
    68   000000                     _TRISFbits	set	3974
    69   000000                     _TRISDbits	set	3972
    70   000000                     _TRISGbits	set	3975
    71   000000                     _RC7PPS	set	3689
    72   000000                     _RE2PPS	set	3700
    73   000000                     _LATCbits	set	3963
    74   000000                     _LATDbits	set	3964
    75   000000                     _LATHbits	set	3968
    76   000000                     _PORTFbits	set	3982
    77   000000                     _T2PR	set	4028
    78   000000                     _T2CONbits	set	4029
    79   000000                     _CCPR2H	set	4006
    80   000000                     _CCPR1H	set	4010
    81   000000                     _TRISCbits	set	3971
    82   000000                     _TRISEbits	set	3973
    83   000000                     _LATGbits	set	3967
    84   000000                     _LATEbits	set	3965
    85   000000                     _TRISHbits	set	3976
    86   000000                     _RE4PPS	set	3702
    87   000000                     _RG6PPS	set	3720
    88   000000                     _ANSELFbits	set	3764
    89   000000                     _CCPR4H	set	3873
    90   000000                     _CCPR3H	set	3877
    91   000000                     _T2CLKCONbits	set	4031
    92   000000                     _T2HLTbits	set	4030
    93   000000                     _CCP1CONbits	set	4011
    94   000000                     _CCPTMRS0bits	set	4013
    95   000000                     _CCP2CONbits	set	4007
    96   000000                     _CCP3CONbits	set	3878
    97   000000                     _CCP4CONbits	set	3874
    98                           
    99                           ; #config settings
   100                           
   101                           	psect	cinit
   102   001920                     __pcinit:
   103                           	callstack 0
   104   001920                     start_initialization:
   105                           	callstack 0
   106   001920                     __initialization:
   107                           	callstack 0
   108                           
   109                           ; Initialize objects allocated to COMRAM (1 bytes)
   110                           ; load TBLPTR registers with __pidataCOMRAM
   111   001920  0E44               	movlw	low __pidataCOMRAM
   112   001922  6EF6               	movwf	tblptrl,c
   113   001924  0E19               	movlw	high __pidataCOMRAM
   114   001926  6EF7               	movwf	tblptrh,c
   115   001928  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   116   00192A  6EF8               	movwf	tblptru,c
   117   00192C  0009               	tblrd		*+	;fetch initializer
   118   00192E  CFF5 F03C          	movff	tablat,__pdataCOMRAM
   119                           
   120                           ; Clear objects allocated to COMRAM (27 bytes)
   121   001932  EE00  F021         	lfsr	0,__pbssCOMRAM
   122   001936  0E1B               	movlw	27
   123   001938                     clear_0:
   124   001938  6AEE               	clrf	postinc0,c
   125   00193A  06E8               	decf	wreg,f,c
   126   00193C  E1FD               	bnz	clear_0
   127   00193E                     end_of_initialization:
   128                           	callstack 0
   129   00193E                     __end_of__initialization:
   130                           	callstack 0
   131   00193E  0100               	movlb	0
   132   001940  EF90  F00A         	goto	_main	;jump to C main() function
   133                           
   134                           	psect	bssCOMRAM
   135   000021                     __pbssCOMRAM:
   136                           	callstack 0
   137   000021                     _motorR:
   138                           	callstack 0
   139   000021                     	ds	9
   140   00002A                     _motorL:
   141                           	callstack 0
   142   00002A                     	ds	9
   143   000033                     _calibration:
   144                           	callstack 0
   145   000033                     	ds	9
   146                           
   147                           	psect	dataCOMRAM
   148   00003C                     __pdataCOMRAM:
   149                           	callstack 0
   150   00003C                     _temp:
   151                           	callstack 0
   152   00003C                     	ds	1
   153                           
   154                           	psect	cstackCOMRAM
   155   000001                     __pcstackCOMRAM:
   156                           	callstack 0
   157   000001                     ?___wmul:
   158                           	callstack 0
   159   000001                     ?___awdiv:
   160                           	callstack 0
   161   000001                     adjust_calibration@calibration_label:
   162                           	callstack 0
   163   000001                     switch_calibration@calibration_index:
   164                           	callstack 0
   165   000001                     initDCmotorsPWM@PWMperiod:
   166                           	callstack 0
   167   000001                     delay_ms_function@milliseconds:
   168                           	callstack 0
   169   000001                     ___wmul@multiplier:
   170                           	callstack 0
   171   000001                     ___awdiv@dividend:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0x0
   175   000001                     	ds	1
   176   000002                     ??_adjust_calibration:
   177   000002                     ??_switch_calibration:
   178                           
   179                           ; 1 bytes @ 0x1
   180   000002                     	ds	1
   181   000003                     ??_delay_ms_function:
   182   000003                     ___wmul@multiplicand:
   183                           	callstack 0
   184   000003                     ___awdiv@divisor:
   185                           	callstack 0
   186                           
   187                           ; 2 bytes @ 0x2
   188   000003                     	ds	2
   189   000005                     ___awdiv@counter:
   190                           	callstack 0
   191   000005                     ___wmul@product:
   192                           	callstack 0
   193                           
   194                           ; 2 bytes @ 0x4
   195   000005                     	ds	1
   196   000006                     ___awdiv@sign:
   197                           	callstack 0
   198                           
   199                           ; 1 bytes @ 0x5
   200   000006                     	ds	1
   201   000007                     ?___lwdiv:
   202                           	callstack 0
   203   000007                     ___awdiv@quotient:
   204                           	callstack 0
   205   000007                     ___lwdiv@dividend:
   206                           	callstack 0
   207                           
   208                           ; 2 bytes @ 0x6
   209   000007                     	ds	2
   210   000009                     ___lwdiv@divisor:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x8
   214   000009                     	ds	2
   215   00000B                     ___lwdiv@quotient:
   216                           	callstack 0
   217                           
   218                           ; 2 bytes @ 0xA
   219   00000B                     	ds	2
   220   00000D                     ___lwdiv@counter:
   221                           	callstack 0
   222                           
   223                           ; 1 bytes @ 0xC
   224   00000D                     	ds	1
   225   00000E                     setMotorPWM@m:
   226                           	callstack 0
   227                           
   228                           ; 1 bytes @ 0xD
   229   00000E                     	ds	1
   230   00000F                     ??_setMotorPWM:
   231                           
   232                           ; 1 bytes @ 0xE
   233   00000F                     	ds	2
   234   000011                     setMotorPWM@posDuty:
   235                           	callstack 0
   236                           
   237                           ; 1 bytes @ 0x10
   238   000011                     	ds	1
   239   000012                     setMotorPWM@negDuty:
   240                           	callstack 0
   241                           
   242                           ; 1 bytes @ 0x11
   243   000012                     	ds	1
   244   000013                     forward@mL:
   245                           	callstack 0
   246   000013                     turnLEFT@mL:
   247                           	callstack 0
   248   000013                     turnRIGHT@mL:
   249                           	callstack 0
   250                           
   251                           ; 1 bytes @ 0x12
   252   000013                     	ds	1
   253   000014                     forward@mR:
   254                           	callstack 0
   255   000014                     turnLEFT@mR:
   256                           	callstack 0
   257   000014                     turnRIGHT@mR:
   258                           	callstack 0
   259                           
   260                           ; 1 bytes @ 0x13
   261   000014                     	ds	1
   262   000015                     ??_forward:
   263   000015                     ??_turnLEFT:
   264   000015                     ??_turnRIGHT:
   265                           
   266                           ; 1 bytes @ 0x14
   267   000015                     	ds	3
   268   000018                     forward@Distance_Calibration:
   269                           	callstack 0
   270   000018                     turnLEFT@rotation_calibration:
   271                           	callstack 0
   272   000018                     turnRIGHT@rotation_calibration:
   273                           	callstack 0
   274                           
   275                           ; 1 bytes @ 0x17
   276   000018                     	ds	1
   277   000019                     forward@i:
   278                           	callstack 0
   279   000019                     turnLEFT@i:
   280                           	callstack 0
   281   000019                     turnRIGHT@i:
   282                           	callstack 0
   283                           
   284                           ; 2 bytes @ 0x18
   285   000019                     	ds	2
   286   00001B                     forward@j:
   287                           	callstack 0
   288   00001B                     turnLEFT@j:
   289                           	callstack 0
   290   00001B                     turnRIGHT@j:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x1A
   294   00001B                     	ds	2
   295   00001D                     forward@max_power:
   296                           	callstack 0
   297   00001D                     turnLEFT@max_power:
   298                           	callstack 0
   299   00001D                     turnRIGHT@max_power:
   300                           	callstack 0
   301                           
   302                           ; 2 bytes @ 0x1C
   303   00001D                     	ds	2
   304   00001F                     forward@delay_time:
   305                           	callstack 0
   306   00001F                     turnLEFT@delay_time:
   307                           	callstack 0
   308   00001F                     turnRIGHT@delay_time:
   309                           	callstack 0
   310                           
   311                           ; 2 bytes @ 0x1E
   312   00001F                     	ds	2
   313   000021                     
   314                           ; 1 bytes @ 0x20
   315 ;;
   316 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   317 ;;
   318 ;; *************** function _main *****************
   319 ;; Defined at:
   320 ;;		line 16 in file "main.c"
   321 ;; Parameters:    Size  Location     Type
   322 ;;		None
   323 ;; Auto vars:     Size  Location     Type
   324 ;;  PWMperiod       2    0        unsigned int 
   325 ;; Return value:  Size  Location     Type
   326 ;;                  1    wreg      void 
   327 ;; Registers used:
   328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : 0/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   338 ;;Total ram usage:        0 bytes
   339 ;; Hardware stack levels required when called: 3
   340 ;; This function calls:
   341 ;;		_adjust_calibration
   342 ;;		_forward
   343 ;;		_initDCmotorsPWM
   344 ;;		_switch_calibration
   345 ;;		_turnLEFT
   346 ;;		_turnRIGHT
   347 ;; This function is called by:
   348 ;;		Startup code after reset
   349 ;; This function uses a non-reentrant model
   350 ;;
   351                           
   352                           	psect	text0
   353   001520                     __ptext0:
   354                           	callstack 0
   355   001520                     _main:
   356                           	callstack 28
   357   001520                     
   358                           ;main.c: 18:     initDCmotorsPWM(PWMperiod);
   359   001520  0E00               	movlw	0
   360   001522  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   361   001524  0E63               	movlw	99
   362   001526  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   363   001528  ECE2  F00B         	call	_initDCmotorsPWM	;wreg free
   364   00152C                     
   365                           ;main.c: 22:     motorL.power=0;
   366   00152C  0E00               	movlw	0
   367   00152E  6E2A               	movwf	_motorL^0,c
   368   001530                     
   369                           ;main.c: 23:     motorL.direction=1;
   370   001530  0E01               	movlw	1
   371   001532  6E2B               	movwf	(_motorL+1)^0,c
   372   001534                     
   373                           ;main.c: 24:     motorL.brakemode=1;
   374   001534  0E01               	movlw	1
   375   001536  6E2C               	movwf	(_motorL+2)^0,c
   376   001538                     
   377                           ;main.c: 25:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   378   001538  0EAA               	movlw	170
   379   00153A  6E2F               	movwf	(_motorL+5)^0,c
   380   00153C  0E0F               	movlw	15
   381   00153E  6E30               	movwf	(_motorL+6)^0,c
   382   001540                     
   383                           ;main.c: 26:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   384   001540  0EA6               	movlw	166
   385   001542  6E31               	movwf	(_motorL+7)^0,c
   386   001544  0E0F               	movlw	15
   387   001546  6E32               	movwf	(_motorL+8)^0,c
   388   001548                     
   389                           ;main.c: 27:     motorL.PWMperiod=PWMperiod;
   390   001548  0E00               	movlw	0
   391   00154A  6E2E               	movwf	(_motorL+4)^0,c
   392   00154C  0E63               	movlw	99
   393   00154E  6E2D               	movwf	(_motorL+3)^0,c
   394   001550                     
   395                           ;main.c: 29:     motorR.power=0;
   396   001550  0E00               	movlw	0
   397   001552  6E21               	movwf	_motorR^0,c
   398   001554                     
   399                           ;main.c: 30:     motorR.direction=1;
   400   001554  0E01               	movlw	1
   401   001556  6E22               	movwf	(_motorR+1)^0,c
   402   001558                     
   403                           ;main.c: 31:     motorR.brakemode=1;
   404   001558  0E01               	movlw	1
   405   00155A  6E23               	movwf	(_motorR+2)^0,c
   406   00155C                     
   407                           ;main.c: 32:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   408   00155C  0E25               	movlw	37
   409   00155E  6E26               	movwf	(_motorR+5)^0,c
   410   001560  0E0F               	movlw	15
   411   001562  6E27               	movwf	(_motorR+6)^0,c
   412   001564                     
   413                           ;main.c: 33:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   414   001564  0E21               	movlw	33
   415   001566  6E28               	movwf	(_motorR+7)^0,c
   416   001568  0E0F               	movlw	15
   417   00156A  6E29               	movwf	(_motorR+8)^0,c
   418   00156C                     
   419                           ;main.c: 34:     motorR.PWMperiod=PWMperiod;
   420   00156C  0E00               	movlw	0
   421   00156E  6E25               	movwf	(_motorR+4)^0,c
   422   001570  0E63               	movlw	99
   423   001572  6E24               	movwf	(_motorR+3)^0,c
   424   001574                     
   425                           ;main.c: 40:     TRISDbits.TRISD7 = 0;
   426   001574  9E84               	bcf	132,7,c	;volatile
   427   001576                     
   428                           ;main.c: 41:     LATDbits.LATD7 = 0;
   429   001576  9E7C               	bcf	124,7,c	;volatile
   430   001578                     
   431                           ;main.c: 44:     TRISHbits.TRISH3 = 0;
   432   001578  9688               	bcf	136,3,c	;volatile
   433   00157A                     
   434                           ;main.c: 45:     LATHbits.LATH3 = 0;
   435   00157A  9680               	bcf	128,3,c	;volatile
   436   00157C                     
   437                           ;main.c: 48:     TRISFbits.TRISF2=1;
   438   00157C  8486               	bsf	134,2,c	;volatile
   439   00157E                     
   440                           ;main.c: 49:     ANSELFbits.ANSELF2=0;
   441   00157E  010E               	movlb	14	; () banked
   442   001580  95B4               	bcf	180,2,b	;volatile
   443   001582                     
   444                           ; BSR set to: 14
   445                           ;main.c: 52:     TRISFbits.TRISF3=1;
   446   001582  8686               	bsf	134,3,c	;volatile
   447   001584                     
   448                           ; BSR set to: 14
   449                           ;main.c: 53:     ANSELFbits.ANSELF3=0;
   450   001584  97B4               	bcf	180,3,b	;volatile
   451   001586                     
   452                           ; BSR set to: 14
   453                           ;main.c: 57:     calibration.index = 1;
   454   001586  0E01               	movlw	1
   455   001588  6E33               	movwf	_calibration^0,c
   456   00158A                     
   457                           ; BSR set to: 14
   458                           ;main.c: 58:     calibration.over = 0;
   459   00158A  0E00               	movlw	0
   460   00158C  6E34               	movwf	(_calibration+1)^0,c
   461   00158E                     
   462                           ; BSR set to: 14
   463                           ;main.c: 64:     calibration.left_90 = 60;
   464   00158E  0E3C               	movlw	60
   465   001590  6E35               	movwf	(_calibration+2)^0,c
   466   001592                     
   467                           ; BSR set to: 14
   468                           ;main.c: 65:     calibration.right_90 = 10;
   469   001592  0E0A               	movlw	10
   470   001594  6E36               	movwf	(_calibration+3)^0,c
   471   001596                     
   472                           ; BSR set to: 14
   473                           ;main.c: 66:     calibration.left_135 = 60;
   474   001596  0E3C               	movlw	60
   475   001598  6E37               	movwf	(_calibration+4)^0,c
   476   00159A                     
   477                           ; BSR set to: 14
   478                           ;main.c: 67:     calibration.right_135 = 10;
   479   00159A  0E0A               	movlw	10
   480   00159C  6E38               	movwf	(_calibration+5)^0,c
   481   00159E                     
   482                           ; BSR set to: 14
   483                           ;main.c: 68:     calibration.forward = 10;
   484   00159E  0E0A               	movlw	10
   485   0015A0  6E39               	movwf	(_calibration+6)^0,c
   486   0015A2                     
   487                           ; BSR set to: 14
   488                           ;main.c: 69:     calibration.forward_motorL = 20;
   489   0015A2  0E14               	movlw	20
   490   0015A4  6E3A               	movwf	(_calibration+7)^0,c
   491   0015A6                     
   492                           ; BSR set to: 14
   493                           ;main.c: 70:     calibration.forward_motorR = 20;
   494   0015A6  0E14               	movlw	20
   495   0015A8  6E3B               	movwf	(_calibration+8)^0,c
   496   0015AA                     l1752:
   497                           
   498                           ;main.c: 81:         if(calibration.index == 1){
   499   0015AA  0433               	decf	_calibration^0,w,c
   500   0015AC  A4D8               	btfss	status,2,c
   501   0015AE  EFDB  F00A         	goto	u891
   502   0015B2  EFDD  F00A         	goto	u890
   503   0015B6                     u891:
   504   0015B6  EFEC  F00A         	goto	l1760
   505   0015BA                     u890:
   506   0015BA                     
   507                           ;main.c: 82:             adjust_calibration(&calibration.right_90);
   508   0015BA  0E36               	movlw	low (_calibration+3)
   509   0015BC  6E01               	movwf	adjust_calibration@calibration_label^0,c
   510   0015BE  ECE9  F009         	call	_adjust_calibration	;wreg free
   511   0015C2                     
   512                           ;main.c: 83:             turnRIGHT(calibration.right_90, &motorL, &motorR);
   513   0015C2  0E2A               	movlw	low _motorL
   514   0015C4  6E13               	movwf	turnRIGHT@mL^0,c
   515   0015C6  0E21               	movlw	low _motorR
   516   0015C8  6E14               	movwf	turnRIGHT@mR^0,c
   517   0015CA  5036               	movf	(_calibration+3)^0,w,c
   518   0015CC  ECC1  F007         	call	_turnRIGHT
   519   0015D0                     
   520                           ;main.c: 84:             switch_calibration(&calibration.index);
   521   0015D0  0E33               	movlw	low _calibration
   522   0015D2  6E01               	movwf	switch_calibration@calibration_index^0,c
   523   0015D4  EC8B  F00B         	call	_switch_calibration	;wreg free
   524   0015D8                     l1760:
   525                           
   526                           ;main.c: 88:         if(calibration.index == 2){
   527   0015D8  0E02               	movlw	2
   528   0015DA  1833               	xorwf	_calibration^0,w,c
   529   0015DC  A4D8               	btfss	status,2,c
   530   0015DE  EFF3  F00A         	goto	u901
   531   0015E2  EFF5  F00A         	goto	u900
   532   0015E6                     u901:
   533   0015E6  EF04  F00B         	goto	l1768
   534   0015EA                     u900:
   535   0015EA                     
   536                           ;main.c: 89:             adjust_calibration(&calibration.left_90);
   537   0015EA  0E35               	movlw	low (_calibration+2)
   538   0015EC  6E01               	movwf	adjust_calibration@calibration_label^0,c
   539   0015EE  ECE9  F009         	call	_adjust_calibration	;wreg free
   540   0015F2                     
   541                           ;main.c: 90:             turnLEFT(calibration.left_90, &motorL, &motorR);
   542   0015F2  0E2A               	movlw	low _motorL
   543   0015F4  6E13               	movwf	turnLEFT@mL^0,c
   544   0015F6  0E21               	movlw	low _motorR
   545   0015F8  6E14               	movwf	turnLEFT@mR^0,c
   546   0015FA  5035               	movf	(_calibration+2)^0,w,c
   547   0015FC  EC80  F008         	call	_turnLEFT
   548   001600                     
   549                           ;main.c: 91:             switch_calibration(&calibration.index);
   550   001600  0E33               	movlw	low _calibration
   551   001602  6E01               	movwf	switch_calibration@calibration_index^0,c
   552   001604  EC8B  F00B         	call	_switch_calibration	;wreg free
   553   001608                     l1768:
   554                           
   555                           ;main.c: 95:         if(calibration.index == 3){
   556   001608  0E03               	movlw	3
   557   00160A  1833               	xorwf	_calibration^0,w,c
   558   00160C  A4D8               	btfss	status,2,c
   559   00160E  EF0B  F00B         	goto	u911
   560   001612  EF0D  F00B         	goto	u910
   561   001616                     u911:
   562   001616  EF1C  F00B         	goto	l1776
   563   00161A                     u910:
   564   00161A                     
   565                           ;main.c: 96:             adjust_calibration(&calibration.forward);
   566   00161A  0E39               	movlw	low (_calibration+6)
   567   00161C  6E01               	movwf	adjust_calibration@calibration_label^0,c
   568   00161E  ECE9  F009         	call	_adjust_calibration	;wreg free
   569   001622                     
   570                           ;main.c: 97:             forward(calibration.forward, &motorL, &motorR);
   571   001622  0E2A               	movlw	low _motorL
   572   001624  6E13               	movwf	forward@mL^0,c
   573   001626  0E21               	movlw	low _motorR
   574   001628  6E14               	movwf	forward@mR^0,c
   575   00162A  5039               	movf	(_calibration+6)^0,w,c
   576   00162C  EC01  F007         	call	_forward
   577   001630                     
   578                           ;main.c: 98:             switch_calibration(&calibration.index);
   579   001630  0E33               	movlw	low _calibration
   580   001632  6E01               	movwf	switch_calibration@calibration_index^0,c
   581   001634  EC8B  F00B         	call	_switch_calibration	;wreg free
   582   001638                     l1776:
   583                           
   584                           ;main.c: 118:         if(calibration.index == 5){
   585   001638  0E05               	movlw	5
   586   00163A  1833               	xorwf	_calibration^0,w,c
   587   00163C  A4D8               	btfss	status,2,c
   588   00163E  EF23  F00B         	goto	u921
   589   001642  EF25  F00B         	goto	u920
   590   001646                     u921:
   591   001646  EFD5  F00A         	goto	l1752
   592   00164A                     u920:
   593   00164A                     
   594                           ;main.c: 119:             calibration.index = 1;
   595   00164A  0E01               	movlw	1
   596   00164C  6E33               	movwf	_calibration^0,c
   597   00164E  EF00  F000         	goto	start
   598   001652                     __end_of_main:
   599                           	callstack 0
   600                           
   601 ;; *************** function _turnRIGHT *****************
   602 ;; Defined at:
   603 ;;		line 206 in file "dc_motor_v1.c"
   604 ;; Parameters:    Size  Location     Type
   605 ;;  rotation_cal    1    wreg     unsigned char 
   606 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   607 ;;		 -> motorL(9), 
   608 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   609 ;;		 -> motorR(9), 
   610 ;; Auto vars:     Size  Location     Type
   611 ;;  rotation_cal    1   23[COMRAM] unsigned char 
   612 ;;  j               2   26[COMRAM] int 
   613 ;;  i               2   24[COMRAM] int 
   614 ;;  delay_time      2   30[COMRAM] int 
   615 ;;  max_power       2   28[COMRAM] int 
   616 ;;  acceleration    2    0        int 
   617 ;; Return value:  Size  Location     Type
   618 ;;                  1    wreg      void 
   619 ;; Registers used:
   620 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   621 ;; Tracked objects:
   622 ;;		On entry : 0/0
   623 ;;		On exit  : 0/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   626 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   627 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   628 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   629 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   630 ;;Total ram usage:       14 bytes
   631 ;; Hardware stack levels used: 1
   632 ;; Hardware stack levels required when called: 2
   633 ;; This function calls:
   634 ;;		___awdiv
   635 ;;		_delay_ms_function
   636 ;;		_setMotorPWM
   637 ;; This function is called by:
   638 ;;		_main
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           	psect	text1
   643   000F82                     __ptext1:
   644                           	callstack 0
   645   000F82                     _turnRIGHT:
   646                           	callstack 28
   647                           
   648                           ;incstack = 0
   649                           ;turnRIGHT@rotation_calibration stored from wreg
   650   000F82  6E18               	movwf	turnRIGHT@rotation_calibration^0,c
   651   000F84                     
   652                           ;dc_motor_v1.c: 207:     mL->direction = 1;
   653   000F84  5013               	movf	turnRIGHT@mL^0,w,c
   654   000F86  6ED9               	movwf	fsr2l,c
   655   000F88  6ADA               	clrf	fsr2h,c
   656   000F8A  0E01               	movlw	1
   657   000F8C  26D9               	addwf	fsr2l,f,c
   658   000F8E  0E01               	movlw	1
   659   000F90  6EDF               	movwf	indf2,c
   660                           
   661                           ;dc_motor_v1.c: 208:     mR->direction = 0;
   662   000F92  5014               	movf	turnRIGHT@mR^0,w,c
   663   000F94  6ED9               	movwf	fsr2l,c
   664   000F96  6ADA               	clrf	fsr2h,c
   665   000F98  0E01               	movlw	1
   666   000F9A  26D9               	addwf	fsr2l,f,c
   667   000F9C  6ADF               	clrf	indf2,c
   668   000F9E                     
   669                           ;dc_motor_v1.c: 210:    int max_power = 20;
   670   000F9E  0E00               	movlw	0
   671   000FA0  6E1E               	movwf	(turnRIGHT@max_power+1)^0,c
   672   000FA2  0E14               	movlw	20
   673   000FA4  6E1D               	movwf	turnRIGHT@max_power^0,c
   674   000FA6                     
   675                           ;dc_motor_v1.c: 212:     int delay_time = acceleration_time/max_power;
   676   000FA6  0E00               	movlw	0
   677   000FA8  6E02               	movwf	(___awdiv@dividend+1)^0,c
   678   000FAA  0E64               	movlw	100
   679   000FAC  6E01               	movwf	___awdiv@dividend^0,c
   680   000FAE  0E00               	movlw	0
   681   000FB0  6E04               	movwf	(___awdiv@divisor+1)^0,c
   682   000FB2  0E14               	movlw	20
   683   000FB4  6E03               	movwf	___awdiv@divisor^0,c
   684   000FB6  EC29  F00B         	call	___awdiv	;wreg free
   685   000FBA  C001  F01F         	movff	?___awdiv,turnRIGHT@delay_time
   686   000FBE  C002  F020         	movff	?___awdiv+1,turnRIGHT@delay_time+1
   687   000FC2                     
   688                           ;dc_motor_v1.c: 215:     for(int i=0; i< max_power; i++){
   689   000FC2  0E00               	movlw	0
   690   000FC4  6E1A               	movwf	(turnRIGHT@i+1)^0,c
   691   000FC6  0E00               	movlw	0
   692   000FC8  6E19               	movwf	turnRIGHT@i^0,c
   693   000FCA  EF0B  F008         	goto	l1644
   694   000FCE                     l1634:
   695                           
   696                           ;dc_motor_v1.c: 216:         mL->power = mL->power + 1;
   697   000FCE  5013               	movf	turnRIGHT@mL^0,w,c
   698   000FD0  6ED9               	movwf	fsr2l,c
   699   000FD2  6ADA               	clrf	fsr2h,c
   700   000FD4  5013               	movf	turnRIGHT@mL^0,w,c
   701   000FD6  6EE1               	movwf	fsr1l,c
   702   000FD8  6AE2               	clrf	fsr1h,c
   703   000FDA  50E7               	movf	indf1,w,c
   704   000FDC  6E15               	movwf	??_turnRIGHT^0,c
   705   000FDE  2815               	incf	??_turnRIGHT^0,w,c
   706   000FE0  6EDF               	movwf	indf2,c
   707                           
   708                           ;dc_motor_v1.c: 217:         mR->power = mR->power + 1 ;
   709   000FE2  5014               	movf	turnRIGHT@mR^0,w,c
   710   000FE4  6ED9               	movwf	fsr2l,c
   711   000FE6  6ADA               	clrf	fsr2h,c
   712   000FE8  5014               	movf	turnRIGHT@mR^0,w,c
   713   000FEA  6EE1               	movwf	fsr1l,c
   714   000FEC  6AE2               	clrf	fsr1h,c
   715   000FEE  50E7               	movf	indf1,w,c
   716   000FF0  6E15               	movwf	??_turnRIGHT^0,c
   717   000FF2  2815               	incf	??_turnRIGHT^0,w,c
   718   000FF4  6EDF               	movwf	indf2,c
   719   000FF6                     
   720                           ;dc_motor_v1.c: 218:         setMotorPWM(mR);
   721   000FF6  C014  F00E         	movff	turnRIGHT@mR,setMotorPWM@m
   722   000FFA  EC3F  F009         	call	_setMotorPWM	;wreg free
   723   000FFE                     
   724                           ;dc_motor_v1.c: 219:         setMotorPWM(mL);
   725   000FFE  C013  F00E         	movff	turnRIGHT@mL,setMotorPWM@m
   726   001002  EC3F  F009         	call	_setMotorPWM	;wreg free
   727   001006                     
   728                           ;dc_motor_v1.c: 220:         delay_ms_function(delay_time);
   729   001006  C01F  F001         	movff	turnRIGHT@delay_time,delay_ms_function@milliseconds
   730   00100A  C020  F002         	movff	turnRIGHT@delay_time+1,delay_ms_function@milliseconds+1
   731   00100E  EC66  F00C         	call	_delay_ms_function	;wreg free
   732   001012                     
   733                           ;dc_motor_v1.c: 221:     }
   734   001012  4A19               	infsnz	turnRIGHT@i^0,f,c
   735   001014  2A1A               	incf	(turnRIGHT@i+1)^0,f,c
   736   001016                     l1644:
   737   001016  501D               	movf	turnRIGHT@max_power^0,w,c
   738   001018  5C19               	subwf	turnRIGHT@i^0,w,c
   739   00101A  501A               	movf	(turnRIGHT@i+1)^0,w,c
   740   00101C  0A80               	xorlw	128
   741   00101E  6E15               	movwf	??_turnRIGHT^0,c
   742   001020  501E               	movf	(turnRIGHT@max_power+1)^0,w,c
   743   001022  0A80               	xorlw	128
   744   001024  5815               	subwfb	??_turnRIGHT^0,w,c
   745   001026  A0D8               	btfss	status,0,c
   746   001028  EF18  F008         	goto	u791
   747   00102C  EF1A  F008         	goto	u790
   748   001030                     u791:
   749   001030  EFE7  F007         	goto	l1634
   750   001034                     u790:
   751   001034                     
   752                           ;dc_motor_v1.c: 224:     for(int j=0; j<rotation_calibration; j++){
   753   001034  0E00               	movlw	0
   754   001036  6E1C               	movwf	(turnRIGHT@j+1)^0,c
   755   001038  0E00               	movlw	0
   756   00103A  6E1B               	movwf	turnRIGHT@j^0,c
   757   00103C  EF29  F008         	goto	l178
   758   001040                     l1648:
   759                           
   760                           ;dc_motor_v1.c: 225:         _delay((unsigned long)((10)*(64000000/4000.0)));
   761   001040  0ED0               	movlw	208
   762   001042  6E15               	movwf	??_turnRIGHT^0,c
   763   001044  0ECA               	movlw	202
   764   001046                     u937:
   765   001046  2EE8               	decfsz	wreg,f,c
   766   001048  D7FE               	bra	u937
   767   00104A  2E15               	decfsz	??_turnRIGHT^0,f,c
   768   00104C  D7FC               	bra	u937
   769   00104E                     
   770                           ;dc_motor_v1.c: 226:     }
   771   00104E  4A1B               	infsnz	turnRIGHT@j^0,f,c
   772   001050  2A1C               	incf	(turnRIGHT@j+1)^0,f,c
   773   001052                     l178:
   774   001052  5018               	movf	turnRIGHT@rotation_calibration^0,w,c
   775   001054  6E15               	movwf	??_turnRIGHT^0,c
   776   001056  6A16               	clrf	(??_turnRIGHT+1)^0,c
   777   001058  5015               	movf	??_turnRIGHT^0,w,c
   778   00105A  5C1B               	subwf	turnRIGHT@j^0,w,c
   779   00105C  501C               	movf	(turnRIGHT@j+1)^0,w,c
   780   00105E  0A80               	xorlw	128
   781   001060  6E17               	movwf	(??_turnRIGHT+2)^0,c
   782   001062  5016               	movf	(??_turnRIGHT+1)^0,w,c
   783   001064  0A80               	xorlw	128
   784   001066  5817               	subwfb	(??_turnRIGHT+2)^0,w,c
   785   001068  A0D8               	btfss	status,0,c
   786   00106A  EF39  F008         	goto	u801
   787   00106E  EF3B  F008         	goto	u800
   788   001072                     u801:
   789   001072  EF20  F008         	goto	l1648
   790   001076                     u800:
   791   001076  EF69  F008         	goto	l1666
   792   00107A                     l1652:
   793                           
   794                           ;dc_motor_v1.c: 230:         if(mR->power> 0 ){
   795   00107A  5014               	movf	turnRIGHT@mR^0,w,c
   796   00107C  6ED9               	movwf	fsr2l,c
   797   00107E  6ADA               	clrf	fsr2h,c
   798   001080  50DF               	movf	indf2,w,c
   799   001082  B4D8               	btfsc	status,2,c
   800   001084  EF46  F008         	goto	u811
   801   001088  EF48  F008         	goto	u810
   802   00108C                     u811:
   803   00108C  EF4C  F008         	goto	l1656
   804   001090                     u810:
   805   001090                     
   806                           ;dc_motor_v1.c: 231:             mR->power--;
   807   001090  5014               	movf	turnRIGHT@mR^0,w,c
   808   001092  6ED9               	movwf	fsr2l,c
   809   001094  6ADA               	clrf	fsr2h,c
   810   001096  06DF               	decf	indf2,f,c
   811   001098                     l1656:
   812                           
   813                           ;dc_motor_v1.c: 233:         if(mL->power> 0 ){
   814   001098  5013               	movf	turnRIGHT@mL^0,w,c
   815   00109A  6ED9               	movwf	fsr2l,c
   816   00109C  6ADA               	clrf	fsr2h,c
   817   00109E  50DF               	movf	indf2,w,c
   818   0010A0  B4D8               	btfsc	status,2,c
   819   0010A2  EF55  F008         	goto	u821
   820   0010A6  EF57  F008         	goto	u820
   821   0010AA                     u821:
   822   0010AA  EF5B  F008         	goto	l1660
   823   0010AE                     u820:
   824   0010AE                     
   825                           ;dc_motor_v1.c: 234:             mL->power--;
   826   0010AE  5013               	movf	turnRIGHT@mL^0,w,c
   827   0010B0  6ED9               	movwf	fsr2l,c
   828   0010B2  6ADA               	clrf	fsr2h,c
   829   0010B4  06DF               	decf	indf2,f,c
   830   0010B6                     l1660:
   831                           
   832                           ;dc_motor_v1.c: 236:         setMotorPWM(mR);
   833   0010B6  C014  F00E         	movff	turnRIGHT@mR,setMotorPWM@m
   834   0010BA  EC3F  F009         	call	_setMotorPWM	;wreg free
   835   0010BE                     
   836                           ;dc_motor_v1.c: 237:         setMotorPWM(mL);
   837   0010BE  C013  F00E         	movff	turnRIGHT@mL,setMotorPWM@m
   838   0010C2  EC3F  F009         	call	_setMotorPWM	;wreg free
   839   0010C6                     
   840                           ;dc_motor_v1.c: 238:         delay_ms_function(delay_time);
   841   0010C6  C01F  F001         	movff	turnRIGHT@delay_time,delay_ms_function@milliseconds
   842   0010CA  C020  F002         	movff	turnRIGHT@delay_time+1,delay_ms_function@milliseconds+1
   843   0010CE  EC66  F00C         	call	_delay_ms_function	;wreg free
   844   0010D2                     l1666:
   845                           
   846                           ;dc_motor_v1.c: 229:     while(mL->power || mR->power > 0){
   847   0010D2  5013               	movf	turnRIGHT@mL^0,w,c
   848   0010D4  6ED9               	movwf	fsr2l,c
   849   0010D6  6ADA               	clrf	fsr2h,c
   850   0010D8  50DF               	movf	indf2,w,c
   851   0010DA  A4D8               	btfss	status,2,c
   852   0010DC  EF72  F008         	goto	u831
   853   0010E0  EF74  F008         	goto	u830
   854   0010E4                     u831:
   855   0010E4  EF3D  F008         	goto	l1652
   856   0010E8                     u830:
   857   0010E8  5014               	movf	turnRIGHT@mR^0,w,c
   858   0010EA  6ED9               	movwf	fsr2l,c
   859   0010EC  6ADA               	clrf	fsr2h,c
   860   0010EE  50DF               	movf	indf2,w,c
   861   0010F0  A4D8               	btfss	status,2,c
   862   0010F2  EF7D  F008         	goto	u841
   863   0010F6  EF7F  F008         	goto	u840
   864   0010FA                     u841:
   865   0010FA  EF3D  F008         	goto	l1652
   866   0010FE                     u840:
   867   0010FE  0012               	return		;funcret
   868   001100                     __end_of_turnRIGHT:
   869                           	callstack 0
   870                           
   871 ;; *************** function _turnLEFT *****************
   872 ;; Defined at:
   873 ;;		line 168 in file "dc_motor_v1.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;  rotation_cal    1    wreg     unsigned char 
   876 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   877 ;;		 -> motorL(9), 
   878 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   879 ;;		 -> motorR(9), 
   880 ;; Auto vars:     Size  Location     Type
   881 ;;  rotation_cal    1   23[COMRAM] unsigned char 
   882 ;;  j               2   26[COMRAM] int 
   883 ;;  i               2   24[COMRAM] int 
   884 ;;  delay_time      2   30[COMRAM] int 
   885 ;;  max_power       2   28[COMRAM] int 
   886 ;;  acceleration    2    0        int 
   887 ;; Return value:  Size  Location     Type
   888 ;;                  1    wreg      void 
   889 ;; Registers used:
   890 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   896 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   897 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   898 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   899 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   900 ;;Total ram usage:       14 bytes
   901 ;; Hardware stack levels used: 1
   902 ;; Hardware stack levels required when called: 2
   903 ;; This function calls:
   904 ;;		___awdiv
   905 ;;		_delay_ms_function
   906 ;;		_setMotorPWM
   907 ;; This function is called by:
   908 ;;		_main
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912                           	psect	text2
   913   001100                     __ptext2:
   914                           	callstack 0
   915   001100                     _turnLEFT:
   916                           	callstack 28
   917                           
   918                           ;incstack = 0
   919                           ;turnLEFT@rotation_calibration stored from wreg
   920   001100  6E18               	movwf	turnLEFT@rotation_calibration^0,c
   921   001102                     
   922                           ;dc_motor_v1.c: 169:     mL->direction = 0;
   923   001102  5013               	movf	turnLEFT@mL^0,w,c
   924   001104  6ED9               	movwf	fsr2l,c
   925   001106  6ADA               	clrf	fsr2h,c
   926   001108  0E01               	movlw	1
   927   00110A  26D9               	addwf	fsr2l,f,c
   928   00110C  6ADF               	clrf	indf2,c
   929                           
   930                           ;dc_motor_v1.c: 170:     mR->direction = 1;
   931   00110E  5014               	movf	turnLEFT@mR^0,w,c
   932   001110  6ED9               	movwf	fsr2l,c
   933   001112  6ADA               	clrf	fsr2h,c
   934   001114  0E01               	movlw	1
   935   001116  26D9               	addwf	fsr2l,f,c
   936   001118  0E01               	movlw	1
   937   00111A  6EDF               	movwf	indf2,c
   938   00111C                     
   939                           ;dc_motor_v1.c: 172:     int max_power = 20;
   940   00111C  0E00               	movlw	0
   941   00111E  6E1E               	movwf	(turnLEFT@max_power+1)^0,c
   942   001120  0E14               	movlw	20
   943   001122  6E1D               	movwf	turnLEFT@max_power^0,c
   944   001124                     
   945                           ;dc_motor_v1.c: 174:     int delay_time = acceleration_time/max_power;
   946   001124  0E00               	movlw	0
   947   001126  6E02               	movwf	(___awdiv@dividend+1)^0,c
   948   001128  0E64               	movlw	100
   949   00112A  6E01               	movwf	___awdiv@dividend^0,c
   950   00112C  0E00               	movlw	0
   951   00112E  6E04               	movwf	(___awdiv@divisor+1)^0,c
   952   001130  0E14               	movlw	20
   953   001132  6E03               	movwf	___awdiv@divisor^0,c
   954   001134  EC29  F00B         	call	___awdiv	;wreg free
   955   001138  C001  F01F         	movff	?___awdiv,turnLEFT@delay_time
   956   00113C  C002  F020         	movff	?___awdiv+1,turnLEFT@delay_time+1
   957   001140                     
   958                           ;dc_motor_v1.c: 177:     for(int i=0; i< max_power; i++){
   959   001140  0E00               	movlw	0
   960   001142  6E1A               	movwf	(turnLEFT@i+1)^0,c
   961   001144  0E00               	movlw	0
   962   001146  6E19               	movwf	turnLEFT@i^0,c
   963   001148  EFCA  F008         	goto	l1598
   964   00114C                     l1588:
   965                           
   966                           ;dc_motor_v1.c: 178:         mL->power = mL->power + 1;
   967   00114C  5013               	movf	turnLEFT@mL^0,w,c
   968   00114E  6ED9               	movwf	fsr2l,c
   969   001150  6ADA               	clrf	fsr2h,c
   970   001152  5013               	movf	turnLEFT@mL^0,w,c
   971   001154  6EE1               	movwf	fsr1l,c
   972   001156  6AE2               	clrf	fsr1h,c
   973   001158  50E7               	movf	indf1,w,c
   974   00115A  6E15               	movwf	??_turnLEFT^0,c
   975   00115C  2815               	incf	??_turnLEFT^0,w,c
   976   00115E  6EDF               	movwf	indf2,c
   977                           
   978                           ;dc_motor_v1.c: 179:         mR->power = mR->power + 1 ;
   979   001160  5014               	movf	turnLEFT@mR^0,w,c
   980   001162  6ED9               	movwf	fsr2l,c
   981   001164  6ADA               	clrf	fsr2h,c
   982   001166  5014               	movf	turnLEFT@mR^0,w,c
   983   001168  6EE1               	movwf	fsr1l,c
   984   00116A  6AE2               	clrf	fsr1h,c
   985   00116C  50E7               	movf	indf1,w,c
   986   00116E  6E15               	movwf	??_turnLEFT^0,c
   987   001170  2815               	incf	??_turnLEFT^0,w,c
   988   001172  6EDF               	movwf	indf2,c
   989   001174                     
   990                           ;dc_motor_v1.c: 180:         setMotorPWM(mR);
   991   001174  C014  F00E         	movff	turnLEFT@mR,setMotorPWM@m
   992   001178  EC3F  F009         	call	_setMotorPWM	;wreg free
   993   00117C                     
   994                           ;dc_motor_v1.c: 181:         setMotorPWM(mL);
   995   00117C  C013  F00E         	movff	turnLEFT@mL,setMotorPWM@m
   996   001180  EC3F  F009         	call	_setMotorPWM	;wreg free
   997   001184                     
   998                           ;dc_motor_v1.c: 182:         delay_ms_function(delay_time);
   999   001184  C01F  F001         	movff	turnLEFT@delay_time,delay_ms_function@milliseconds
  1000   001188  C020  F002         	movff	turnLEFT@delay_time+1,delay_ms_function@milliseconds+1
  1001   00118C  EC66  F00C         	call	_delay_ms_function	;wreg free
  1002   001190                     
  1003                           ;dc_motor_v1.c: 183:     }
  1004   001190  4A19               	infsnz	turnLEFT@i^0,f,c
  1005   001192  2A1A               	incf	(turnLEFT@i+1)^0,f,c
  1006   001194                     l1598:
  1007   001194  501D               	movf	turnLEFT@max_power^0,w,c
  1008   001196  5C19               	subwf	turnLEFT@i^0,w,c
  1009   001198  501A               	movf	(turnLEFT@i+1)^0,w,c
  1010   00119A  0A80               	xorlw	128
  1011   00119C  6E15               	movwf	??_turnLEFT^0,c
  1012   00119E  501E               	movf	(turnLEFT@max_power+1)^0,w,c
  1013   0011A0  0A80               	xorlw	128
  1014   0011A2  5815               	subwfb	??_turnLEFT^0,w,c
  1015   0011A4  A0D8               	btfss	status,0,c
  1016   0011A6  EFD7  F008         	goto	u731
  1017   0011AA  EFD9  F008         	goto	u730
  1018   0011AE                     u731:
  1019   0011AE  EFA6  F008         	goto	l1588
  1020   0011B2                     u730:
  1021   0011B2                     
  1022                           ;dc_motor_v1.c: 186:     for(int j=0; j<rotation_calibration; j++){
  1023   0011B2  0E00               	movlw	0
  1024   0011B4  6E1C               	movwf	(turnLEFT@j+1)^0,c
  1025   0011B6  0E00               	movlw	0
  1026   0011B8  6E1B               	movwf	turnLEFT@j^0,c
  1027   0011BA  EFE8  F008         	goto	l164
  1028   0011BE                     l1602:
  1029                           
  1030                           ;dc_motor_v1.c: 187:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1031   0011BE  0ED0               	movlw	208
  1032   0011C0  6E15               	movwf	??_turnLEFT^0,c
  1033   0011C2  0ECA               	movlw	202
  1034   0011C4                     u947:
  1035   0011C4  2EE8               	decfsz	wreg,f,c
  1036   0011C6  D7FE               	bra	u947
  1037   0011C8  2E15               	decfsz	??_turnLEFT^0,f,c
  1038   0011CA  D7FC               	bra	u947
  1039   0011CC                     
  1040                           ;dc_motor_v1.c: 188:     }
  1041   0011CC  4A1B               	infsnz	turnLEFT@j^0,f,c
  1042   0011CE  2A1C               	incf	(turnLEFT@j+1)^0,f,c
  1043   0011D0                     l164:
  1044   0011D0  5018               	movf	turnLEFT@rotation_calibration^0,w,c
  1045   0011D2  6E15               	movwf	??_turnLEFT^0,c
  1046   0011D4  6A16               	clrf	(??_turnLEFT+1)^0,c
  1047   0011D6  5015               	movf	??_turnLEFT^0,w,c
  1048   0011D8  5C1B               	subwf	turnLEFT@j^0,w,c
  1049   0011DA  501C               	movf	(turnLEFT@j+1)^0,w,c
  1050   0011DC  0A80               	xorlw	128
  1051   0011DE  6E17               	movwf	(??_turnLEFT+2)^0,c
  1052   0011E0  5016               	movf	(??_turnLEFT+1)^0,w,c
  1053   0011E2  0A80               	xorlw	128
  1054   0011E4  5817               	subwfb	(??_turnLEFT+2)^0,w,c
  1055   0011E6  A0D8               	btfss	status,0,c
  1056   0011E8  EFF8  F008         	goto	u741
  1057   0011EC  EFFA  F008         	goto	u740
  1058   0011F0                     u741:
  1059   0011F0  EFDF  F008         	goto	l1602
  1060   0011F4                     u740:
  1061   0011F4  EF28  F009         	goto	l1620
  1062   0011F8                     l1606:
  1063                           
  1064                           ;dc_motor_v1.c: 192:         if(mR->power> 0 ){
  1065   0011F8  5014               	movf	turnLEFT@mR^0,w,c
  1066   0011FA  6ED9               	movwf	fsr2l,c
  1067   0011FC  6ADA               	clrf	fsr2h,c
  1068   0011FE  50DF               	movf	indf2,w,c
  1069   001200  B4D8               	btfsc	status,2,c
  1070   001202  EF05  F009         	goto	u751
  1071   001206  EF07  F009         	goto	u750
  1072   00120A                     u751:
  1073   00120A  EF0B  F009         	goto	l1610
  1074   00120E                     u750:
  1075   00120E                     
  1076                           ;dc_motor_v1.c: 193:             mR->power--;
  1077   00120E  5014               	movf	turnLEFT@mR^0,w,c
  1078   001210  6ED9               	movwf	fsr2l,c
  1079   001212  6ADA               	clrf	fsr2h,c
  1080   001214  06DF               	decf	indf2,f,c
  1081   001216                     l1610:
  1082                           
  1083                           ;dc_motor_v1.c: 195:         if(mL->power> 0 ){
  1084   001216  5013               	movf	turnLEFT@mL^0,w,c
  1085   001218  6ED9               	movwf	fsr2l,c
  1086   00121A  6ADA               	clrf	fsr2h,c
  1087   00121C  50DF               	movf	indf2,w,c
  1088   00121E  B4D8               	btfsc	status,2,c
  1089   001220  EF14  F009         	goto	u761
  1090   001224  EF16  F009         	goto	u760
  1091   001228                     u761:
  1092   001228  EF1A  F009         	goto	l1614
  1093   00122C                     u760:
  1094   00122C                     
  1095                           ;dc_motor_v1.c: 196:             mL->power--;
  1096   00122C  5013               	movf	turnLEFT@mL^0,w,c
  1097   00122E  6ED9               	movwf	fsr2l,c
  1098   001230  6ADA               	clrf	fsr2h,c
  1099   001232  06DF               	decf	indf2,f,c
  1100   001234                     l1614:
  1101                           
  1102                           ;dc_motor_v1.c: 198:         setMotorPWM(mR);
  1103   001234  C014  F00E         	movff	turnLEFT@mR,setMotorPWM@m
  1104   001238  EC3F  F009         	call	_setMotorPWM	;wreg free
  1105   00123C                     
  1106                           ;dc_motor_v1.c: 199:         setMotorPWM(mL);
  1107   00123C  C013  F00E         	movff	turnLEFT@mL,setMotorPWM@m
  1108   001240  EC3F  F009         	call	_setMotorPWM	;wreg free
  1109   001244                     
  1110                           ;dc_motor_v1.c: 200:         delay_ms_function(delay_time);
  1111   001244  C01F  F001         	movff	turnLEFT@delay_time,delay_ms_function@milliseconds
  1112   001248  C020  F002         	movff	turnLEFT@delay_time+1,delay_ms_function@milliseconds+1
  1113   00124C  EC66  F00C         	call	_delay_ms_function	;wreg free
  1114   001250                     l1620:
  1115                           
  1116                           ;dc_motor_v1.c: 191:     while(mL->power || mR->power > 0){
  1117   001250  5013               	movf	turnLEFT@mL^0,w,c
  1118   001252  6ED9               	movwf	fsr2l,c
  1119   001254  6ADA               	clrf	fsr2h,c
  1120   001256  50DF               	movf	indf2,w,c
  1121   001258  A4D8               	btfss	status,2,c
  1122   00125A  EF31  F009         	goto	u771
  1123   00125E  EF33  F009         	goto	u770
  1124   001262                     u771:
  1125   001262  EFFC  F008         	goto	l1606
  1126   001266                     u770:
  1127   001266  5014               	movf	turnLEFT@mR^0,w,c
  1128   001268  6ED9               	movwf	fsr2l,c
  1129   00126A  6ADA               	clrf	fsr2h,c
  1130   00126C  50DF               	movf	indf2,w,c
  1131   00126E  A4D8               	btfss	status,2,c
  1132   001270  EF3C  F009         	goto	u781
  1133   001274  EF3E  F009         	goto	u780
  1134   001278                     u781:
  1135   001278  EFFC  F008         	goto	l1606
  1136   00127C                     u780:
  1137   00127C  0012               	return		;funcret
  1138   00127E                     __end_of_turnLEFT:
  1139                           	callstack 0
  1140                           
  1141 ;; *************** function _switch_calibration *****************
  1142 ;; Defined at:
  1143 ;;		line 44 in file "calibration.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;  calibration_    1    0[COMRAM] PTR int 
  1146 ;;		 -> calibration(9), 
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;		None
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      void 
  1151 ;; Registers used:
  1152 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1158 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1160 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1161 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1162 ;;Total ram usage:        3 bytes
  1163 ;; Hardware stack levels used: 1
  1164 ;; This function calls:
  1165 ;;		Nothing
  1166 ;; This function is called by:
  1167 ;;		_main
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text3
  1172   001716                     __ptext3:
  1173                           	callstack 0
  1174   001716                     _switch_calibration:
  1175                           	callstack 30
  1176   001716                     l57:
  1177                           
  1178                           ;calibration.c: 46:         if(!PORTFbits.RF2){
  1179   001716  B48E               	btfsc	142,2,c	;volatile
  1180   001718  EF90  F00B         	goto	u651
  1181   00171C  EF92  F00B         	goto	u650
  1182   001720                     u651:
  1183   001720  EFC0  F00B         	goto	l58
  1184   001724                     u650:
  1185   001724                     
  1186                           ;calibration.c: 47:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1187   001724  0E11               	movlw	17
  1188   001726  6E03               	movwf	(??_switch_calibration+1)^0,c
  1189   001728  0E3C               	movlw	60
  1190   00172A  6E02               	movwf	??_switch_calibration^0,c
  1191   00172C  0ECB               	movlw	203
  1192   00172E                     u957:
  1193   00172E  2EE8               	decfsz	wreg,f,c
  1194   001730  D7FE               	bra	u957
  1195   001732  2E02               	decfsz	??_switch_calibration^0,f,c
  1196   001734  D7FC               	bra	u957
  1197   001736  2E03               	decfsz	(??_switch_calibration+1)^0,f,c
  1198   001738  D7FA               	bra	u957
  1199   00173A  0000               	nop	
  1200   00173C                     
  1201                           ;calibration.c: 48:             *calibration_index = *calibration_index + 1;
  1202   00173C  5001               	movf	switch_calibration@calibration_index^0,w,c
  1203   00173E  6ED9               	movwf	fsr2l,c
  1204   001740  6ADA               	clrf	fsr2h,c
  1205   001742  CFDE F002          	movff	postinc2,??_switch_calibration
  1206   001746  CFDD F003          	movff	postdec2,??_switch_calibration+1
  1207   00174A  0E01               	movlw	1
  1208   00174C  2602               	addwf	??_switch_calibration^0,f,c
  1209   00174E  0E00               	movlw	0
  1210   001750  2203               	addwfc	(??_switch_calibration+1)^0,f,c
  1211   001752  5001               	movf	switch_calibration@calibration_index^0,w,c
  1212   001754  6ED9               	movwf	fsr2l,c
  1213   001756  6ADA               	clrf	fsr2h,c
  1214   001758  C002  FFDE         	movff	??_switch_calibration,postinc2
  1215   00175C  C003  FFDD         	movff	??_switch_calibration+1,postdec2
  1216   001760                     
  1217                           ;calibration.c: 49:             LATDbits.LATD7 = 1;
  1218   001760  8E7C               	bsf	124,7,c	;volatile
  1219   001762                     
  1220                           ;calibration.c: 50:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1221   001762  0E11               	movlw	17
  1222   001764  6E03               	movwf	(??_switch_calibration+1)^0,c
  1223   001766  0E3C               	movlw	60
  1224   001768  6E02               	movwf	??_switch_calibration^0,c
  1225   00176A  0ECB               	movlw	203
  1226   00176C                     u967:
  1227   00176C  2EE8               	decfsz	wreg,f,c
  1228   00176E  D7FE               	bra	u967
  1229   001770  2E02               	decfsz	??_switch_calibration^0,f,c
  1230   001772  D7FC               	bra	u967
  1231   001774  2E03               	decfsz	(??_switch_calibration+1)^0,f,c
  1232   001776  D7FA               	bra	u967
  1233   001778  0000               	nop	
  1234   00177A                     
  1235                           ;calibration.c: 51:             LATDbits.LATD7 = 0;
  1236   00177A  9E7C               	bcf	124,7,c	;volatile
  1237                           
  1238                           ;calibration.c: 52:             break;
  1239   00177C  EFE1  F00B         	goto	l62
  1240   001780                     l58:
  1241                           
  1242                           ;calibration.c: 55:         if(!PORTFbits.RF3){
  1243   001780  B68E               	btfsc	142,3,c	;volatile
  1244   001782  EFC5  F00B         	goto	u661
  1245   001786  EFC7  F00B         	goto	u660
  1246   00178A                     u661:
  1247   00178A  EF8B  F00B         	goto	l57
  1248   00178E                     u660:
  1249   00178E                     
  1250                           ;calibration.c: 56:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1251   00178E  0E11               	movlw	17
  1252   001790  6E03               	movwf	(??_switch_calibration+1)^0,c
  1253   001792  0E3C               	movlw	60
  1254   001794  6E02               	movwf	??_switch_calibration^0,c
  1255   001796  0ECB               	movlw	203
  1256   001798                     u977:
  1257   001798  2EE8               	decfsz	wreg,f,c
  1258   00179A  D7FE               	bra	u977
  1259   00179C  2E02               	decfsz	??_switch_calibration^0,f,c
  1260   00179E  D7FC               	bra	u977
  1261   0017A0  2E03               	decfsz	(??_switch_calibration+1)^0,f,c
  1262   0017A2  D7FA               	bra	u977
  1263   0017A4  0000               	nop	
  1264   0017A6                     
  1265                           ;calibration.c: 57:             LATHbits.LATH3 = 1;
  1266   0017A6  8680               	bsf	128,3,c	;volatile
  1267                           
  1268                           ;calibration.c: 58:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1269   0017A8  0E11               	movlw	17
  1270   0017AA  6E03               	movwf	(??_switch_calibration+1)^0,c
  1271   0017AC  0E3C               	movlw	60
  1272   0017AE  6E02               	movwf	??_switch_calibration^0,c
  1273   0017B0  0ECB               	movlw	203
  1274   0017B2                     u987:
  1275   0017B2  2EE8               	decfsz	wreg,f,c
  1276   0017B4  D7FE               	bra	u987
  1277   0017B6  2E02               	decfsz	??_switch_calibration^0,f,c
  1278   0017B8  D7FC               	bra	u987
  1279   0017BA  2E03               	decfsz	(??_switch_calibration+1)^0,f,c
  1280   0017BC  D7FA               	bra	u987
  1281   0017BE  0000               	nop	
  1282   0017C0                     
  1283                           ;calibration.c: 59:             LATHbits.LATH3 = 0;
  1284   0017C0  9680               	bcf	128,3,c	;volatile
  1285   0017C2                     l62:
  1286   0017C2  0012               	return		;funcret
  1287   0017C4                     __end_of_switch_calibration:
  1288                           	callstack 0
  1289                           
  1290 ;; *************** function _initDCmotorsPWM *****************
  1291 ;; Defined at:
  1292 ;;		line 5 in file "dc_motor_v1.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;		None
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  1    wreg      void 
  1299 ;; Registers used:
  1300 ;;		wreg, status,2
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1306 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1309 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1310 ;;Total ram usage:        2 bytes
  1311 ;; Hardware stack levels used: 1
  1312 ;; This function calls:
  1313 ;;		Nothing
  1314 ;; This function is called by:
  1315 ;;		_main
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           	psect	text4
  1320   0017C4                     __ptext4:
  1321                           	callstack 0
  1322   0017C4                     _initDCmotorsPWM:
  1323                           	callstack 30
  1324   0017C4                     
  1325                           ;dc_motor_v1.c: 7:     TRISEbits.TRISE2 = 0;
  1326   0017C4  9485               	bcf	133,2,c	;volatile
  1327                           
  1328                           ;dc_motor_v1.c: 8:     TRISEbits.TRISE4 = 0;
  1329   0017C6  9885               	bcf	133,4,c	;volatile
  1330                           
  1331                           ;dc_motor_v1.c: 9:     TRISCbits.TRISC7 = 0;
  1332   0017C8  9E83               	bcf	131,7,c	;volatile
  1333                           
  1334                           ;dc_motor_v1.c: 10:     TRISGbits.TRISG6 = 0;
  1335   0017CA  9C87               	bcf	135,6,c	;volatile
  1336                           
  1337                           ;dc_motor_v1.c: 12:     LATEbits.LATE2 = 0;
  1338   0017CC  947D               	bcf	125,2,c	;volatile
  1339                           
  1340                           ;dc_motor_v1.c: 13:     LATEbits.LATE4 = 0;
  1341   0017CE  987D               	bcf	125,4,c	;volatile
  1342                           
  1343                           ;dc_motor_v1.c: 14:     LATCbits.LATC7 = 0;
  1344   0017D0  9E7B               	bcf	123,7,c	;volatile
  1345                           
  1346                           ;dc_motor_v1.c: 15:     LATGbits.LATG6 = 0;
  1347   0017D2  9C7F               	bcf	127,6,c	;volatile
  1348   0017D4                     
  1349                           ;dc_motor_v1.c: 18:     RE2PPS=0x05;
  1350   0017D4  0E05               	movlw	5
  1351   0017D6  010E               	movlb	14	; () banked
  1352   0017D8  6F74               	movwf	116,b	;volatile
  1353                           
  1354                           ;dc_motor_v1.c: 19:     RE4PPS=0x06;
  1355   0017DA  0E06               	movlw	6
  1356   0017DC  6F76               	movwf	118,b	;volatile
  1357                           
  1358                           ;dc_motor_v1.c: 20:     RC7PPS=0x07;
  1359   0017DE  0E07               	movlw	7
  1360   0017E0  6F69               	movwf	105,b	;volatile
  1361                           
  1362                           ;dc_motor_v1.c: 21:     RG6PPS=0x08;
  1363   0017E2  0E08               	movlw	8
  1364   0017E4  6F88               	movwf	136,b	;volatile
  1365                           
  1366                           ;dc_motor_v1.c: 24:     T2CONbits.CKPS=100;
  1367   0017E6  50BD               	movf	189,w,c	;volatile
  1368   0017E8  0B8F               	andlw	-113
  1369   0017EA  0940               	iorlw	64
  1370   0017EC  6EBD               	movwf	189,c	;volatile
  1371                           
  1372                           ;dc_motor_v1.c: 25:     T2HLTbits.MODE=0b00000;
  1373   0017EE  0EE0               	movlw	-32
  1374   0017F0  16BE               	andwf	190,f,c	;volatile
  1375                           
  1376                           ;dc_motor_v1.c: 26:     T2CLKCONbits.CS=0b0001;
  1377   0017F2  50BF               	movf	191,w,c	;volatile
  1378   0017F4  0BF0               	andlw	-16
  1379   0017F6  0901               	iorlw	1
  1380   0017F8  6EBF               	movwf	191,c	;volatile
  1381   0017FA                     
  1382                           ; BSR set to: 14
  1383                           ;dc_motor_v1.c: 30:     T2PR=PWMperiod;
  1384   0017FA  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1385   0017FE                     
  1386                           ; BSR set to: 14
  1387                           ;dc_motor_v1.c: 31:     T2CONbits.ON=1;
  1388   0017FE  8EBD               	bsf	189,7,c	;volatile
  1389                           
  1390                           ;dc_motor_v1.c: 35:     CCPR1H=0;
  1391   001800  0E00               	movlw	0
  1392   001802  6EAA               	movwf	170,c	;volatile
  1393                           
  1394                           ;dc_motor_v1.c: 36:     CCPR2H=0;
  1395   001804  0E00               	movlw	0
  1396   001806  6EA6               	movwf	166,c	;volatile
  1397                           
  1398                           ;dc_motor_v1.c: 37:     CCPR3H=0;
  1399   001808  0E00               	movlw	0
  1400   00180A  010F               	movlb	15	; () banked
  1401   00180C  6F25               	movwf	37,b	;volatile
  1402                           
  1403                           ;dc_motor_v1.c: 38:     CCPR4H=0;
  1404   00180E  0E00               	movlw	0
  1405   001810  6F21               	movwf	33,b	;volatile
  1406                           
  1407                           ;dc_motor_v1.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1408   001812  0EFC               	movlw	-4
  1409   001814  16AD               	andwf	173,f,c	;volatile
  1410                           
  1411                           ;dc_motor_v1.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1412   001816  0EF3               	movlw	-13
  1413   001818  16AD               	andwf	173,f,c	;volatile
  1414                           
  1415                           ;dc_motor_v1.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1416   00181A  0ECF               	movlw	-49
  1417   00181C  16AD               	andwf	173,f,c	;volatile
  1418                           
  1419                           ;dc_motor_v1.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1420   00181E  0E3F               	movlw	-193
  1421   001820  16AD               	andwf	173,f,c	;volatile
  1422   001822                     
  1423                           ; BSR set to: 15
  1424                           ;dc_motor_v1.c: 47:     CCP1CONbits.FMT=1;
  1425   001822  88AB               	bsf	171,4,c	;volatile
  1426                           
  1427                           ;dc_motor_v1.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1428   001824  50AB               	movf	171,w,c	;volatile
  1429   001826  0BF0               	andlw	-16
  1430   001828  090C               	iorlw	12
  1431   00182A  6EAB               	movwf	171,c	;volatile
  1432   00182C                     
  1433                           ; BSR set to: 15
  1434                           ;dc_motor_v1.c: 49:     CCP1CONbits.EN=1;
  1435   00182C  8EAB               	bsf	171,7,c	;volatile
  1436   00182E                     
  1437                           ; BSR set to: 15
  1438                           ;dc_motor_v1.c: 51:     CCP2CONbits.FMT=1;
  1439   00182E  88A7               	bsf	167,4,c	;volatile
  1440                           
  1441                           ;dc_motor_v1.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  1442   001830  50A7               	movf	167,w,c	;volatile
  1443   001832  0BF0               	andlw	-16
  1444   001834  090C               	iorlw	12
  1445   001836  6EA7               	movwf	167,c	;volatile
  1446   001838                     
  1447                           ; BSR set to: 15
  1448                           ;dc_motor_v1.c: 53:     CCP2CONbits.EN=1;
  1449   001838  8EA7               	bsf	167,7,c	;volatile
  1450   00183A                     
  1451                           ; BSR set to: 15
  1452                           ;dc_motor_v1.c: 55:     CCP3CONbits.FMT=1;
  1453   00183A  8926               	bsf	38,4,b	;volatile
  1454                           
  1455                           ;dc_motor_v1.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  1456   00183C  5126               	movf	38,w,b	;volatile
  1457   00183E  0BF0               	andlw	-16
  1458   001840  090C               	iorlw	12
  1459   001842  6F26               	movwf	38,b	;volatile
  1460   001844                     
  1461                           ; BSR set to: 15
  1462                           ;dc_motor_v1.c: 57:     CCP3CONbits.EN=1;
  1463   001844  8F26               	bsf	38,7,b	;volatile
  1464   001846                     
  1465                           ; BSR set to: 15
  1466                           ;dc_motor_v1.c: 59:     CCP4CONbits.FMT=1;
  1467   001846  8922               	bsf	34,4,b	;volatile
  1468                           
  1469                           ;dc_motor_v1.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  1470   001848  5122               	movf	34,w,b	;volatile
  1471   00184A  0BF0               	andlw	-16
  1472   00184C  090C               	iorlw	12
  1473   00184E  6F22               	movwf	34,b	;volatile
  1474   001850                     
  1475                           ; BSR set to: 15
  1476                           ;dc_motor_v1.c: 61:     CCP4CONbits.EN=1;
  1477   001850  8F22               	bsf	34,7,b	;volatile
  1478   001852                     
  1479                           ; BSR set to: 15
  1480                           ;dc_motor_v1.c: 64:     TRISHbits.TRISH3 = 0;
  1481   001852  9688               	bcf	136,3,c	;volatile
  1482   001854                     
  1483                           ; BSR set to: 15
  1484                           ;dc_motor_v1.c: 65:     LATHbits.LATH3 = 0;
  1485   001854  9680               	bcf	128,3,c	;volatile
  1486   001856                     
  1487                           ; BSR set to: 15
  1488   001856  0012               	return		;funcret
  1489   001858                     __end_of_initDCmotorsPWM:
  1490                           	callstack 0
  1491                           
  1492 ;; *************** function _forward *****************
  1493 ;; Defined at:
  1494 ;;		line 122 in file "dc_motor_v1.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;  Distance_Cal    1    wreg     unsigned char 
  1497 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1498 ;;		 -> motorL(9), 
  1499 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1500 ;;		 -> motorR(9), 
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;  Distance_Cal    1   23[COMRAM] unsigned char 
  1503 ;;  j               2   26[COMRAM] int 
  1504 ;;  i               2   24[COMRAM] int 
  1505 ;;  delay_time      2   30[COMRAM] int 
  1506 ;;  max_power       2   28[COMRAM] int 
  1507 ;;  acceleration    2    0        int 
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  1    wreg      void 
  1510 ;; Registers used:
  1511 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1517 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1518 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1519 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1520 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1521 ;;Total ram usage:       14 bytes
  1522 ;; Hardware stack levels used: 1
  1523 ;; Hardware stack levels required when called: 2
  1524 ;; This function calls:
  1525 ;;		___awdiv
  1526 ;;		_delay_ms_function
  1527 ;;		_setMotorPWM
  1528 ;; This function is called by:
  1529 ;;		_main
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text5
  1534   000E02                     __ptext5:
  1535                           	callstack 0
  1536   000E02                     _forward:
  1537                           	callstack 28
  1538                           
  1539                           ; BSR set to: 15
  1540                           ;incstack = 0
  1541                           ;forward@Distance_Calibration stored from wreg
  1542   000E02  6E18               	movwf	forward@Distance_Calibration^0,c
  1543   000E04                     
  1544                           ;dc_motor_v1.c: 123:     mL->direction = 1;
  1545   000E04  5013               	movf	forward@mL^0,w,c
  1546   000E06  6ED9               	movwf	fsr2l,c
  1547   000E08  6ADA               	clrf	fsr2h,c
  1548   000E0A  0E01               	movlw	1
  1549   000E0C  26D9               	addwf	fsr2l,f,c
  1550   000E0E  0E01               	movlw	1
  1551   000E10  6EDF               	movwf	indf2,c
  1552                           
  1553                           ;dc_motor_v1.c: 124:     mR->direction = 1;
  1554   000E12  5014               	movf	forward@mR^0,w,c
  1555   000E14  6ED9               	movwf	fsr2l,c
  1556   000E16  6ADA               	clrf	fsr2h,c
  1557   000E18  0E01               	movlw	1
  1558   000E1A  26D9               	addwf	fsr2l,f,c
  1559   000E1C  0E01               	movlw	1
  1560   000E1E  6EDF               	movwf	indf2,c
  1561   000E20                     
  1562                           ;dc_motor_v1.c: 131:     int max_power = 20;
  1563   000E20  0E00               	movlw	0
  1564   000E22  6E1E               	movwf	(forward@max_power+1)^0,c
  1565   000E24  0E14               	movlw	20
  1566   000E26  6E1D               	movwf	forward@max_power^0,c
  1567   000E28                     
  1568                           ;dc_motor_v1.c: 133:     int delay_time = acceleration_time/max_power;
  1569   000E28  0E00               	movlw	0
  1570   000E2A  6E02               	movwf	(___awdiv@dividend+1)^0,c
  1571   000E2C  0E64               	movlw	100
  1572   000E2E  6E01               	movwf	___awdiv@dividend^0,c
  1573   000E30  0E00               	movlw	0
  1574   000E32  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1575   000E34  0E14               	movlw	20
  1576   000E36  6E03               	movwf	___awdiv@divisor^0,c
  1577   000E38  EC29  F00B         	call	___awdiv	;wreg free
  1578   000E3C  C001  F01F         	movff	?___awdiv,forward@delay_time
  1579   000E40  C002  F020         	movff	?___awdiv+1,forward@delay_time+1
  1580   000E44                     
  1581                           ;dc_motor_v1.c: 136:     for(int i=0; i< max_power; i++){
  1582   000E44  0E00               	movlw	0
  1583   000E46  6E1A               	movwf	(forward@i+1)^0,c
  1584   000E48  0E00               	movlw	0
  1585   000E4A  6E19               	movwf	forward@i^0,c
  1586   000E4C  EF4C  F007         	goto	l1552
  1587   000E50                     l1542:
  1588                           
  1589                           ;dc_motor_v1.c: 137:         mL->power = mL->power + 1;
  1590   000E50  5013               	movf	forward@mL^0,w,c
  1591   000E52  6ED9               	movwf	fsr2l,c
  1592   000E54  6ADA               	clrf	fsr2h,c
  1593   000E56  5013               	movf	forward@mL^0,w,c
  1594   000E58  6EE1               	movwf	fsr1l,c
  1595   000E5A  6AE2               	clrf	fsr1h,c
  1596   000E5C  50E7               	movf	indf1,w,c
  1597   000E5E  6E15               	movwf	??_forward^0,c
  1598   000E60  2815               	incf	??_forward^0,w,c
  1599   000E62  6EDF               	movwf	indf2,c
  1600                           
  1601                           ;dc_motor_v1.c: 138:         mR->power = mR->power + 1 ;
  1602   000E64  5014               	movf	forward@mR^0,w,c
  1603   000E66  6ED9               	movwf	fsr2l,c
  1604   000E68  6ADA               	clrf	fsr2h,c
  1605   000E6A  5014               	movf	forward@mR^0,w,c
  1606   000E6C  6EE1               	movwf	fsr1l,c
  1607   000E6E  6AE2               	clrf	fsr1h,c
  1608   000E70  50E7               	movf	indf1,w,c
  1609   000E72  6E15               	movwf	??_forward^0,c
  1610   000E74  2815               	incf	??_forward^0,w,c
  1611   000E76  6EDF               	movwf	indf2,c
  1612   000E78                     
  1613                           ;dc_motor_v1.c: 139:         setMotorPWM(mR);
  1614   000E78  C014  F00E         	movff	forward@mR,setMotorPWM@m
  1615   000E7C  EC3F  F009         	call	_setMotorPWM	;wreg free
  1616   000E80                     
  1617                           ;dc_motor_v1.c: 140:         setMotorPWM(mL);
  1618   000E80  C013  F00E         	movff	forward@mL,setMotorPWM@m
  1619   000E84  EC3F  F009         	call	_setMotorPWM	;wreg free
  1620   000E88                     
  1621                           ;dc_motor_v1.c: 141:         delay_ms_function(delay_time);
  1622   000E88  C01F  F001         	movff	forward@delay_time,delay_ms_function@milliseconds
  1623   000E8C  C020  F002         	movff	forward@delay_time+1,delay_ms_function@milliseconds+1
  1624   000E90  EC66  F00C         	call	_delay_ms_function	;wreg free
  1625   000E94                     
  1626                           ;dc_motor_v1.c: 142:     }
  1627   000E94  4A19               	infsnz	forward@i^0,f,c
  1628   000E96  2A1A               	incf	(forward@i+1)^0,f,c
  1629   000E98                     l1552:
  1630   000E98  501D               	movf	forward@max_power^0,w,c
  1631   000E9A  5C19               	subwf	forward@i^0,w,c
  1632   000E9C  501A               	movf	(forward@i+1)^0,w,c
  1633   000E9E  0A80               	xorlw	128
  1634   000EA0  6E15               	movwf	??_forward^0,c
  1635   000EA2  501E               	movf	(forward@max_power+1)^0,w,c
  1636   000EA4  0A80               	xorlw	128
  1637   000EA6  5815               	subwfb	??_forward^0,w,c
  1638   000EA8  A0D8               	btfss	status,0,c
  1639   000EAA  EF59  F007         	goto	u671
  1640   000EAE  EF5B  F007         	goto	u670
  1641   000EB2                     u671:
  1642   000EB2  EF28  F007         	goto	l1542
  1643   000EB6                     u670:
  1644   000EB6                     
  1645                           ;dc_motor_v1.c: 147:     for(int j=0; j<Distance_Calibration; j++){
  1646   000EB6  0E00               	movlw	0
  1647   000EB8  6E1C               	movwf	(forward@j+1)^0,c
  1648   000EBA  0E00               	movlw	0
  1649   000EBC  6E1B               	movwf	forward@j^0,c
  1650   000EBE  EF6A  F007         	goto	l150
  1651   000EC2                     l1556:
  1652                           
  1653                           ;dc_motor_v1.c: 148:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1654   000EC2  0ED0               	movlw	208
  1655   000EC4  6E15               	movwf	??_forward^0,c
  1656   000EC6  0ECA               	movlw	202
  1657   000EC8                     u997:
  1658   000EC8  2EE8               	decfsz	wreg,f,c
  1659   000ECA  D7FE               	bra	u997
  1660   000ECC  2E15               	decfsz	??_forward^0,f,c
  1661   000ECE  D7FC               	bra	u997
  1662   000ED0                     
  1663                           ;dc_motor_v1.c: 149:     }
  1664   000ED0  4A1B               	infsnz	forward@j^0,f,c
  1665   000ED2  2A1C               	incf	(forward@j+1)^0,f,c
  1666   000ED4                     l150:
  1667   000ED4  5018               	movf	forward@Distance_Calibration^0,w,c
  1668   000ED6  6E15               	movwf	??_forward^0,c
  1669   000ED8  6A16               	clrf	(??_forward+1)^0,c
  1670   000EDA  5015               	movf	??_forward^0,w,c
  1671   000EDC  5C1B               	subwf	forward@j^0,w,c
  1672   000EDE  501C               	movf	(forward@j+1)^0,w,c
  1673   000EE0  0A80               	xorlw	128
  1674   000EE2  6E17               	movwf	(??_forward+2)^0,c
  1675   000EE4  5016               	movf	(??_forward+1)^0,w,c
  1676   000EE6  0A80               	xorlw	128
  1677   000EE8  5817               	subwfb	(??_forward+2)^0,w,c
  1678   000EEA  A0D8               	btfss	status,0,c
  1679   000EEC  EF7A  F007         	goto	u681
  1680   000EF0  EF7C  F007         	goto	u680
  1681   000EF4                     u681:
  1682   000EF4  EF61  F007         	goto	l1556
  1683   000EF8                     u680:
  1684   000EF8  EFAA  F007         	goto	l1574
  1685   000EFC                     l1560:
  1686                           
  1687                           ;dc_motor_v1.c: 153:         if(mR->power> 0 ){
  1688   000EFC  5014               	movf	forward@mR^0,w,c
  1689   000EFE  6ED9               	movwf	fsr2l,c
  1690   000F00  6ADA               	clrf	fsr2h,c
  1691   000F02  50DF               	movf	indf2,w,c
  1692   000F04  B4D8               	btfsc	status,2,c
  1693   000F06  EF87  F007         	goto	u691
  1694   000F0A  EF89  F007         	goto	u690
  1695   000F0E                     u691:
  1696   000F0E  EF8D  F007         	goto	l1564
  1697   000F12                     u690:
  1698   000F12                     
  1699                           ;dc_motor_v1.c: 154:             mR->power--;
  1700   000F12  5014               	movf	forward@mR^0,w,c
  1701   000F14  6ED9               	movwf	fsr2l,c
  1702   000F16  6ADA               	clrf	fsr2h,c
  1703   000F18  06DF               	decf	indf2,f,c
  1704   000F1A                     l1564:
  1705                           
  1706                           ;dc_motor_v1.c: 156:         if(mL->power> 0 ){
  1707   000F1A  5013               	movf	forward@mL^0,w,c
  1708   000F1C  6ED9               	movwf	fsr2l,c
  1709   000F1E  6ADA               	clrf	fsr2h,c
  1710   000F20  50DF               	movf	indf2,w,c
  1711   000F22  B4D8               	btfsc	status,2,c
  1712   000F24  EF96  F007         	goto	u701
  1713   000F28  EF98  F007         	goto	u700
  1714   000F2C                     u701:
  1715   000F2C  EF9C  F007         	goto	l1568
  1716   000F30                     u700:
  1717   000F30                     
  1718                           ;dc_motor_v1.c: 157:             mL->power--;
  1719   000F30  5013               	movf	forward@mL^0,w,c
  1720   000F32  6ED9               	movwf	fsr2l,c
  1721   000F34  6ADA               	clrf	fsr2h,c
  1722   000F36  06DF               	decf	indf2,f,c
  1723   000F38                     l1568:
  1724                           
  1725                           ;dc_motor_v1.c: 159:         setMotorPWM(mR);
  1726   000F38  C014  F00E         	movff	forward@mR,setMotorPWM@m
  1727   000F3C  EC3F  F009         	call	_setMotorPWM	;wreg free
  1728   000F40                     
  1729                           ;dc_motor_v1.c: 160:         setMotorPWM(mL);
  1730   000F40  C013  F00E         	movff	forward@mL,setMotorPWM@m
  1731   000F44  EC3F  F009         	call	_setMotorPWM	;wreg free
  1732   000F48                     
  1733                           ;dc_motor_v1.c: 161:         delay_ms_function(delay_time);
  1734   000F48  C01F  F001         	movff	forward@delay_time,delay_ms_function@milliseconds
  1735   000F4C  C020  F002         	movff	forward@delay_time+1,delay_ms_function@milliseconds+1
  1736   000F50  EC66  F00C         	call	_delay_ms_function	;wreg free
  1737   000F54                     l1574:
  1738                           
  1739                           ;dc_motor_v1.c: 152:     while(mL->power || mR->power > 0){
  1740   000F54  5013               	movf	forward@mL^0,w,c
  1741   000F56  6ED9               	movwf	fsr2l,c
  1742   000F58  6ADA               	clrf	fsr2h,c
  1743   000F5A  50DF               	movf	indf2,w,c
  1744   000F5C  A4D8               	btfss	status,2,c
  1745   000F5E  EFB3  F007         	goto	u711
  1746   000F62  EFB5  F007         	goto	u710
  1747   000F66                     u711:
  1748   000F66  EF7E  F007         	goto	l1560
  1749   000F6A                     u710:
  1750   000F6A  5014               	movf	forward@mR^0,w,c
  1751   000F6C  6ED9               	movwf	fsr2l,c
  1752   000F6E  6ADA               	clrf	fsr2h,c
  1753   000F70  50DF               	movf	indf2,w,c
  1754   000F72  A4D8               	btfss	status,2,c
  1755   000F74  EFBE  F007         	goto	u721
  1756   000F78  EFC0  F007         	goto	u720
  1757   000F7C                     u721:
  1758   000F7C  EF7E  F007         	goto	l1560
  1759   000F80                     u720:
  1760   000F80  0012               	return		;funcret
  1761   000F82                     __end_of_forward:
  1762                           	callstack 0
  1763                           
  1764 ;; *************** function _setMotorPWM *****************
  1765 ;; Defined at:
  1766 ;;		line 75 in file "dc_motor_v1.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1769 ;;		 -> motorR(9), motorL(9), 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  negDuty         1   17[COMRAM] unsigned char 
  1772 ;;  posDuty         1   16[COMRAM] unsigned char 
  1773 ;; Return value:  Size  Location     Type
  1774 ;;                  1    wreg      void 
  1775 ;; Registers used:
  1776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1777 ;; Tracked objects:
  1778 ;;		On entry : 0/0
  1779 ;;		On exit  : 0/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1782 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1783 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1784 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1785 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1786 ;;Total ram usage:        5 bytes
  1787 ;; Hardware stack levels used: 1
  1788 ;; Hardware stack levels required when called: 1
  1789 ;; This function calls:
  1790 ;;		___lwdiv
  1791 ;;		___wmul
  1792 ;; This function is called by:
  1793 ;;		_forward
  1794 ;;		_turnLEFT
  1795 ;;		_turnRIGHT
  1796 ;;		_stop
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           	psect	text6
  1801   00127E                     __ptext6:
  1802                           	callstack 0
  1803   00127E                     _setMotorPWM:
  1804                           	callstack 28
  1805   00127E                     
  1806                           ;dc_motor_v1.c: 75: void setMotorPWM(DC_motor *m);dc_motor_v1.c: 76: {;dc_motor_v1.c: 77
      +                          :     unsigned char posDuty, negDuty;;dc_motor_v1.c: 79:     if(m->brakemode) {
  1807   00127E  500E               	movf	setMotorPWM@m^0,w,c
  1808   001280  6ED9               	movwf	fsr2l,c
  1809   001282  6ADA               	clrf	fsr2h,c
  1810   001284  0E02               	movlw	2
  1811   001286  26D9               	addwf	fsr2l,f,c
  1812   001288  50DF               	movf	indf2,w,c
  1813   00128A  B4D8               	btfsc	status,2,c
  1814   00128C  EF4A  F009         	goto	u511
  1815   001290  EF4C  F009         	goto	u510
  1816   001294                     u511:
  1817   001294  EF7C  F009         	goto	l1394
  1818   001298                     u510:
  1819   001298                     
  1820                           ;dc_motor_v1.c: 80:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperi
      +                          od))/100;
  1821   001298  500E               	movf	setMotorPWM@m^0,w,c
  1822   00129A  6ED9               	movwf	fsr2l,c
  1823   00129C  6ADA               	clrf	fsr2h,c
  1824   00129E  50DF               	movf	indf2,w,c
  1825   0012A0  6E0F               	movwf	??_setMotorPWM^0,c
  1826   0012A2  500F               	movf	??_setMotorPWM^0,w,c
  1827   0012A4  6E01               	movwf	___wmul@multiplier^0,c
  1828   0012A6  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1829   0012A8  500E               	movf	setMotorPWM@m^0,w,c
  1830   0012AA  6ED9               	movwf	fsr2l,c
  1831   0012AC  6ADA               	clrf	fsr2h,c
  1832   0012AE  0E03               	movlw	3
  1833   0012B0  26D9               	addwf	fsr2l,f,c
  1834   0012B2  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1835   0012B6  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1836   0012BA  EC7D  F00C         	call	___wmul	;wreg free
  1837   0012BE  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1838   0012C2  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1839   0012C6  0E00               	movlw	0
  1840   0012C8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1841   0012CA  0E64               	movlw	100
  1842   0012CC  6E09               	movwf	___lwdiv@divisor^0,c
  1843   0012CE  EC2C  F00C         	call	___lwdiv	;wreg free
  1844   0012D2  500E               	movf	setMotorPWM@m^0,w,c
  1845   0012D4  6ED9               	movwf	fsr2l,c
  1846   0012D6  6ADA               	clrf	fsr2h,c
  1847   0012D8  0E03               	movlw	3
  1848   0012DA  26D9               	addwf	fsr2l,f,c
  1849   0012DC  50DF               	movf	indf2,w,c
  1850   0012DE  6E10               	movwf	(??_setMotorPWM+1)^0,c
  1851   0012E0  5007               	movf	?___lwdiv^0,w,c
  1852   0012E2  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  1853   0012E4  6E11               	movwf	setMotorPWM@posDuty^0,c
  1854   0012E6                     
  1855                           ;dc_motor_v1.c: 81:         negDuty=m->PWMperiod;
  1856   0012E6  500E               	movf	setMotorPWM@m^0,w,c
  1857   0012E8  6ED9               	movwf	fsr2l,c
  1858   0012EA  6ADA               	clrf	fsr2h,c
  1859   0012EC  0E03               	movlw	3
  1860   0012EE  26D9               	addwf	fsr2l,f,c
  1861   0012F0  50DF               	movf	indf2,w,c
  1862   0012F2  6E12               	movwf	setMotorPWM@negDuty^0,c
  1863                           
  1864                           ;dc_motor_v1.c: 82:     }
  1865   0012F4  EF9D  F009         	goto	l1398
  1866   0012F8                     l1394:
  1867                           
  1868                           ;dc_motor_v1.c: 84:         posDuty=0;
  1869   0012F8  0E00               	movlw	0
  1870   0012FA  6E11               	movwf	setMotorPWM@posDuty^0,c
  1871   0012FC                     
  1872                           ;dc_motor_v1.c: 85:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1873   0012FC  500E               	movf	setMotorPWM@m^0,w,c
  1874   0012FE  6ED9               	movwf	fsr2l,c
  1875   001300  6ADA               	clrf	fsr2h,c
  1876   001302  50DF               	movf	indf2,w,c
  1877   001304  6E0F               	movwf	??_setMotorPWM^0,c
  1878   001306  500F               	movf	??_setMotorPWM^0,w,c
  1879   001308  6E01               	movwf	___wmul@multiplier^0,c
  1880   00130A  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1881   00130C  500E               	movf	setMotorPWM@m^0,w,c
  1882   00130E  6ED9               	movwf	fsr2l,c
  1883   001310  6ADA               	clrf	fsr2h,c
  1884   001312  0E03               	movlw	3
  1885   001314  26D9               	addwf	fsr2l,f,c
  1886   001316  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1887   00131A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1888   00131E  EC7D  F00C         	call	___wmul	;wreg free
  1889   001322  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1890   001326  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1891   00132A  0E00               	movlw	0
  1892   00132C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1893   00132E  0E64               	movlw	100
  1894   001330  6E09               	movwf	___lwdiv@divisor^0,c
  1895   001332  EC2C  F00C         	call	___lwdiv	;wreg free
  1896   001336  5007               	movf	?___lwdiv^0,w,c
  1897   001338  6E12               	movwf	setMotorPWM@negDuty^0,c
  1898   00133A                     l1398:
  1899                           
  1900                           ;dc_motor_v1.c: 88:     if (m->direction) {
  1901   00133A  500E               	movf	setMotorPWM@m^0,w,c
  1902   00133C  6ED9               	movwf	fsr2l,c
  1903   00133E  6ADA               	clrf	fsr2h,c
  1904   001340  0E01               	movlw	1
  1905   001342  26D9               	addwf	fsr2l,f,c
  1906   001344  50DF               	movf	indf2,w,c
  1907   001346  B4D8               	btfsc	status,2,c
  1908   001348  EFA8  F009         	goto	u521
  1909   00134C  EFAA  F009         	goto	u520
  1910   001350                     u521:
  1911   001350  EFCA  F009         	goto	l1402
  1912   001354                     u520:
  1913   001354                     
  1914                           ;dc_motor_v1.c: 89:         *(m->posDutyHighByte)=posDuty;
  1915   001354  500E               	movf	setMotorPWM@m^0,w,c
  1916   001356  6ED9               	movwf	fsr2l,c
  1917   001358  6ADA               	clrf	fsr2h,c
  1918   00135A  0E05               	movlw	5
  1919   00135C  26D9               	addwf	fsr2l,f,c
  1920   00135E  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1921   001362  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1922   001366  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1923   00136A  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1924   00136E  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1925                           
  1926                           ;dc_motor_v1.c: 90:         *(m->negDutyHighByte)=negDuty;
  1927   001372  500E               	movf	setMotorPWM@m^0,w,c
  1928   001374  6ED9               	movwf	fsr2l,c
  1929   001376  6ADA               	clrf	fsr2h,c
  1930   001378  0E07               	movlw	7
  1931   00137A  26D9               	addwf	fsr2l,f,c
  1932   00137C  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1933   001380  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1934   001384  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1935   001388  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1936   00138C  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1937                           
  1938                           ;dc_motor_v1.c: 91:     } else {
  1939   001390  EFE8  F009         	goto	l136
  1940   001394                     l1402:
  1941                           
  1942                           ;dc_motor_v1.c: 92:         *(m->posDutyHighByte)=negDuty;
  1943   001394  500E               	movf	setMotorPWM@m^0,w,c
  1944   001396  6ED9               	movwf	fsr2l,c
  1945   001398  6ADA               	clrf	fsr2h,c
  1946   00139A  0E05               	movlw	5
  1947   00139C  26D9               	addwf	fsr2l,f,c
  1948   00139E  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1949   0013A2  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1950   0013A6  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1951   0013AA  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1952   0013AE  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1953                           
  1954                           ;dc_motor_v1.c: 93:         *(m->negDutyHighByte)=posDuty;
  1955   0013B2  500E               	movf	setMotorPWM@m^0,w,c
  1956   0013B4  6ED9               	movwf	fsr2l,c
  1957   0013B6  6ADA               	clrf	fsr2h,c
  1958   0013B8  0E07               	movlw	7
  1959   0013BA  26D9               	addwf	fsr2l,f,c
  1960   0013BC  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1961   0013C0  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1962   0013C4  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1963   0013C8  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1964   0013CC  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1965   0013D0                     l136:
  1966   0013D0  0012               	return		;funcret
  1967   0013D2                     __end_of_setMotorPWM:
  1968                           	callstack 0
  1969                           
  1970 ;; *************** function ___wmul *****************
  1971 ;; Defined at:
  1972 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;  multiplier      2    0[COMRAM] unsigned int 
  1975 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;  product         2    4[COMRAM] unsigned int 
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  2    0[COMRAM] unsigned int 
  1980 ;; Registers used:
  1981 ;;		wreg, status,2, status,0, prodl, prodh
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1987 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1988 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1990 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1991 ;;Total ram usage:        6 bytes
  1992 ;; Hardware stack levels used: 1
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_setMotorPWM
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text7
  2001   0018FA                     __ptext7:
  2002                           	callstack 0
  2003   0018FA                     ___wmul:
  2004                           	callstack 28
  2005   0018FA  5001               	movf	___wmul@multiplier^0,w,c
  2006   0018FC  0203               	mulwf	___wmul@multiplicand^0,c
  2007   0018FE  CFF3 F005          	movff	prodl,___wmul@product
  2008   001902  CFF4 F006          	movff	prodh,___wmul@product+1
  2009   001906  5001               	movf	___wmul@multiplier^0,w,c
  2010   001908  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2011   00190A  50F3               	movf	243,w,c
  2012   00190C  2606               	addwf	(___wmul@product+1)^0,f,c
  2013   00190E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2014   001910  0203               	mulwf	___wmul@multiplicand^0,c
  2015   001912  50F3               	movf	243,w,c
  2016   001914  2606               	addwf	(___wmul@product+1)^0,f,c
  2017   001916  C005  F001         	movff	___wmul@product,?___wmul
  2018   00191A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2019   00191E  0012               	return		;funcret
  2020   001920                     __end_of___wmul:
  2021                           	callstack 0
  2022                           
  2023 ;; *************** function ___lwdiv *****************
  2024 ;; Defined at:
  2025 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;  dividend        2    6[COMRAM] unsigned int 
  2028 ;;  divisor         2    8[COMRAM] unsigned int 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  quotient        2   10[COMRAM] unsigned int 
  2031 ;;  counter         1   12[COMRAM] unsigned char 
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  2    6[COMRAM] unsigned int 
  2034 ;; Registers used:
  2035 ;;		wreg, status,2, status,0
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2041 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2042 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2044 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2045 ;;Total ram usage:        7 bytes
  2046 ;; Hardware stack levels used: 1
  2047 ;; This function calls:
  2048 ;;		Nothing
  2049 ;; This function is called by:
  2050 ;;		_setMotorPWM
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           	psect	text8
  2055   001858                     __ptext8:
  2056                           	callstack 0
  2057   001858                     ___lwdiv:
  2058                           	callstack 28
  2059   001858  0E00               	movlw	0
  2060   00185A  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  2061   00185C  0E00               	movlw	0
  2062   00185E  6E0B               	movwf	___lwdiv@quotient^0,c
  2063   001860  5009               	movf	___lwdiv@divisor^0,w,c
  2064   001862  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2065   001864  B4D8               	btfsc	status,2,c
  2066   001866  EF37  F00C         	goto	u471
  2067   00186A  EF39  F00C         	goto	u470
  2068   00186E                     u471:
  2069   00186E  EF61  F00C         	goto	l732
  2070   001872                     u470:
  2071   001872  0E01               	movlw	1
  2072   001874  6E0D               	movwf	___lwdiv@counter^0,c
  2073   001876  EF41  F00C         	goto	l1368
  2074   00187A                     l1366:
  2075   00187A  90D8               	bcf	status,0,c
  2076   00187C  3609               	rlcf	___lwdiv@divisor^0,f,c
  2077   00187E  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2078   001880  2A0D               	incf	___lwdiv@counter^0,f,c
  2079   001882                     l1368:
  2080   001882  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2081   001884  EF46  F00C         	goto	u481
  2082   001888  EF48  F00C         	goto	u480
  2083   00188C                     u481:
  2084   00188C  EF3D  F00C         	goto	l1366
  2085   001890                     u480:
  2086   001890                     l1370:
  2087   001890  90D8               	bcf	status,0,c
  2088   001892  360B               	rlcf	___lwdiv@quotient^0,f,c
  2089   001894  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2090   001896  5009               	movf	___lwdiv@divisor^0,w,c
  2091   001898  5C07               	subwf	___lwdiv@dividend^0,w,c
  2092   00189A  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2093   00189C  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2094   00189E  A0D8               	btfss	status,0,c
  2095   0018A0  EF54  F00C         	goto	u491
  2096   0018A4  EF56  F00C         	goto	u490
  2097   0018A8                     u491:
  2098   0018A8  EF5B  F00C         	goto	l1378
  2099   0018AC                     u490:
  2100   0018AC  5009               	movf	___lwdiv@divisor^0,w,c
  2101   0018AE  5E07               	subwf	___lwdiv@dividend^0,f,c
  2102   0018B0  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2103   0018B2  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2104   0018B4  800B               	bsf	___lwdiv@quotient^0,0,c
  2105   0018B6                     l1378:
  2106   0018B6  90D8               	bcf	status,0,c
  2107   0018B8  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2108   0018BA  3209               	rrcf	___lwdiv@divisor^0,f,c
  2109   0018BC  2E0D               	decfsz	___lwdiv@counter^0,f,c
  2110   0018BE  EF48  F00C         	goto	l1370
  2111   0018C2                     l732:
  2112   0018C2  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  2113   0018C6  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2114   0018CA  0012               	return		;funcret
  2115   0018CC                     __end_of___lwdiv:
  2116                           	callstack 0
  2117                           
  2118 ;; *************** function _delay_ms_function *****************
  2119 ;; Defined at:
  2120 ;;		line 67 in file "dc_motor_v1.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;  milliseconds    2    0[COMRAM] unsigned int 
  2123 ;; Auto vars:     Size  Location     Type
  2124 ;;		None
  2125 ;; Return value:  Size  Location     Type
  2126 ;;                  1    wreg      void 
  2127 ;; Registers used:
  2128 ;;		wreg, status,2, status,0
  2129 ;; Tracked objects:
  2130 ;;		On entry : 0/0
  2131 ;;		On exit  : 0/0
  2132 ;;		Unchanged: 0/0
  2133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2134 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2136 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2137 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2138 ;;Total ram usage:        3 bytes
  2139 ;; Hardware stack levels used: 1
  2140 ;; This function calls:
  2141 ;;		Nothing
  2142 ;; This function is called by:
  2143 ;;		_forward
  2144 ;;		_turnLEFT
  2145 ;;		_turnRIGHT
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           	psect	text9
  2150   0018CC                     __ptext9:
  2151                           	callstack 0
  2152   0018CC                     _delay_ms_function:
  2153                           	callstack 29
  2154   0018CC                     
  2155                           ;dc_motor_v1.c: 68:     while (milliseconds > 0) {
  2156   0018CC  EF73  F00C         	goto	l126
  2157   0018D0                     l1384:
  2158                           
  2159                           ;dc_motor_v1.c: 69:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2160   0018D0  0E15               	movlw	21
  2161   0018D2  6E03               	movwf	??_delay_ms_function^0,c
  2162   0018D4  0EC6               	movlw	198
  2163   0018D6                     u1007:
  2164   0018D6  2EE8               	decfsz	wreg,f,c
  2165   0018D8  D7FE               	bra	u1007
  2166   0018DA  2E03               	decfsz	??_delay_ms_function^0,f,c
  2167   0018DC  D7FC               	bra	u1007
  2168   0018DE  D000               	nop2	
  2169   0018E0                     
  2170                           ;dc_motor_v1.c: 70:         milliseconds--;
  2171   0018E0  0601               	decf	delay_ms_function@milliseconds^0,f,c
  2172   0018E2  A0D8               	btfss	status,0,c
  2173   0018E4  0602               	decf	(delay_ms_function@milliseconds+1)^0,f,c
  2174   0018E6                     l126:
  2175                           
  2176                           ;dc_motor_v1.c: 68:     while (milliseconds > 0) {
  2177   0018E6  5001               	movf	delay_ms_function@milliseconds^0,w,c
  2178   0018E8  1002               	iorwf	(delay_ms_function@milliseconds+1)^0,w,c
  2179   0018EA  A4D8               	btfss	status,2,c
  2180   0018EC  EF7A  F00C         	goto	u501
  2181   0018F0  EF7C  F00C         	goto	u500
  2182   0018F4                     u501:
  2183   0018F4  EF68  F00C         	goto	l1384
  2184   0018F8                     u500:
  2185   0018F8  0012               	return		;funcret
  2186   0018FA                     __end_of_delay_ms_function:
  2187                           	callstack 0
  2188                           
  2189 ;; *************** function ___awdiv *****************
  2190 ;; Defined at:
  2191 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;  dividend        2    0[COMRAM] int 
  2194 ;;  divisor         2    2[COMRAM] int 
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;  quotient        2    6[COMRAM] int 
  2197 ;;  sign            1    5[COMRAM] unsigned char 
  2198 ;;  counter         1    4[COMRAM] unsigned char 
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  2    0[COMRAM] int 
  2201 ;; Registers used:
  2202 ;;		wreg, status,2, status,0
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2208 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2209 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2211 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2212 ;;Total ram usage:        8 bytes
  2213 ;; Hardware stack levels used: 1
  2214 ;; This function calls:
  2215 ;;		Nothing
  2216 ;; This function is called by:
  2217 ;;		_forward
  2218 ;;		_turnLEFT
  2219 ;;		_turnRIGHT
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text10
  2224   001652                     __ptext10:
  2225                           	callstack 0
  2226   001652                     ___awdiv:
  2227                           	callstack 29
  2228   001652  0E00               	movlw	0
  2229   001654  6E06               	movwf	___awdiv@sign^0,c
  2230   001656  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2231   001658  EF32  F00B         	goto	u530
  2232   00165C  EF30  F00B         	goto	u531
  2233   001660                     u531:
  2234   001660  EF38  F00B         	goto	l1412
  2235   001664                     u530:
  2236   001664  6C03               	negf	___awdiv@divisor^0,c
  2237   001666  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2238   001668  B0D8               	btfsc	status,0,c
  2239   00166A  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2240   00166C  0E01               	movlw	1
  2241   00166E  6E06               	movwf	___awdiv@sign^0,c
  2242   001670                     l1412:
  2243   001670  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2244   001672  EF3F  F00B         	goto	u540
  2245   001676  EF3D  F00B         	goto	u541
  2246   00167A                     u541:
  2247   00167A  EF45  F00B         	goto	l1418
  2248   00167E                     u540:
  2249   00167E  6C01               	negf	___awdiv@dividend^0,c
  2250   001680  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2251   001682  B0D8               	btfsc	status,0,c
  2252   001684  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2253   001686  0E01               	movlw	1
  2254   001688  1A06               	xorwf	___awdiv@sign^0,f,c
  2255   00168A                     l1418:
  2256   00168A  0E00               	movlw	0
  2257   00168C  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2258   00168E  0E00               	movlw	0
  2259   001690  6E07               	movwf	___awdiv@quotient^0,c
  2260   001692  5003               	movf	___awdiv@divisor^0,w,c
  2261   001694  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2262   001696  B4D8               	btfsc	status,2,c
  2263   001698  EF50  F00B         	goto	u551
  2264   00169C  EF52  F00B         	goto	u550
  2265   0016A0                     u551:
  2266   0016A0  EF7A  F00B         	goto	l1440
  2267   0016A4                     u550:
  2268   0016A4  0E01               	movlw	1
  2269   0016A6  6E05               	movwf	___awdiv@counter^0,c
  2270   0016A8  EF5A  F00B         	goto	l1426
  2271   0016AC                     l1424:
  2272   0016AC  90D8               	bcf	status,0,c
  2273   0016AE  3603               	rlcf	___awdiv@divisor^0,f,c
  2274   0016B0  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2275   0016B2  2A05               	incf	___awdiv@counter^0,f,c
  2276   0016B4                     l1426:
  2277   0016B4  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2278   0016B6  EF5F  F00B         	goto	u561
  2279   0016BA  EF61  F00B         	goto	u560
  2280   0016BE                     u561:
  2281   0016BE  EF56  F00B         	goto	l1424
  2282   0016C2                     u560:
  2283   0016C2                     l1428:
  2284   0016C2  90D8               	bcf	status,0,c
  2285   0016C4  3607               	rlcf	___awdiv@quotient^0,f,c
  2286   0016C6  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2287   0016C8  5003               	movf	___awdiv@divisor^0,w,c
  2288   0016CA  5C01               	subwf	___awdiv@dividend^0,w,c
  2289   0016CC  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2290   0016CE  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2291   0016D0  A0D8               	btfss	status,0,c
  2292   0016D2  EF6D  F00B         	goto	u571
  2293   0016D6  EF6F  F00B         	goto	u570
  2294   0016DA                     u571:
  2295   0016DA  EF74  F00B         	goto	l1436
  2296   0016DE                     u570:
  2297   0016DE  5003               	movf	___awdiv@divisor^0,w,c
  2298   0016E0  5E01               	subwf	___awdiv@dividend^0,f,c
  2299   0016E2  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2300   0016E4  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2301   0016E6  8007               	bsf	___awdiv@quotient^0,0,c
  2302   0016E8                     l1436:
  2303   0016E8  90D8               	bcf	status,0,c
  2304   0016EA  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2305   0016EC  3203               	rrcf	___awdiv@divisor^0,f,c
  2306   0016EE  2E05               	decfsz	___awdiv@counter^0,f,c
  2307   0016F0  EF61  F00B         	goto	l1428
  2308   0016F4                     l1440:
  2309   0016F4  5006               	movf	___awdiv@sign^0,w,c
  2310   0016F6  B4D8               	btfsc	status,2,c
  2311   0016F8  EF80  F00B         	goto	u581
  2312   0016FC  EF82  F00B         	goto	u580
  2313   001700                     u581:
  2314   001700  EF86  F00B         	goto	l1444
  2315   001704                     u580:
  2316   001704  6C07               	negf	___awdiv@quotient^0,c
  2317   001706  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2318   001708  B0D8               	btfsc	status,0,c
  2319   00170A  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2320   00170C                     l1444:
  2321   00170C  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2322   001710  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2323   001714  0012               	return		;funcret
  2324   001716                     __end_of___awdiv:
  2325                           	callstack 0
  2326                           
  2327 ;; *************** function _adjust_calibration *****************
  2328 ;; Defined at:
  2329 ;;		line 6 in file "calibration.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;  calibration_    1    0[COMRAM] PTR int 
  2332 ;;		 -> calibration(9), 
  2333 ;; Auto vars:     Size  Location     Type
  2334 ;;		None
  2335 ;; Return value:  Size  Location     Type
  2336 ;;                  1    wreg      void 
  2337 ;; Registers used:
  2338 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2339 ;; Tracked objects:
  2340 ;;		On entry : 0/0
  2341 ;;		On exit  : 0/0
  2342 ;;		Unchanged: 0/0
  2343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2344 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2346 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2347 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2348 ;;Total ram usage:        5 bytes
  2349 ;; Hardware stack levels used: 1
  2350 ;; This function calls:
  2351 ;;		Nothing
  2352 ;; This function is called by:
  2353 ;;		_main
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text11
  2358   0013D2                     __ptext11:
  2359                           	callstack 0
  2360   0013D2                     _adjust_calibration:
  2361                           	callstack 30
  2362   0013D2                     l44:
  2363                           
  2364                           ;calibration.c: 11:         if(!PORTFbits.RF3 || !PORTFbits.RF2){
  2365   0013D2  A68E               	btfss	142,3,c	;volatile
  2366   0013D4  EFEE  F009         	goto	u591
  2367   0013D8  EFF0  F009         	goto	u590
  2368   0013DC                     u591:
  2369   0013DC  EFF7  F009         	goto	l1450
  2370   0013E0                     u590:
  2371   0013E0  B48E               	btfsc	142,2,c	;volatile
  2372   0013E2  EFF5  F009         	goto	u601
  2373   0013E6  EFF7  F009         	goto	u600
  2374   0013EA                     u601:
  2375   0013EA  EFE9  F009         	goto	l44
  2376   0013EE                     u600:
  2377   0013EE                     l1450:
  2378                           
  2379                           ;calibration.c: 12:             _delay((unsigned long)((100)*(64000000/4000.0)));
  2380   0013EE  0E09               	movlw	9
  2381   0013F0  6E03               	movwf	(??_adjust_calibration+1)^0,c
  2382   0013F2  0E1E               	movlw	30
  2383   0013F4  6E02               	movwf	??_adjust_calibration^0,c
  2384   0013F6  0EE4               	movlw	228
  2385   0013F8                     u1017:
  2386   0013F8  2EE8               	decfsz	wreg,f,c
  2387   0013FA  D7FE               	bra	u1017
  2388   0013FC  2E02               	decfsz	??_adjust_calibration^0,f,c
  2389   0013FE  D7FC               	bra	u1017
  2390   001400  2E03               	decfsz	(??_adjust_calibration+1)^0,f,c
  2391   001402  D7FA               	bra	u1017
  2392   001404  D000               	nop2	
  2393   001406                     
  2394                           ;calibration.c: 14:             if(!PORTFbits.RF3 && !PORTFbits.RF2 ){
  2395   001406  B68E               	btfsc	142,3,c	;volatile
  2396   001408  EF08  F00A         	goto	u611
  2397   00140C  EF0A  F00A         	goto	u610
  2398   001410                     u611:
  2399   001410  EF23  F00A         	goto	l48
  2400   001414                     u610:
  2401   001414  B48E               	btfsc	142,2,c	;volatile
  2402   001416  EF0F  F00A         	goto	u621
  2403   00141A  EF11  F00A         	goto	u620
  2404   00141E                     u621:
  2405   00141E  EF23  F00A         	goto	l48
  2406   001422                     u620:
  2407   001422                     
  2408                           ;calibration.c: 16:                 LATHbits.LATH3 = 1;
  2409   001422  8680               	bsf	128,3,c	;volatile
  2410                           
  2411                           ;calibration.c: 17:                 LATDbits.LATD7 = 1;
  2412   001424  8E7C               	bsf	124,7,c	;volatile
  2413   001426                     
  2414                           ;calibration.c: 18:                 _delay((unsigned long)((1000)*(64000000/4000.0)));
  2415   001426  0E52               	movlw	82
  2416   001428  6E03               	movwf	(??_adjust_calibration+1)^0,c
  2417   00142A  0E2B               	movlw	43
  2418   00142C  6E02               	movwf	??_adjust_calibration^0,c
  2419   00142E  0E00               	movlw	0
  2420   001430                     u1027:
  2421   001430  2EE8               	decfsz	wreg,f,c
  2422   001432  D7FE               	bra	u1027
  2423   001434  2E02               	decfsz	??_adjust_calibration^0,f,c
  2424   001436  D7FC               	bra	u1027
  2425   001438  2E03               	decfsz	(??_adjust_calibration+1)^0,f,c
  2426   00143A  D7FA               	bra	u1027
  2427   00143C  D000               	nop2	
  2428   00143E                     
  2429                           ;calibration.c: 19:                 LATHbits.LATH3 = 0;
  2430   00143E  9680               	bcf	128,3,c	;volatile
  2431   001440                     
  2432                           ;calibration.c: 20:                 LATDbits.LATD7 = 0;
  2433   001440  9E7C               	bcf	124,7,c	;volatile
  2434                           
  2435                           ;calibration.c: 21:                 break;
  2436   001442  EF8F  F00A         	goto	l54
  2437   001446                     l48:
  2438                           
  2439                           ;calibration.c: 24:                 if(!PORTFbits.RF2){
  2440   001446  B48E               	btfsc	142,2,c	;volatile
  2441   001448  EF28  F00A         	goto	u631
  2442   00144C  EF2A  F00A         	goto	u630
  2443   001450                     u631:
  2444   001450  EF56  F00A         	goto	l1476
  2445   001454                     u630:
  2446   001454                     
  2447                           ;calibration.c: 25:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  2448   001454  0E11               	movlw	17
  2449   001456  6E03               	movwf	(??_adjust_calibration+1)^0,c
  2450   001458  0E3C               	movlw	60
  2451   00145A  6E02               	movwf	??_adjust_calibration^0,c
  2452   00145C  0ECB               	movlw	203
  2453   00145E                     u1037:
  2454   00145E  2EE8               	decfsz	wreg,f,c
  2455   001460  D7FE               	bra	u1037
  2456   001462  2E02               	decfsz	??_adjust_calibration^0,f,c
  2457   001464  D7FC               	bra	u1037
  2458   001466  2E03               	decfsz	(??_adjust_calibration+1)^0,f,c
  2459   001468  D7FA               	bra	u1037
  2460   00146A  0000               	nop	
  2461   00146C                     
  2462                           ;calibration.c: 26:                     *calibration_label = *calibration_label + 5;
  2463   00146C  5001               	movf	adjust_calibration@calibration_label^0,w,c
  2464   00146E  6ED9               	movwf	fsr2l,c
  2465   001470  6ADA               	clrf	fsr2h,c
  2466   001472  CFDE F002          	movff	postinc2,??_adjust_calibration
  2467   001476  CFDD F003          	movff	postdec2,??_adjust_calibration+1
  2468   00147A  0E05               	movlw	5
  2469   00147C  2602               	addwf	??_adjust_calibration^0,f,c
  2470   00147E  0E00               	movlw	0
  2471   001480  2203               	addwfc	(??_adjust_calibration+1)^0,f,c
  2472   001482  5001               	movf	adjust_calibration@calibration_label^0,w,c
  2473   001484  6ED9               	movwf	fsr2l,c
  2474   001486  6ADA               	clrf	fsr2h,c
  2475   001488  C002  FFDE         	movff	??_adjust_calibration,postinc2
  2476   00148C  C003  FFDD         	movff	??_adjust_calibration+1,postdec2
  2477   001490                     
  2478                           ;calibration.c: 27:                     LATDbits.LATD7 = 1;
  2479   001490  8E7C               	bsf	124,7,c	;volatile
  2480   001492                     
  2481                           ;calibration.c: 28:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  2482   001492  0E11               	movlw	17
  2483   001494  6E03               	movwf	(??_adjust_calibration+1)^0,c
  2484   001496  0E3C               	movlw	60
  2485   001498  6E02               	movwf	??_adjust_calibration^0,c
  2486   00149A  0ECB               	movlw	203
  2487   00149C                     u1047:
  2488   00149C  2EE8               	decfsz	wreg,f,c
  2489   00149E  D7FE               	bra	u1047
  2490   0014A0  2E02               	decfsz	??_adjust_calibration^0,f,c
  2491   0014A2  D7FC               	bra	u1047
  2492   0014A4  2E03               	decfsz	(??_adjust_calibration+1)^0,f,c
  2493   0014A6  D7FA               	bra	u1047
  2494   0014A8  0000               	nop	
  2495   0014AA                     
  2496                           ;calibration.c: 29:                     LATDbits.LATD7 = 0;
  2497   0014AA  9E7C               	bcf	124,7,c	;volatile
  2498   0014AC                     l1476:
  2499                           
  2500                           ;calibration.c: 32:                 if(!PORTFbits.RF3){
  2501   0014AC  B68E               	btfsc	142,3,c	;volatile
  2502   0014AE  EF5B  F00A         	goto	u641
  2503   0014B2  EF5D  F00A         	goto	u640
  2504   0014B6                     u641:
  2505   0014B6  EF8D  F00A         	goto	l45
  2506   0014BA                     u640:
  2507   0014BA                     
  2508                           ;calibration.c: 33:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  2509   0014BA  0E11               	movlw	17
  2510   0014BC  6E03               	movwf	(??_adjust_calibration+1)^0,c
  2511   0014BE  0E3C               	movlw	60
  2512   0014C0  6E02               	movwf	??_adjust_calibration^0,c
  2513   0014C2  0ECB               	movlw	203
  2514   0014C4                     u1057:
  2515   0014C4  2EE8               	decfsz	wreg,f,c
  2516   0014C6  D7FE               	bra	u1057
  2517   0014C8  2E02               	decfsz	??_adjust_calibration^0,f,c
  2518   0014CA  D7FC               	bra	u1057
  2519   0014CC  2E03               	decfsz	(??_adjust_calibration+1)^0,f,c
  2520   0014CE  D7FA               	bra	u1057
  2521   0014D0  0000               	nop	
  2522   0014D2                     
  2523                           ;calibration.c: 34:                     *calibration_label = *calibration_label - 5;
  2524   0014D2  5001               	movf	adjust_calibration@calibration_label^0,w,c
  2525   0014D4  6ED9               	movwf	fsr2l,c
  2526   0014D6  6ADA               	clrf	fsr2h,c
  2527   0014D8  CFDE F002          	movff	postinc2,??_adjust_calibration
  2528   0014DC  CFDD F003          	movff	postdec2,??_adjust_calibration+1
  2529   0014E0  0EFB               	movlw	251
  2530   0014E2  2402               	addwf	??_adjust_calibration^0,w,c
  2531   0014E4  6E04               	movwf	(??_adjust_calibration+2)^0,c
  2532   0014E6  0EFF               	movlw	255
  2533   0014E8  2003               	addwfc	(??_adjust_calibration+1)^0,w,c
  2534   0014EA  6E05               	movwf	(??_adjust_calibration+3)^0,c
  2535   0014EC  5001               	movf	adjust_calibration@calibration_label^0,w,c
  2536   0014EE  6ED9               	movwf	fsr2l,c
  2537   0014F0  6ADA               	clrf	fsr2h,c
  2538   0014F2  C004  FFDE         	movff	??_adjust_calibration+2,postinc2
  2539   0014F6  C005  FFDD         	movff	??_adjust_calibration+3,postdec2
  2540   0014FA                     
  2541                           ;calibration.c: 35:                     LATHbits.LATH3 = 1;
  2542   0014FA  8680               	bsf	128,3,c	;volatile
  2543   0014FC                     
  2544                           ;calibration.c: 36:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  2545   0014FC  0E11               	movlw	17
  2546   0014FE  6E03               	movwf	(??_adjust_calibration+1)^0,c
  2547   001500  0E3C               	movlw	60
  2548   001502  6E02               	movwf	??_adjust_calibration^0,c
  2549   001504  0ECB               	movlw	203
  2550   001506                     u1067:
  2551   001506  2EE8               	decfsz	wreg,f,c
  2552   001508  D7FE               	bra	u1067
  2553   00150A  2E02               	decfsz	??_adjust_calibration^0,f,c
  2554   00150C  D7FC               	bra	u1067
  2555   00150E  2E03               	decfsz	(??_adjust_calibration+1)^0,f,c
  2556   001510  D7FA               	bra	u1067
  2557   001512  0000               	nop	
  2558   001514                     
  2559                           ;calibration.c: 37:                     LATHbits.LATH3 = 0;
  2560   001514  9680               	bcf	128,3,c	;volatile
  2561   001516  EFE9  F009         	goto	l44
  2562   00151A                     l45:
  2563   00151A  EFE9  F009         	goto	l44
  2564   00151E                     l54:
  2565   00151E  0012               	return		;funcret
  2566   001520                     __end_of_adjust_calibration:
  2567                           	callstack 0
  2568                           
  2569                           	psect	smallconst
  2570   000E00                     __psmallconst:
  2571                           	callstack 0
  2572   000E00  00                 	db	0
  2573   000E01  00                 	db	0	; dummy byte at the end
  2574   000000                     
  2575                           	psect	rparam
  2576   000000                     
  2577                           	psect	config
  2578                           
  2579                           ;Config register CONFIG1L @ 0x300000
  2580                           ;	External Oscillator mode Selection bits
  2581                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2582                           ;	Power-up default value for COSC bits
  2583                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2584   300000                     	org	3145728
  2585   300000  AA                 	db	170
  2586                           
  2587                           ;Config register CONFIG1H @ 0x300001
  2588                           ;	unspecified, using default values
  2589                           ;	Clock Out Enable bit
  2590                           ;	CLKOUTEN = 0x1, unprogrammed default
  2591                           ;	Clock Switch Enable bit
  2592                           ;	CSWEN = 0x1, unprogrammed default
  2593                           ;	Fail-Safe Clock Monitor Enable bit
  2594                           ;	FCMEN = 0x1, unprogrammed default
  2595   300001                     	org	3145729
  2596   300001  FF                 	db	255
  2597                           
  2598                           ;Config register CONFIG3L @ 0x300004
  2599                           ;	WDT Period Select bits
  2600                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2601                           ;	WDT operating mode
  2602                           ;	WDTE = OFF, WDT Disabled
  2603   300004                     	org	3145732
  2604   300004  9F                 	db	159
  2605                           
  2606                           ;Config register CONFIG3H @ 0x300005
  2607                           ;	unspecified, using default values
  2608                           ;	WDT Window Select bits
  2609                           ;	WDTCWS = 0x7, unprogrammed default
  2610                           ;	WDT input clock selector
  2611                           ;	WDTCCS = 0x7, unprogrammed default
  2612   300005                     	org	3145733
  2613   300005  FF                 	db	255
  2614                           tosu	equ	0xFFF
  2615                           tosh	equ	0xFFE
  2616                           tosl	equ	0xFFD
  2617                           stkptr	equ	0xFFC
  2618                           pclatu	equ	0xFFB
  2619                           pclath	equ	0xFFA
  2620                           pcl	equ	0xFF9
  2621                           tblptru	equ	0xFF8
  2622                           tblptrh	equ	0xFF7
  2623                           tblptrl	equ	0xFF6
  2624                           tablat	equ	0xFF5
  2625                           prodh	equ	0xFF4
  2626                           prodl	equ	0xFF3
  2627                           indf0	equ	0xFEF
  2628                           postinc0	equ	0xFEE
  2629                           postdec0	equ	0xFED
  2630                           preinc0	equ	0xFEC
  2631                           plusw0	equ	0xFEB
  2632                           fsr0h	equ	0xFEA
  2633                           fsr0l	equ	0xFE9
  2634                           wreg	equ	0xFE8
  2635                           indf1	equ	0xFE7
  2636                           postinc1	equ	0xFE6
  2637                           postdec1	equ	0xFE5
  2638                           preinc1	equ	0xFE4
  2639                           plusw1	equ	0xFE3
  2640                           fsr1h	equ	0xFE2
  2641                           fsr1l	equ	0xFE1
  2642                           bsr	equ	0xFE0
  2643                           indf2	equ	0xFDF
  2644                           postinc2	equ	0xFDE
  2645                           postdec2	equ	0xFDD
  2646                           preinc2	equ	0xFDC
  2647                           plusw2	equ	0xFDB
  2648                           fsr2h	equ	0xFDA
  2649                           fsr2l	equ	0xFD9
  2650                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     32      60
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    adjust_calibration@calibration_label	PTR int  size(1) Largest target is 9
		 -> calibration(COMRAM[9]), 

    forward@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    forward@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    forward@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    forward@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    forward@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    forward@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    S78DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    S78DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    switch_calibration@calibration_index	PTR int  size(1) Largest target is 9
		 -> calibration(COMRAM[9]), 

    turnLEFT@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLEFT@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    turnLEFT@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    turnLEFT@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLEFT@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    turnLEFT@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    turnRIGHT@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRIGHT@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    turnRIGHT@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 

    turnRIGHT@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRIGHT@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRlllhhhlll[1]), 

    turnRIGHT@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRlllhhhlll[1]), 


Critical Paths under _main in COMRAM

    _main->_forward
    _main->_turnLEFT
    _main->_turnRIGHT
    _turnRIGHT->_setMotorPWM
    _turnLEFT->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   12918
                 _adjust_calibration
                            _forward
                    _initDCmotorsPWM
                 _switch_calibration
                           _turnLEFT
                          _turnRIGHT
 ---------------------------------------------------------------------------------
 (1) _turnRIGHT                                           16    14      2    4055
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLEFT                                            16    14      2    4055
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _switch_calibration                                   3     2      1     272
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                             16    14      2    4055
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2133
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _delay_ms_function                                    3     1      2     479
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     756
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _adjust_calibration                                   5     4      1     316
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adjust_calibration
   _forward
     ___awdiv
     _delay_ms_function
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _switch_calibration
   _turnLEFT
     ___awdiv
     _delay_ms_function
     _setMotorPWM
   _turnRIGHT
     ___awdiv
     _delay_ms_function
     _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      49        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRlllll      7A      0       0      47        0.0%
BITBIGSFRlllhhh     6C      0       0      42        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     20      3C       1       63.2%
BITBIGSFRlllhhh     54      0       0      40        0.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRlllhhh     2B      0       0      43        0.0%
BITBIGSFRhlll       17      0       0      36        0.0%
BITBIGSFRlllhhl     11      0       0      44        0.0%
BITBIGSFRhlhh        E      0       0      33        0.0%
BITBIGSFRllllh       A      0       0      46        0.0%
BITBIGSFRlhhh        5      0       0      37        0.0%
BITBIGSFRlllhhh      2      0       0      41        0.0%
BITBIGSFRhllh        2      0       0      35        0.0%
BITBIGSFRlhll        2      0       0      38        0.0%
BITBIGSFRhlhl        1      0       0      34        0.0%
BITBIGSFRlllhl       1      0       0      45        0.0%
BITBIGSFRllh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3C      48        0.0%
DATA                 0      0      3C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 21:38:35 2024

                                 l44 13D2                                   l45 151A  
                                 l54 151E                                   l62 17C2  
                                 l48 1446                                   l57 1716  
                                 l58 1780                         ___awdiv@sign 0006  
                ___wmul@multiplicand 0003                                  l123 1856  
                                l126 18E6                                  l150 0ED4  
                                l136 13D0                                  l129 18F8  
                                l241 191E                                  l172 127C  
                                l164 11D0                                  l158 0F80  
                                l238 164E                                  l186 10FE  
                                l178 1052                                  l472 1714  
                                l732 18C2                                  l739 18CA  
                                u500 18F8                                  u501 18F4  
                                u510 1298                                  u511 1294  
                                u600 13EE                                  u520 1354  
                                u601 13EA                                  u521 1350  
                                u610 1414                                  u530 1664  
                                u611 1410                                  u531 1660  
                                u620 1422                                  u540 167E  
                                u700 0F30                                  u621 141E  
                                u541 167A                                  u701 0F2C  
                                u630 1454                                  u550 16A4  
                                u470 1872                                  u710 0F6A  
                                u631 1450                                  u551 16A0  
                                u471 186E                                  u711 0F66  
                                u640 14BA                                  u560 16C2  
                                u480 1890                                  u720 0F80  
                                u800 1076                                  u641 14B6  
                                u561 16BE                                  u481 188C  
                                u721 0F7C                                  u801 1072  
                                u570 16DE                                  u490 18AC  
                                u650 1724                                  u730 11B2  
                                u810 1090                                  u571 16DA  
                                u491 18A8                                  u651 1720  
                                u731 11AE                                  u811 108C  
                                u580 1704                                  u660 178E  
                                u740 11F4                                  u820 10AE  
                                u900 15EA                                  u581 1700  
                                u661 178A                                  u741 11F0  
                                u821 10AA                                  u901 15E6  
                                u590 13E0                                  u670 0EB6  
                                u750 120E                                  u830 10E8  
                                u910 161A                                  u591 13DC  
                                u671 0EB2                                  u751 120A  
                                u831 10E4                                  u911 1616  
                                u680 0EF8                                  u760 122C  
                                u840 10FE                                  u920 164A  
                                u681 0EF4                                  u761 1228  
                                u841 10FA                                  u921 1646  
                                u690 0F12                                  u770 1266  
                                u691 0F0E                                  u771 1262  
                                u780 127C                                  u781 1278  
                                u790 1034                                  u791 1030  
                                u937 1046                                  u890 15BA  
                                u947 11C4                                  u891 15B6  
                                u957 172E                                  u967 176C  
                                u977 1798                                  u987 17B2  
                                u997 0EC8                                  wreg 0FE8  
         __end_of_adjust_calibration 1520                                 l1400 1354  
                               l1410 166C                                 l1402 1394  
                               l1420 1692                                 l1412 1670  
                               l1404 1652                                 l1500 17A6  
                               l1430 16C8                                 l1422 16A4  
                               l1414 167E                                 l1406 1656  
                               l1510 17FE                                 l1502 17C0  
                               l1432 16DE                                 l1424 16AC  
                               l1440 16F4                                 l1416 1686  
                               l1408 1664                                 l1360 1858  
                               l1520 183A                                 l1512 1822  
                               l1504 17C4                                 l1600 11B2  
                               l1450 13EE                                 l1442 1704  
                               l1434 16E6                                 l1426 16B4  
                               l1418 168A                                 l1370 1890  
                               l1362 1860                                 l1354 18FA  
                               l1530 1854                                 l1522 1844  
                               l1514 182C                                 l1506 17D4  
                               l1610 1216                                 l1602 11BE  
                               l1460 143E                                 l1452 1406  
                               l1444 170C                                 l1436 16E8  
                               l1428 16C2                                 l1380 18BC  
                               l1372 1896                                 l1364 1872  
                               l1356 1916                                 l1540 0E44  
                               l1532 0E04                                 l1524 1846  
                               l1516 182E                                 l1508 17FA  
                               l1612 122C                                 l1620 1250  
                               l1604 11CC                                 l1700 1538  
                               l1470 1490                                 l1462 1440  
                               l1454 1414                                 l1438 16EE  
                               l1382 18CC                                 l1374 18AC  
                               l1366 187A                                 l1390 1298  
                               l1550 0E94                                 l1542 0E50  
                               l1534 0E20                                 l1526 1850  
                               l1518 1838                                 l1622 1266  
                               l1614 1234                                 l1606 11F8  
                               l1630 0FA6                                 l1710 1558  
                               l1702 1540                                 l1480 14D2  
                               l1472 1492                                 l1456 1422  
                               l1448 13E0                                 l1384 18D0  
                               l1376 18B4                                 l1368 1882  
                               l1392 12E6                                 l1560 0EFC  
                               l1544 0E78                                 l1552 0E98  
                               l1536 0E28                                 l1528 1852  
                               l1616 123C                                 l1608 120E  
                               l1640 1006                                 l1632 0FC2  
                               l1624 0F84                                 l1720 1576  
                               l1712 155C                                 l1704 1548  
                               l1482 14FA                                 l1474 14AA  
                               l1466 1454                                 l1458 1426  
                               l1386 18E0                                 l1378 18B6  
                               l1394 12F8                                 l1570 0F40  
                               l1562 0F12                                 l1554 0EB6  
                               l1546 0E80                                 l1538 0E28  
                               l1490 173C                                 l1618 1244  
                               l1650 104E                                 l1642 1012  
                               l1634 0FCE                                 l1626 0F9E  
                               l1730 1582                                 l1722 1578  
                               l1714 1564                                 l1706 1550  
                               l1484 14FC                                 l1468 146C  
                               l1476 14AC                                 l1396 12FC  
                               l1388 127E                                 l1572 0F48  
                               l1564 0F1A                                 l1556 0EC2  
                               l1548 0E88                                 l1492 1760  
                               l1580 111C                                 l1660 10B6  
                               l1652 107A                                 l1636 0FF6  
                               l1644 1016                                 l1628 0FA6  
                               l1740 1592                                 l1732 1584  
                               l1724 157A                                 l1716 156C  
                               l1708 1554                                 l1486 1514  
                               l1478 14BA                                 l1398 133A  
                               l1566 0F30                                 l1574 0F54  
                               l1558 0ED0                                 l1494 1762  
                               l1590 1174                                 l1582 1124  
                               l1662 10BE                                 l1654 1090  
                               l1646 1034                                 l1638 0FFE  
                               l1750 15A6                                 l1742 1596  
                               l1734 1586                                 l1726 157C  
                               l1718 1574                                 l1576 0F6A  
                               l1568 0F38                                 l1496 177A  
                               l1488 1724                                 l1592 117C  
                               l1584 1124                                 l1664 10C6  
                               l1656 1098                                 l1648 1040  
                               l1760 15D8                                 l1752 15AA  
                               l1744 159A                                 l1736 158A  
                               l1728 157E                                 l1498 178E  
                               l1594 1184                                 l1586 1140  
                               l1578 1102                                 l1658 10AE  
                               l1666 10D2                                 l1770 161A  
                               l1762 15EA                                 l1754 15BA  
                               l1746 159E                                 l1738 158E  
                               l1690 1520                                 l1596 1190  
                               l1588 114C                                 l1668 10E8  
                               l1772 1622                                 l1764 15F2  
                               l1756 15C2                                 l1748 15A2  
                               l1692 1520                                 l1598 1194  
                               l1774 1630                                 l1766 1600  
                               l1758 15D0                                 l1694 152C  
                               l1776 1638                                 l1768 1608  
                               l1696 1530                                 l1778 164A  
                               l1698 1534                                 u1007 18D6  
                               u1017 13F8                                 u1027 1430  
                               u1037 145E                                 u1047 149C  
                               u1057 14C4                                 u1067 1506  
                               _T2PR 0FBC                                 _main 1520  
                               _temp 003C                                 fsr1h 0FE2  
                               fsr2h 0FDA                                 indf1 0FE7  
                               indf2 0FDF                                 fsr1l 0FE1  
                               fsr2l 0FD9                                 prodh 0FF4  
                               prodl 0FF3                                 start 0000  
                       ___param_bank 0000                                ?_main 0001  
                    __end_of___awdiv 1716                      ___awdiv@divisor 0003  
                    __end_of___lwdiv 18CC                      ___awdiv@counter 0005  
                    __end_of_forward 0F82                                tablat 0FF5  
                              status 0FD8                   _switch_calibration 1716  
                    __initialization 1920                         __end_of_main 1652  
                ?_switch_calibration 0001                               ??_main 0021  
                      __activetblptr 0000                         ?_setMotorPWM 000E  
                             _CCPR1H 0FAA                               _CCPR2H 0FA6  
                             _CCPR3H 0F25                               _CCPR4H 0F21  
                   ___awdiv@dividend 0001                 ??_switch_calibration 0002  
                             _RE2PPS 0E74                               _RC7PPS 0E69  
                             _RE4PPS 0E76                               _RG6PPS 0E88  
                   forward@max_power 001D                         _CCPTMRS0bits 0FAD  
                             ___wmul 18FA                            ??___awdiv 0005  
                          ??___lwdiv 000B        delay_ms_function@milliseconds 0001  
                             clear_0 1938                     ___awdiv@quotient 0007  
                             _motorL 002A                               _motorR 0021  
                             isa$std 0001                         __pdataCOMRAM 003C  
                          ??_forward 0015                         __mediumconst 0000  
                             tblptrh 0FF7                               tblptrl 0FF6  
                             tblptru 0FF8                    ??_initDCmotorsPWM 0003  
                   __end_of_turnLEFT 127E                           __accesstop 0060  
            __end_of__initialization 193E                        ___rparam_used 0001  
                     __pcstackCOMRAM 0001                    forward@delay_time 001F  
                       _T2CLKCONbits 0FBF                   _adjust_calibration 13D2  
                            ?___wmul 0001                  ?_adjust_calibration 0001  
                  _delay_ms_function 18CC                   ?_delay_ms_function 0001  
                ??_delay_ms_function 0003                 ??_adjust_calibration 0002  
       turnLEFT@rotation_calibration 0018                              __Hparam 0000  
                            __Lparam 0000                              ___awdiv 1652  
                            ___lwdiv 1858                         __psmallconst 0E00  
                          ?_turnLEFT 0013            __end_of_delay_ms_function 18FA  
                            __pcinit 1920                              __ramtop 0E00  
                            __ptext0 1520                              __ptext1 0F82  
                            __ptext2 1100                              __ptext3 1716  
                            __ptext4 17C4                              __ptext5 0E02  
                            __ptext6 127E                              __ptext7 18FA  
                            __ptext8 1858                              __ptext9 18CC  
                          _T2CONbits 0FBD                              _forward 0E02  
                          _T2HLTbits 0FBE                 end_of_initialization 193E  
                            postdec2 0FDD                              postinc0 0FEE  
                            postinc2 0FDE                           ??_turnLEFT 0015  
                  __end_of_turnRIGHT 1100                      _initDCmotorsPWM 17C4  
                 turnRIGHT@max_power 001D                            _PORTFbits 0F8E  
                 setMotorPWM@negDuty 0012                   setMotorPWM@posDuty 0011  
                          _TRISCbits 0F83                            _TRISDbits 0F84  
                          _TRISEbits 0F85                            _TRISFbits 0F86  
                          _TRISGbits 0F87                            _TRISHbits 0F88  
adjust_calibration@calibration_label 0001  switch_calibration@calibration_index 0001  
                        _CCP1CONbits 0FAB                          _CCP2CONbits 0FA7  
                        _CCP3CONbits 0F26          forward@Distance_Calibration 0018  
                        _CCP4CONbits 0F22                       __end_of___wmul 1920  
                      __pidataCOMRAM 1944                  start_initialization 1920  
                 turnLEFT@delay_time 001F              __end_of_initDCmotorsPWM 1858  
                           ??___wmul 0005                          _calibration 0033  
                        __pbssCOMRAM 0021                     ___lwdiv@dividend 0007  
                        turnRIGHT@mL 0013                          turnRIGHT@mR 0014  
                           ?___awdiv 0001                             ?___lwdiv 0007  
                        __smallconst 0E00                             ?_forward 0013  
                      ??_setMotorPWM 000F                     ___lwdiv@quotient 000B  
           initDCmotorsPWM@PWMperiod 0001                       ___wmul@product 0005  
                           _LATCbits 0F7B                             _LATDbits 0F7C  
                           _LATEbits 0F7D                             _LATGbits 0F7F  
                           _LATHbits 0F80                     ?_initDCmotorsPWM 0001  
                  ___wmul@multiplier 0001                         setMotorPWM@m 000E  
      turnRIGHT@rotation_calibration 0018                            _turnRIGHT 0F82  
                __end_of_setMotorPWM 13D2                             __Hrparam 0000  
                           __Lrparam 0000                            forward@mL 0013  
                          forward@mR 0014                           _ANSELFbits 0EB4  
                         turnLEFT@mL 0013                           turnLEFT@mR 0014  
                         ?_turnRIGHT 0013                      ___lwdiv@divisor 0009  
                         turnRIGHT@i 0019                           turnRIGHT@j 001B  
         __end_of_switch_calibration 17C4                      ___lwdiv@counter 000D  
                           __ptext10 1652                             __ptext11 13D2  
                  turnLEFT@max_power 001D                             isa$xinst 0000  
                           _turnLEFT 1100                  turnRIGHT@delay_time 001F  
                           forward@i 0019                             forward@j 001B  
                        _setMotorPWM 127E                            turnLEFT@i 0019  
                          turnLEFT@j 001B                          ??_turnRIGHT 0015  
