

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 20:38:55 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    25   000000                     
    26                           ; Generated 21/07/2023 GMT
    27                           ; 
    28                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F67K40 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60   000000                     
    61                           	psect	idataCOMRAM
    62   00178C                     __pidataCOMRAM:
    63                           	callstack 0
    64                           
    65                           ;initializer for _temp
    66   00178C  07                 	db	7
    67   000000                     _TRISGbits	set	3975
    68   000000                     _TRISEbits	set	3973
    69   000000                     _TRISFbits	set	3974
    70   000000                     _TRISHbits	set	3976
    71   000000                     _RC7PPS	set	3689
    72   000000                     _RE2PPS	set	3700
    73   000000                     _ANSELFbits	set	3764
    74   000000                     _CCPR4H	set	3873
    75   000000                     _CCPR3H	set	3877
    76   000000                     _CCPR2H	set	4006
    77   000000                     _CCPR1H	set	4010
    78   000000                     _CCP1CONbits	set	4011
    79   000000                     _CCPTMRS0bits	set	4013
    80   000000                     _T2PR	set	4028
    81   000000                     _T2CONbits	set	4029
    82   000000                     _CCP2CONbits	set	4007
    83   000000                     _CCP3CONbits	set	3878
    84   000000                     _LATCbits	set	3963
    85   000000                     _LATDbits	set	3964
    86   000000                     _TRISDbits	set	3972
    87   000000                     _CCP4CONbits	set	3874
    88   000000                     _LATGbits	set	3967
    89   000000                     _LATEbits	set	3965
    90   000000                     _LATHbits	set	3968
    91   000000                     _PORTFbits	set	3982
    92   000000                     _TRISCbits	set	3971
    93   000000                     _RE4PPS	set	3702
    94   000000                     _RG6PPS	set	3720
    95   000000                     _T2CLKCONbits	set	4031
    96   000000                     _T2HLTbits	set	4030
    97                           
    98                           ; #config settings
    99                           
   100                           	psect	cinit
   101   001768                     __pcinit:
   102                           	callstack 0
   103   001768                     start_initialization:
   104                           	callstack 0
   105   001768                     __initialization:
   106                           	callstack 0
   107                           
   108                           ; Initialize objects allocated to COMRAM (1 bytes)
   109                           ; load TBLPTR registers with __pidataCOMRAM
   110   001768  0E8C               	movlw	low __pidataCOMRAM
   111   00176A  6EF6               	movwf	tblptrl,c
   112   00176C  0E17               	movlw	high __pidataCOMRAM
   113   00176E  6EF7               	movwf	tblptrh,c
   114   001770  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   115   001772  6EF8               	movwf	tblptru,c
   116   001774  0009               	tblrd		*+	;fetch initializer
   117   001776  CFF5 F047          	movff	tablat,__pdataCOMRAM
   118                           
   119                           ; Clear objects allocated to COMRAM (38 bytes)
   120   00177A  EE00  F001         	lfsr	0,__pbssCOMRAM
   121   00177E  0E26               	movlw	38
   122   001780                     clear_0:
   123   001780  6AEE               	clrf	postinc0,c
   124   001782  06E8               	decf	wreg,f,c
   125   001784  E1FD               	bnz	clear_0
   126   001786                     end_of_initialization:
   127                           	callstack 0
   128   001786                     __end_of__initialization:
   129                           	callstack 0
   130   001786  0100               	movlb	0
   131   001788  EFD0  F009         	goto	_main	;jump to C main() function
   132                           
   133                           	psect	bssCOMRAM
   134   000001                     __pbssCOMRAM:
   135                           	callstack 0
   136   000001                     _motor_adjustments:
   137                           	callstack 0
   138   000001                     	ds	10
   139   00000B                     _off_period:
   140                           	callstack 0
   141   00000B                     	ds	2
   142   00000D                     _on_period:
   143                           	callstack 0
   144   00000D                     	ds	2
   145   00000F                     _motorR:
   146                           	callstack 0
   147   00000F                     	ds	9
   148   000018                     _motorL:
   149                           	callstack 0
   150   000018                     	ds	9
   151   000021                     _calibration:
   152                           	callstack 0
   153   000021                     	ds	6
   154                           
   155                           	psect	dataCOMRAM
   156   000047                     __pdataCOMRAM:
   157                           	callstack 0
   158   000047                     _temp:
   159                           	callstack 0
   160   000047                     	ds	1
   161                           
   162                           	psect	cstackCOMRAM
   163   000027                     __pcstackCOMRAM:
   164                           	callstack 0
   165   000027                     ?___wmul:
   166                           	callstack 0
   167   000027                     ?___awdiv:
   168                           	callstack 0
   169   000027                     adjust_calibration@calibration_label:
   170                           	callstack 0
   171   000027                     switch_calibration@calibration_index:
   172                           	callstack 0
   173   000027                     initDCmotorsPWM@PWMperiod:
   174                           	callstack 0
   175   000027                     delay_ms_function@milliseconds:
   176                           	callstack 0
   177   000027                     ___wmul@multiplier:
   178                           	callstack 0
   179   000027                     ___awdiv@dividend:
   180                           	callstack 0
   181                           
   182                           ; 2 bytes @ 0x0
   183   000027                     	ds	1
   184   000028                     ??_adjust_calibration:
   185   000028                     ??_switch_calibration:
   186                           
   187                           ; 1 bytes @ 0x1
   188   000028                     	ds	1
   189   000029                     ??_delay_ms_function:
   190   000029                     ___wmul@multiplicand:
   191                           	callstack 0
   192   000029                     ___awdiv@divisor:
   193                           	callstack 0
   194                           
   195                           ; 2 bytes @ 0x2
   196   000029                     	ds	2
   197   00002B                     ___awdiv@counter:
   198                           	callstack 0
   199   00002B                     ___wmul@product:
   200                           	callstack 0
   201                           
   202                           ; 2 bytes @ 0x4
   203   00002B                     	ds	1
   204   00002C                     ___awdiv@sign:
   205                           	callstack 0
   206                           
   207                           ; 1 bytes @ 0x5
   208   00002C                     	ds	1
   209   00002D                     ?___lwdiv:
   210                           	callstack 0
   211   00002D                     ___awdiv@quotient:
   212                           	callstack 0
   213   00002D                     ___lwdiv@dividend:
   214                           	callstack 0
   215                           
   216                           ; 2 bytes @ 0x6
   217   00002D                     	ds	2
   218   00002F                     ___lwdiv@divisor:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0x8
   222   00002F                     	ds	2
   223   000031                     ___lwdiv@quotient:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0xA
   227   000031                     	ds	2
   228   000033                     ___lwdiv@counter:
   229                           	callstack 0
   230                           
   231                           ; 1 bytes @ 0xC
   232   000033                     	ds	1
   233   000034                     setMotorPWM@m:
   234                           	callstack 0
   235                           
   236                           ; 1 bytes @ 0xD
   237   000034                     	ds	1
   238   000035                     ??_setMotorPWM:
   239                           
   240                           ; 1 bytes @ 0xE
   241   000035                     	ds	2
   242   000037                     setMotorPWM@posDuty:
   243                           	callstack 0
   244                           
   245                           ; 1 bytes @ 0x10
   246   000037                     	ds	1
   247   000038                     setMotorPWM@negDuty:
   248                           	callstack 0
   249                           
   250                           ; 1 bytes @ 0x11
   251   000038                     	ds	1
   252   000039                     turnLEFT@mL:
   253                           	callstack 0
   254   000039                     turnRIGHT@mL:
   255                           	callstack 0
   256                           
   257                           ; 1 bytes @ 0x12
   258   000039                     	ds	1
   259   00003A                     turnLEFT@mR:
   260                           	callstack 0
   261   00003A                     turnRIGHT@mR:
   262                           	callstack 0
   263                           
   264                           ; 1 bytes @ 0x13
   265   00003A                     	ds	1
   266   00003B                     ??_turnRIGHT:
   267   00003B                     ??_turnLEFT:
   268                           
   269                           ; 1 bytes @ 0x14
   270   00003B                     	ds	3
   271   00003E                     turnLEFT@rotation_calibration:
   272                           	callstack 0
   273   00003E                     turnRIGHT@rotation_calibration:
   274                           	callstack 0
   275                           
   276                           ; 1 bytes @ 0x17
   277   00003E                     	ds	1
   278   00003F                     turnLEFT@i:
   279                           	callstack 0
   280   00003F                     turnRIGHT@i:
   281                           	callstack 0
   282                           
   283                           ; 2 bytes @ 0x18
   284   00003F                     	ds	2
   285   000041                     turnLEFT@j:
   286                           	callstack 0
   287   000041                     turnRIGHT@j:
   288                           	callstack 0
   289                           
   290                           ; 2 bytes @ 0x1A
   291   000041                     	ds	2
   292   000043                     turnLEFT@max_power:
   293                           	callstack 0
   294   000043                     turnRIGHT@max_power:
   295                           	callstack 0
   296                           
   297                           ; 2 bytes @ 0x1C
   298   000043                     	ds	2
   299   000045                     turnLEFT@delay_time:
   300                           	callstack 0
   301   000045                     turnRIGHT@delay_time:
   302                           	callstack 0
   303                           
   304                           ; 2 bytes @ 0x1E
   305   000045                     	ds	2
   306   000047                     
   307                           ; 1 bytes @ 0x20
   308 ;;
   309 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   310 ;;
   311 ;; *************** function _main *****************
   312 ;; Defined at:
   313 ;;		line 20 in file "../lab-6-motors-and-pwm-tomas-thomas.X/main.c"
   314 ;; Parameters:    Size  Location     Type
   315 ;;		None
   316 ;; Auto vars:     Size  Location     Type
   317 ;;  PWMperiod       2    0        unsigned int 
   318 ;; Return value:  Size  Location     Type
   319 ;;                  1    wreg      void 
   320 ;; Registers used:
   321 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   322 ;; Tracked objects:
   323 ;;		On entry : 0/0
   324 ;;		On exit  : 0/0
   325 ;;		Unchanged: 0/0
   326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   331 ;;Total ram usage:        0 bytes
   332 ;; Hardware stack levels required when called: 3
   333 ;; This function calls:
   334 ;;		_adjust_calibration
   335 ;;		_initDCmotorsPWM
   336 ;;		_switch_calibration
   337 ;;		_turnLEFT
   338 ;;		_turnRIGHT
   339 ;; This function is called by:
   340 ;;		Startup code after reset
   341 ;; This function uses a non-reentrant model
   342 ;;
   343                           
   344                           	psect	text0
   345   0013A0                     __ptext0:
   346                           	callstack 0
   347   0013A0                     _main:
   348                           	callstack 28
   349   0013A0                     
   350                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 22:     initDCmotorsPWM(PWMperiod);
   351   0013A0  0E00               	movlw	0
   352   0013A2  6E28               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   353   0013A4  0E63               	movlw	99
   354   0013A6  6E27               	movwf	initDCmotorsPWM@PWMperiod^0,c
   355   0013A8  EC06  F00B         	call	_initDCmotorsPWM	;wreg free
   356   0013AC                     
   357                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 26:     motorL.power=0;
   358   0013AC  0E00               	movlw	0
   359   0013AE  6E18               	movwf	_motorL^0,c
   360   0013B0                     
   361                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 27:     motorL.direction=1;
   362   0013B0  0E01               	movlw	1
   363   0013B2  6E19               	movwf	(_motorL+1)^0,c
   364   0013B4                     
   365                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 28:     motorL.brakemode=1;
   366   0013B4  0E01               	movlw	1
   367   0013B6  6E1A               	movwf	(_motorL+2)^0,c
   368   0013B8                     
   369                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 29:     motorL.posDutyHighByte=(unsigned
      +                           char *)(&CCPR1H);
   370   0013B8  0EAA               	movlw	170
   371   0013BA  6E1D               	movwf	(_motorL+5)^0,c
   372   0013BC  0E0F               	movlw	15
   373   0013BE  6E1E               	movwf	(_motorL+6)^0,c
   374   0013C0                     
   375                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 30:     motorL.negDutyHighByte=(unsigned
      +                           char *)(&CCPR2H);
   376   0013C0  0EA6               	movlw	166
   377   0013C2  6E1F               	movwf	(_motorL+7)^0,c
   378   0013C4  0E0F               	movlw	15
   379   0013C6  6E20               	movwf	(_motorL+8)^0,c
   380   0013C8                     
   381                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 31:     motorL.PWMperiod=PWMperiod;
   382   0013C8  0E00               	movlw	0
   383   0013CA  6E1C               	movwf	(_motorL+4)^0,c
   384   0013CC  0E63               	movlw	99
   385   0013CE  6E1B               	movwf	(_motorL+3)^0,c
   386   0013D0                     
   387                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 33:     motorR.power=0;
   388   0013D0  0E00               	movlw	0
   389   0013D2  6E0F               	movwf	_motorR^0,c
   390   0013D4                     
   391                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 34:     motorR.direction=1;
   392   0013D4  0E01               	movlw	1
   393   0013D6  6E10               	movwf	(_motorR+1)^0,c
   394   0013D8                     
   395                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 35:     motorR.brakemode=1;
   396   0013D8  0E01               	movlw	1
   397   0013DA  6E11               	movwf	(_motorR+2)^0,c
   398   0013DC                     
   399                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 36:     motorR.posDutyHighByte=(unsigned
      +                           char *)(&CCPR3H);
   400   0013DC  0E25               	movlw	37
   401   0013DE  6E14               	movwf	(_motorR+5)^0,c
   402   0013E0  0E0F               	movlw	15
   403   0013E2  6E15               	movwf	(_motorR+6)^0,c
   404   0013E4                     
   405                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 37:     motorR.negDutyHighByte=(unsigned
      +                           char *)(&CCPR4H);
   406   0013E4  0E21               	movlw	33
   407   0013E6  6E16               	movwf	(_motorR+7)^0,c
   408   0013E8  0E0F               	movlw	15
   409   0013EA  6E17               	movwf	(_motorR+8)^0,c
   410   0013EC                     
   411                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 38:     motorR.PWMperiod=PWMperiod;
   412   0013EC  0E00               	movlw	0
   413   0013EE  6E13               	movwf	(_motorR+4)^0,c
   414   0013F0  0E63               	movlw	99
   415   0013F2  6E12               	movwf	(_motorR+3)^0,c
   416   0013F4                     
   417                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 44:     TRISDbits.TRISD7 = 0;
   418   0013F4  9E84               	bcf	132,7,c	;volatile
   419   0013F6                     
   420                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 45:     LATDbits.LATD7 = 0;
   421   0013F6  9E7C               	bcf	124,7,c	;volatile
   422   0013F8                     
   423                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 48:     TRISHbits.TRISH3 = 0;
   424   0013F8  9688               	bcf	136,3,c	;volatile
   425   0013FA                     
   426                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 49:     LATHbits.LATH3 = 0;
   427   0013FA  9680               	bcf	128,3,c	;volatile
   428   0013FC                     
   429                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 52:     TRISFbits.TRISF2=1;
   430   0013FC  8486               	bsf	134,2,c	;volatile
   431   0013FE                     
   432                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 53:     ANSELFbits.ANSELF2=0;
   433   0013FE  010E               	movlb	14	; () banked
   434   001400  95B4               	bcf	180,2,b	;volatile
   435   001402                     
   436                           ; BSR set to: 14
   437                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 56:     TRISFbits.TRISF3=1;
   438   001402  8686               	bsf	134,3,c	;volatile
   439   001404                     
   440                           ; BSR set to: 14
   441                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 57:     ANSELFbits.ANSELF3=0;
   442   001404  97B4               	bcf	180,3,b	;volatile
   443   001406                     
   444                           ; BSR set to: 14
   445                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 61:     calibration.index = 1;
   446   001406  0E01               	movlw	1
   447   001408  6E21               	movwf	_calibration^0,c
   448   00140A                     
   449                           ; BSR set to: 14
   450                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 62:     calibration.over = 0;
   451   00140A  0E00               	movlw	0
   452   00140C  6E22               	movwf	(_calibration+1)^0,c
   453   00140E                     
   454                           ; BSR set to: 14
   455                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 68:     calibration.left_45 = 60;
   456   00140E  0E3C               	movlw	60
   457   001410  6E23               	movwf	(_calibration+2)^0,c
   458   001412                     
   459                           ; BSR set to: 14
   460                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 69:     calibration.right_45 = 10;
   461   001412  0E0A               	movlw	10
   462   001414  6E24               	movwf	(_calibration+3)^0,c
   463   001416                     
   464                           ; BSR set to: 14
   465                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 70:     calibration.forward_motorL = 20;
   466   001416  0E14               	movlw	20
   467   001418  6E25               	movwf	(_calibration+4)^0,c
   468   00141A                     
   469                           ; BSR set to: 14
   470                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 71:     calibration.forward_motorR = 20;
   471   00141A  0E14               	movlw	20
   472   00141C  6E26               	movwf	(_calibration+5)^0,c
   473   00141E                     l1665:
   474                           
   475                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 79:         if(calibration.index == 1){
   476   00141E  0421               	decf	_calibration^0,w,c
   477   001420  A4D8               	btfss	status,2,c
   478   001422  EF15  F00A         	goto	u781
   479   001426  EF17  F00A         	goto	u780
   480   00142A                     u781:
   481   00142A  EF26  F00A         	goto	l1673
   482   00142E                     u780:
   483   00142E                     
   484                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 80:             adjust_calibration(&cali
      +                          bration.right_45);
   485   00142E  0E24               	movlw	low (_calibration+3)
   486   001430  6E27               	movwf	adjust_calibration@calibration_label^0,c
   487   001432  EC29  F009         	call	_adjust_calibration	;wreg free
   488   001436                     
   489                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 81:             turnRIGHT(calibration.ri
      +                          ght_45, &motorL, &motorR);
   490   001436  0E18               	movlw	low _motorL
   491   001438  6E39               	movwf	turnRIGHT@mL^0,c
   492   00143A  0E0F               	movlw	low _motorR
   493   00143C  6E3A               	movwf	turnRIGHT@mR^0,c
   494   00143E  5024               	movf	(_calibration+3)^0,w,c
   495   001440  EC01  F007         	call	_turnRIGHT
   496   001444                     
   497                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 82:             switch_calibration(&cali
      +                          bration.index);
   498   001444  0E21               	movlw	low _calibration
   499   001446  6E27               	movwf	switch_calibration@calibration_index^0,c
   500   001448  ECAF  F00A         	call	_switch_calibration	;wreg free
   501   00144C                     l1673:
   502                           
   503                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 85:         if(calibration.index == 2){
   504   00144C  0E02               	movlw	2
   505   00144E  1821               	xorwf	_calibration^0,w,c
   506   001450  A4D8               	btfss	status,2,c
   507   001452  EF2D  F00A         	goto	u791
   508   001456  EF2F  F00A         	goto	u790
   509   00145A                     u791:
   510   00145A  EF3E  F00A         	goto	l1681
   511   00145E                     u790:
   512   00145E                     
   513                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 86:             adjust_calibration(&cali
      +                          bration.left_45);
   514   00145E  0E23               	movlw	low (_calibration+2)
   515   001460  6E27               	movwf	adjust_calibration@calibration_label^0,c
   516   001462  EC29  F009         	call	_adjust_calibration	;wreg free
   517   001466                     
   518                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 87:             turnLEFT(calibration.lef
      +                          t_45, &motorL, &motorR);
   519   001466  0E18               	movlw	low _motorL
   520   001468  6E39               	movwf	turnLEFT@mL^0,c
   521   00146A  0E0F               	movlw	low _motorR
   522   00146C  6E3A               	movwf	turnLEFT@mR^0,c
   523   00146E  5023               	movf	(_calibration+2)^0,w,c
   524   001470  ECC0  F007         	call	_turnLEFT
   525   001474                     
   526                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 88:             switch_calibration(&cali
      +                          bration.index);
   527   001474  0E21               	movlw	low _calibration
   528   001476  6E27               	movwf	switch_calibration@calibration_index^0,c
   529   001478  ECAF  F00A         	call	_switch_calibration	;wreg free
   530   00147C                     l1681:
   531                           
   532                           ;../lab-6-motors-and-pwm-tomas-thomas.X/main.c: 91:         if(calibration.index == 3){c
      +                          alibration.index =1;}
   533   00147C  0E03               	movlw	3
   534   00147E  1821               	xorwf	_calibration^0,w,c
   535   001480  A4D8               	btfss	status,2,c
   536   001482  EF45  F00A         	goto	u801
   537   001486  EF47  F00A         	goto	u800
   538   00148A                     u801:
   539   00148A  EF0F  F00A         	goto	l1665
   540   00148E                     u800:
   541   00148E  0E01               	movlw	1
   542   001490  6E21               	movwf	_calibration^0,c
   543   001492  EF0F  F00A         	goto	l1665
   544   001496  EF00  F000         	goto	start
   545   00149A                     __end_of_main:
   546                           	callstack 0
   547                           
   548 ;; *************** function _turnRIGHT *****************
   549 ;; Defined at:
   550 ;;		line 203 in file "../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c"
   551 ;; Parameters:    Size  Location     Type
   552 ;;  rotation_cal    1    wreg     unsigned char 
   553 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   554 ;;		 -> motorL(9), 
   555 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   556 ;;		 -> motorR(9), 
   557 ;; Auto vars:     Size  Location     Type
   558 ;;  rotation_cal    1   23[COMRAM] unsigned char 
   559 ;;  j               2   26[COMRAM] int 
   560 ;;  i               2   24[COMRAM] int 
   561 ;;  delay_time      2   30[COMRAM] int 
   562 ;;  max_power       2   28[COMRAM] int 
   563 ;;  acceleration    2    0        int 
   564 ;; Return value:  Size  Location     Type
   565 ;;                  1    wreg      void 
   566 ;; Registers used:
   567 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   568 ;; Tracked objects:
   569 ;;		On entry : 0/0
   570 ;;		On exit  : 0/0
   571 ;;		Unchanged: 0/0
   572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   573 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   574 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   575 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   576 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   577 ;;Total ram usage:       14 bytes
   578 ;; Hardware stack levels used: 1
   579 ;; Hardware stack levels required when called: 2
   580 ;; This function calls:
   581 ;;		___awdiv
   582 ;;		_delay_ms_function
   583 ;;		_setMotorPWM
   584 ;; This function is called by:
   585 ;;		_main
   586 ;; This function uses a non-reentrant model
   587 ;;
   588                           
   589                           	psect	text1
   590   000E02                     __ptext1:
   591                           	callstack 0
   592   000E02                     _turnRIGHT:
   593                           	callstack 28
   594                           
   595                           ;incstack = 0
   596                           ;turnRIGHT@rotation_calibration stored from wreg
   597   000E02  6E3E               	movwf	turnRIGHT@rotation_calibration^0,c
   598   000E04                     
   599                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 204:     mL->direction = 1;
   600   000E04  5039               	movf	turnRIGHT@mL^0,w,c
   601   000E06  6ED9               	movwf	fsr2l,c
   602   000E08  6ADA               	clrf	fsr2h,c
   603   000E0A  0E01               	movlw	1
   604   000E0C  26D9               	addwf	fsr2l,f,c
   605   000E0E  0E01               	movlw	1
   606   000E10  6EDF               	movwf	indf2,c
   607                           
   608                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 205:     mR->direction = 0;
   609   000E12  503A               	movf	turnRIGHT@mR^0,w,c
   610   000E14  6ED9               	movwf	fsr2l,c
   611   000E16  6ADA               	clrf	fsr2h,c
   612   000E18  0E01               	movlw	1
   613   000E1A  26D9               	addwf	fsr2l,f,c
   614   000E1C  6ADF               	clrf	indf2,c
   615   000E1E                     
   616                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 207:    int max_power = 20;
   617   000E1E  0E00               	movlw	0
   618   000E20  6E44               	movwf	(turnRIGHT@max_power+1)^0,c
   619   000E22  0E14               	movlw	20
   620   000E24  6E43               	movwf	turnRIGHT@max_power^0,c
   621   000E26                     
   622                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 209:     int delay_time = acceler
      +                          ation_time/max_power;
   623   000E26  0E00               	movlw	0
   624   000E28  6E28               	movwf	(___awdiv@dividend+1)^0,c
   625   000E2A  0E64               	movlw	100
   626   000E2C  6E27               	movwf	___awdiv@dividend^0,c
   627   000E2E  0E00               	movlw	0
   628   000E30  6E2A               	movwf	(___awdiv@divisor+1)^0,c
   629   000E32  0E14               	movlw	20
   630   000E34  6E29               	movwf	___awdiv@divisor^0,c
   631   000E36  EC4D  F00A         	call	___awdiv	;wreg free
   632   000E3A  C027  F045         	movff	?___awdiv,turnRIGHT@delay_time
   633   000E3E  C028  F046         	movff	?___awdiv+1,turnRIGHT@delay_time+1
   634   000E42                     
   635                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 212:     for(int i=0; i< max_powe
      +                          r; i++){
   636   000E42  0E00               	movlw	0
   637   000E44  6E40               	movwf	(turnRIGHT@i+1)^0,c
   638   000E46  0E00               	movlw	0
   639   000E48  6E3F               	movwf	turnRIGHT@i^0,c
   640   000E4A  EF4B  F007         	goto	l1521
   641   000E4E                     l1511:
   642                           
   643                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 213:         mL->power = mL->powe
      +                          r + 1;
   644   000E4E  5039               	movf	turnRIGHT@mL^0,w,c
   645   000E50  6ED9               	movwf	fsr2l,c
   646   000E52  6ADA               	clrf	fsr2h,c
   647   000E54  5039               	movf	turnRIGHT@mL^0,w,c
   648   000E56  6EE1               	movwf	fsr1l,c
   649   000E58  6AE2               	clrf	fsr1h,c
   650   000E5A  50E7               	movf	indf1,w,c
   651   000E5C  6E3B               	movwf	??_turnRIGHT^0,c
   652   000E5E  283B               	incf	??_turnRIGHT^0,w,c
   653   000E60  6EDF               	movwf	indf2,c
   654                           
   655                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 214:         mR->power = mR->powe
      +                          r + 1 ;
   656   000E62  503A               	movf	turnRIGHT@mR^0,w,c
   657   000E64  6ED9               	movwf	fsr2l,c
   658   000E66  6ADA               	clrf	fsr2h,c
   659   000E68  503A               	movf	turnRIGHT@mR^0,w,c
   660   000E6A  6EE1               	movwf	fsr1l,c
   661   000E6C  6AE2               	clrf	fsr1h,c
   662   000E6E  50E7               	movf	indf1,w,c
   663   000E70  6E3B               	movwf	??_turnRIGHT^0,c
   664   000E72  283B               	incf	??_turnRIGHT^0,w,c
   665   000E74  6EDF               	movwf	indf2,c
   666   000E76                     
   667                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 215:         setMotorPWM(mR);
   668   000E76  C03A  F034         	movff	turnRIGHT@mR,setMotorPWM@m
   669   000E7A  EC7F  F008         	call	_setMotorPWM	;wreg free
   670   000E7E                     
   671                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 216:         setMotorPWM(mL);
   672   000E7E  C039  F034         	movff	turnRIGHT@mL,setMotorPWM@m
   673   000E82  EC7F  F008         	call	_setMotorPWM	;wreg free
   674   000E86                     
   675                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 217:         delay_ms_function(de
      +                          lay_time);
   676   000E86  C045  F027         	movff	turnRIGHT@delay_time,delay_ms_function@milliseconds
   677   000E8A  C046  F028         	movff	turnRIGHT@delay_time+1,delay_ms_function@milliseconds+1
   678   000E8E  EC8A  F00B         	call	_delay_ms_function	;wreg free
   679   000E92                     
   680                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 218:     }
   681   000E92  4A3F               	infsnz	turnRIGHT@i^0,f,c
   682   000E94  2A40               	incf	(turnRIGHT@i+1)^0,f,c
   683   000E96                     l1521:
   684   000E96  5043               	movf	turnRIGHT@max_power^0,w,c
   685   000E98  5C3F               	subwf	turnRIGHT@i^0,w,c
   686   000E9A  5040               	movf	(turnRIGHT@i+1)^0,w,c
   687   000E9C  0A80               	xorlw	128
   688   000E9E  6E3B               	movwf	??_turnRIGHT^0,c
   689   000EA0  5044               	movf	(turnRIGHT@max_power+1)^0,w,c
   690   000EA2  0A80               	xorlw	128
   691   000EA4  583B               	subwfb	??_turnRIGHT^0,w,c
   692   000EA6  A0D8               	btfss	status,0,c
   693   000EA8  EF58  F007         	goto	u641
   694   000EAC  EF5A  F007         	goto	u640
   695   000EB0                     u641:
   696   000EB0  EF27  F007         	goto	l1511
   697   000EB4                     u640:
   698   000EB4                     
   699                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 221:     for(int j=0; j<rotation_
      +                          calibration; j++){
   700   000EB4  0E00               	movlw	0
   701   000EB6  6E42               	movwf	(turnRIGHT@j+1)^0,c
   702   000EB8  0E00               	movlw	0
   703   000EBA  6E41               	movwf	turnRIGHT@j^0,c
   704   000EBC  EF69  F007         	goto	l233
   705   000EC0                     l1525:
   706                           
   707                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 222:         _delay((unsigned lon
      +                          g)((10)*(64000000/4000.0)));
   708   000EC0  0ED0               	movlw	208
   709   000EC2  6E3B               	movwf	??_turnRIGHT^0,c
   710   000EC4  0ECA               	movlw	202
   711   000EC6                     u917:
   712   000EC6  2EE8               	decfsz	wreg,f,c
   713   000EC8  D7FE               	bra	u917
   714   000ECA  2E3B               	decfsz	??_turnRIGHT^0,f,c
   715   000ECC  D7FC               	bra	u917
   716   000ECE                     
   717                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 223:     }
   718   000ECE  4A41               	infsnz	turnRIGHT@j^0,f,c
   719   000ED0  2A42               	incf	(turnRIGHT@j+1)^0,f,c
   720   000ED2                     l233:
   721   000ED2  503E               	movf	turnRIGHT@rotation_calibration^0,w,c
   722   000ED4  6E3B               	movwf	??_turnRIGHT^0,c
   723   000ED6  6A3C               	clrf	(??_turnRIGHT+1)^0,c
   724   000ED8  503B               	movf	??_turnRIGHT^0,w,c
   725   000EDA  5C41               	subwf	turnRIGHT@j^0,w,c
   726   000EDC  5042               	movf	(turnRIGHT@j+1)^0,w,c
   727   000EDE  0A80               	xorlw	128
   728   000EE0  6E3D               	movwf	(??_turnRIGHT+2)^0,c
   729   000EE2  503C               	movf	(??_turnRIGHT+1)^0,w,c
   730   000EE4  0A80               	xorlw	128
   731   000EE6  583D               	subwfb	(??_turnRIGHT+2)^0,w,c
   732   000EE8  A0D8               	btfss	status,0,c
   733   000EEA  EF79  F007         	goto	u651
   734   000EEE  EF7B  F007         	goto	u650
   735   000EF2                     u651:
   736   000EF2  EF60  F007         	goto	l1525
   737   000EF6                     u650:
   738   000EF6  EFA9  F007         	goto	l1543
   739   000EFA                     l1529:
   740                           
   741                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 227:         if(mR->power> 0 ){
   742   000EFA  503A               	movf	turnRIGHT@mR^0,w,c
   743   000EFC  6ED9               	movwf	fsr2l,c
   744   000EFE  6ADA               	clrf	fsr2h,c
   745   000F00  50DF               	movf	indf2,w,c
   746   000F02  B4D8               	btfsc	status,2,c
   747   000F04  EF86  F007         	goto	u661
   748   000F08  EF88  F007         	goto	u660
   749   000F0C                     u661:
   750   000F0C  EF8C  F007         	goto	l1533
   751   000F10                     u660:
   752   000F10                     
   753                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 228:             mR->power--;
   754   000F10  503A               	movf	turnRIGHT@mR^0,w,c
   755   000F12  6ED9               	movwf	fsr2l,c
   756   000F14  6ADA               	clrf	fsr2h,c
   757   000F16  06DF               	decf	indf2,f,c
   758   000F18                     l1533:
   759                           
   760                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 230:         if(mL->power> 0 ){
   761   000F18  5039               	movf	turnRIGHT@mL^0,w,c
   762   000F1A  6ED9               	movwf	fsr2l,c
   763   000F1C  6ADA               	clrf	fsr2h,c
   764   000F1E  50DF               	movf	indf2,w,c
   765   000F20  B4D8               	btfsc	status,2,c
   766   000F22  EF95  F007         	goto	u671
   767   000F26  EF97  F007         	goto	u670
   768   000F2A                     u671:
   769   000F2A  EF9B  F007         	goto	l1537
   770   000F2E                     u670:
   771   000F2E                     
   772                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 231:             mL->power--;
   773   000F2E  5039               	movf	turnRIGHT@mL^0,w,c
   774   000F30  6ED9               	movwf	fsr2l,c
   775   000F32  6ADA               	clrf	fsr2h,c
   776   000F34  06DF               	decf	indf2,f,c
   777   000F36                     l1537:
   778                           
   779                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 233:         setMotorPWM(mR);
   780   000F36  C03A  F034         	movff	turnRIGHT@mR,setMotorPWM@m
   781   000F3A  EC7F  F008         	call	_setMotorPWM	;wreg free
   782   000F3E                     
   783                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 234:         setMotorPWM(mL);
   784   000F3E  C039  F034         	movff	turnRIGHT@mL,setMotorPWM@m
   785   000F42  EC7F  F008         	call	_setMotorPWM	;wreg free
   786   000F46                     
   787                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 235:         delay_ms_function(de
      +                          lay_time);
   788   000F46  C045  F027         	movff	turnRIGHT@delay_time,delay_ms_function@milliseconds
   789   000F4A  C046  F028         	movff	turnRIGHT@delay_time+1,delay_ms_function@milliseconds+1
   790   000F4E  EC8A  F00B         	call	_delay_ms_function	;wreg free
   791   000F52                     l1543:
   792                           
   793                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 226:     while(mL->power || mR->p
      +                          ower > 0){
   794   000F52  5039               	movf	turnRIGHT@mL^0,w,c
   795   000F54  6ED9               	movwf	fsr2l,c
   796   000F56  6ADA               	clrf	fsr2h,c
   797   000F58  50DF               	movf	indf2,w,c
   798   000F5A  A4D8               	btfss	status,2,c
   799   000F5C  EFB2  F007         	goto	u681
   800   000F60  EFB4  F007         	goto	u680
   801   000F64                     u681:
   802   000F64  EF7D  F007         	goto	l1529
   803   000F68                     u680:
   804   000F68  503A               	movf	turnRIGHT@mR^0,w,c
   805   000F6A  6ED9               	movwf	fsr2l,c
   806   000F6C  6ADA               	clrf	fsr2h,c
   807   000F6E  50DF               	movf	indf2,w,c
   808   000F70  A4D8               	btfss	status,2,c
   809   000F72  EFBD  F007         	goto	u691
   810   000F76  EFBF  F007         	goto	u690
   811   000F7A                     u691:
   812   000F7A  EF7D  F007         	goto	l1529
   813   000F7E                     u690:
   814   000F7E  0012               	return		;funcret
   815   000F80                     __end_of_turnRIGHT:
   816                           	callstack 0
   817                           
   818 ;; *************** function _turnLEFT *****************
   819 ;; Defined at:
   820 ;;		line 165 in file "../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;  rotation_cal    1    wreg     unsigned char 
   823 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   824 ;;		 -> motorL(9), 
   825 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   826 ;;		 -> motorR(9), 
   827 ;; Auto vars:     Size  Location     Type
   828 ;;  rotation_cal    1   23[COMRAM] unsigned char 
   829 ;;  j               2   26[COMRAM] int 
   830 ;;  i               2   24[COMRAM] int 
   831 ;;  delay_time      2   30[COMRAM] int 
   832 ;;  max_power       2   28[COMRAM] int 
   833 ;;  acceleration    2    0        int 
   834 ;; Return value:  Size  Location     Type
   835 ;;                  1    wreg      void 
   836 ;; Registers used:
   837 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   838 ;; Tracked objects:
   839 ;;		On entry : 0/0
   840 ;;		On exit  : 0/0
   841 ;;		Unchanged: 0/0
   842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   843 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   844 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   845 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   846 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   847 ;;Total ram usage:       14 bytes
   848 ;; Hardware stack levels used: 1
   849 ;; Hardware stack levels required when called: 2
   850 ;; This function calls:
   851 ;;		___awdiv
   852 ;;		_delay_ms_function
   853 ;;		_setMotorPWM
   854 ;; This function is called by:
   855 ;;		_main
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           	psect	text2
   860   000F80                     __ptext2:
   861                           	callstack 0
   862   000F80                     _turnLEFT:
   863                           	callstack 28
   864                           
   865                           ;incstack = 0
   866                           ;turnLEFT@rotation_calibration stored from wreg
   867   000F80  6E3E               	movwf	turnLEFT@rotation_calibration^0,c
   868   000F82                     
   869                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 166:     mL->direction = 0;
   870   000F82  5039               	movf	turnLEFT@mL^0,w,c
   871   000F84  6ED9               	movwf	fsr2l,c
   872   000F86  6ADA               	clrf	fsr2h,c
   873   000F88  0E01               	movlw	1
   874   000F8A  26D9               	addwf	fsr2l,f,c
   875   000F8C  6ADF               	clrf	indf2,c
   876                           
   877                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 167:     mR->direction = 1;
   878   000F8E  503A               	movf	turnLEFT@mR^0,w,c
   879   000F90  6ED9               	movwf	fsr2l,c
   880   000F92  6ADA               	clrf	fsr2h,c
   881   000F94  0E01               	movlw	1
   882   000F96  26D9               	addwf	fsr2l,f,c
   883   000F98  0E01               	movlw	1
   884   000F9A  6EDF               	movwf	indf2,c
   885   000F9C                     
   886                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 169:     int max_power = 20;
   887   000F9C  0E00               	movlw	0
   888   000F9E  6E44               	movwf	(turnLEFT@max_power+1)^0,c
   889   000FA0  0E14               	movlw	20
   890   000FA2  6E43               	movwf	turnLEFT@max_power^0,c
   891   000FA4                     
   892                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 171:     int delay_time = acceler
      +                          ation_time/max_power;
   893   000FA4  0E00               	movlw	0
   894   000FA6  6E28               	movwf	(___awdiv@dividend+1)^0,c
   895   000FA8  0E64               	movlw	100
   896   000FAA  6E27               	movwf	___awdiv@dividend^0,c
   897   000FAC  0E00               	movlw	0
   898   000FAE  6E2A               	movwf	(___awdiv@divisor+1)^0,c
   899   000FB0  0E14               	movlw	20
   900   000FB2  6E29               	movwf	___awdiv@divisor^0,c
   901   000FB4  EC4D  F00A         	call	___awdiv	;wreg free
   902   000FB8  C027  F045         	movff	?___awdiv,turnLEFT@delay_time
   903   000FBC  C028  F046         	movff	?___awdiv+1,turnLEFT@delay_time+1
   904   000FC0                     
   905                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 174:     for(int i=0; i< max_powe
      +                          r; i++){
   906   000FC0  0E00               	movlw	0
   907   000FC2  6E40               	movwf	(turnLEFT@i+1)^0,c
   908   000FC4  0E00               	movlw	0
   909   000FC6  6E3F               	movwf	turnLEFT@i^0,c
   910   000FC8  EF0A  F008         	goto	l1583
   911   000FCC                     l1573:
   912                           
   913                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 175:         mL->power = mL->powe
      +                          r + 1;
   914   000FCC  5039               	movf	turnLEFT@mL^0,w,c
   915   000FCE  6ED9               	movwf	fsr2l,c
   916   000FD0  6ADA               	clrf	fsr2h,c
   917   000FD2  5039               	movf	turnLEFT@mL^0,w,c
   918   000FD4  6EE1               	movwf	fsr1l,c
   919   000FD6  6AE2               	clrf	fsr1h,c
   920   000FD8  50E7               	movf	indf1,w,c
   921   000FDA  6E3B               	movwf	??_turnLEFT^0,c
   922   000FDC  283B               	incf	??_turnLEFT^0,w,c
   923   000FDE  6EDF               	movwf	indf2,c
   924                           
   925                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 176:         mR->power = mR->powe
      +                          r + 1 ;
   926   000FE0  503A               	movf	turnLEFT@mR^0,w,c
   927   000FE2  6ED9               	movwf	fsr2l,c
   928   000FE4  6ADA               	clrf	fsr2h,c
   929   000FE6  503A               	movf	turnLEFT@mR^0,w,c
   930   000FE8  6EE1               	movwf	fsr1l,c
   931   000FEA  6AE2               	clrf	fsr1h,c
   932   000FEC  50E7               	movf	indf1,w,c
   933   000FEE  6E3B               	movwf	??_turnLEFT^0,c
   934   000FF0  283B               	incf	??_turnLEFT^0,w,c
   935   000FF2  6EDF               	movwf	indf2,c
   936   000FF4                     
   937                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 177:         setMotorPWM(mR);
   938   000FF4  C03A  F034         	movff	turnLEFT@mR,setMotorPWM@m
   939   000FF8  EC7F  F008         	call	_setMotorPWM	;wreg free
   940   000FFC                     
   941                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 178:         setMotorPWM(mL);
   942   000FFC  C039  F034         	movff	turnLEFT@mL,setMotorPWM@m
   943   001000  EC7F  F008         	call	_setMotorPWM	;wreg free
   944   001004                     
   945                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 179:         delay_ms_function(de
      +                          lay_time);
   946   001004  C045  F027         	movff	turnLEFT@delay_time,delay_ms_function@milliseconds
   947   001008  C046  F028         	movff	turnLEFT@delay_time+1,delay_ms_function@milliseconds+1
   948   00100C  EC8A  F00B         	call	_delay_ms_function	;wreg free
   949   001010                     
   950                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 180:     }
   951   001010  4A3F               	infsnz	turnLEFT@i^0,f,c
   952   001012  2A40               	incf	(turnLEFT@i+1)^0,f,c
   953   001014                     l1583:
   954   001014  5043               	movf	turnLEFT@max_power^0,w,c
   955   001016  5C3F               	subwf	turnLEFT@i^0,w,c
   956   001018  5040               	movf	(turnLEFT@i+1)^0,w,c
   957   00101A  0A80               	xorlw	128
   958   00101C  6E3B               	movwf	??_turnLEFT^0,c
   959   00101E  5044               	movf	(turnLEFT@max_power+1)^0,w,c
   960   001020  0A80               	xorlw	128
   961   001022  583B               	subwfb	??_turnLEFT^0,w,c
   962   001024  A0D8               	btfss	status,0,c
   963   001026  EF17  F008         	goto	u721
   964   00102A  EF19  F008         	goto	u720
   965   00102E                     u721:
   966   00102E  EFE6  F007         	goto	l1573
   967   001032                     u720:
   968   001032                     
   969                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 183:     for(int j=0; j<rotation_
      +                          calibration; j++){
   970   001032  0E00               	movlw	0
   971   001034  6E42               	movwf	(turnLEFT@j+1)^0,c
   972   001036  0E00               	movlw	0
   973   001038  6E41               	movwf	turnLEFT@j^0,c
   974   00103A  EF28  F008         	goto	l219
   975   00103E                     l1587:
   976                           
   977                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 184:         _delay((unsigned lon
      +                          g)((10)*(64000000/4000.0)));
   978   00103E  0ED0               	movlw	208
   979   001040  6E3B               	movwf	??_turnLEFT^0,c
   980   001042  0ECA               	movlw	202
   981   001044                     u927:
   982   001044  2EE8               	decfsz	wreg,f,c
   983   001046  D7FE               	bra	u927
   984   001048  2E3B               	decfsz	??_turnLEFT^0,f,c
   985   00104A  D7FC               	bra	u927
   986   00104C                     
   987                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 185:     }
   988   00104C  4A41               	infsnz	turnLEFT@j^0,f,c
   989   00104E  2A42               	incf	(turnLEFT@j+1)^0,f,c
   990   001050                     l219:
   991   001050  503E               	movf	turnLEFT@rotation_calibration^0,w,c
   992   001052  6E3B               	movwf	??_turnLEFT^0,c
   993   001054  6A3C               	clrf	(??_turnLEFT+1)^0,c
   994   001056  503B               	movf	??_turnLEFT^0,w,c
   995   001058  5C41               	subwf	turnLEFT@j^0,w,c
   996   00105A  5042               	movf	(turnLEFT@j+1)^0,w,c
   997   00105C  0A80               	xorlw	128
   998   00105E  6E3D               	movwf	(??_turnLEFT+2)^0,c
   999   001060  503C               	movf	(??_turnLEFT+1)^0,w,c
  1000   001062  0A80               	xorlw	128
  1001   001064  583D               	subwfb	(??_turnLEFT+2)^0,w,c
  1002   001066  A0D8               	btfss	status,0,c
  1003   001068  EF38  F008         	goto	u731
  1004   00106C  EF3A  F008         	goto	u730
  1005   001070                     u731:
  1006   001070  EF1F  F008         	goto	l1587
  1007   001074                     u730:
  1008   001074  EF68  F008         	goto	l1605
  1009   001078                     l1591:
  1010                           
  1011                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 189:         if(mR->power> 0 ){
  1012   001078  503A               	movf	turnLEFT@mR^0,w,c
  1013   00107A  6ED9               	movwf	fsr2l,c
  1014   00107C  6ADA               	clrf	fsr2h,c
  1015   00107E  50DF               	movf	indf2,w,c
  1016   001080  B4D8               	btfsc	status,2,c
  1017   001082  EF45  F008         	goto	u741
  1018   001086  EF47  F008         	goto	u740
  1019   00108A                     u741:
  1020   00108A  EF4B  F008         	goto	l1595
  1021   00108E                     u740:
  1022   00108E                     
  1023                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 190:             mR->power--;
  1024   00108E  503A               	movf	turnLEFT@mR^0,w,c
  1025   001090  6ED9               	movwf	fsr2l,c
  1026   001092  6ADA               	clrf	fsr2h,c
  1027   001094  06DF               	decf	indf2,f,c
  1028   001096                     l1595:
  1029                           
  1030                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 192:         if(mL->power> 0 ){
  1031   001096  5039               	movf	turnLEFT@mL^0,w,c
  1032   001098  6ED9               	movwf	fsr2l,c
  1033   00109A  6ADA               	clrf	fsr2h,c
  1034   00109C  50DF               	movf	indf2,w,c
  1035   00109E  B4D8               	btfsc	status,2,c
  1036   0010A0  EF54  F008         	goto	u751
  1037   0010A4  EF56  F008         	goto	u750
  1038   0010A8                     u751:
  1039   0010A8  EF5A  F008         	goto	l1599
  1040   0010AC                     u750:
  1041   0010AC                     
  1042                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 193:             mL->power--;
  1043   0010AC  5039               	movf	turnLEFT@mL^0,w,c
  1044   0010AE  6ED9               	movwf	fsr2l,c
  1045   0010B0  6ADA               	clrf	fsr2h,c
  1046   0010B2  06DF               	decf	indf2,f,c
  1047   0010B4                     l1599:
  1048                           
  1049                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 195:         setMotorPWM(mR);
  1050   0010B4  C03A  F034         	movff	turnLEFT@mR,setMotorPWM@m
  1051   0010B8  EC7F  F008         	call	_setMotorPWM	;wreg free
  1052   0010BC                     
  1053                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 196:         setMotorPWM(mL);
  1054   0010BC  C039  F034         	movff	turnLEFT@mL,setMotorPWM@m
  1055   0010C0  EC7F  F008         	call	_setMotorPWM	;wreg free
  1056   0010C4                     
  1057                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 197:         delay_ms_function(de
      +                          lay_time);
  1058   0010C4  C045  F027         	movff	turnLEFT@delay_time,delay_ms_function@milliseconds
  1059   0010C8  C046  F028         	movff	turnLEFT@delay_time+1,delay_ms_function@milliseconds+1
  1060   0010CC  EC8A  F00B         	call	_delay_ms_function	;wreg free
  1061   0010D0                     l1605:
  1062                           
  1063                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 188:     while(mL->power || mR->p
      +                          ower > 0){
  1064   0010D0  5039               	movf	turnLEFT@mL^0,w,c
  1065   0010D2  6ED9               	movwf	fsr2l,c
  1066   0010D4  6ADA               	clrf	fsr2h,c
  1067   0010D6  50DF               	movf	indf2,w,c
  1068   0010D8  A4D8               	btfss	status,2,c
  1069   0010DA  EF71  F008         	goto	u761
  1070   0010DE  EF73  F008         	goto	u760
  1071   0010E2                     u761:
  1072   0010E2  EF3C  F008         	goto	l1591
  1073   0010E6                     u760:
  1074   0010E6  503A               	movf	turnLEFT@mR^0,w,c
  1075   0010E8  6ED9               	movwf	fsr2l,c
  1076   0010EA  6ADA               	clrf	fsr2h,c
  1077   0010EC  50DF               	movf	indf2,w,c
  1078   0010EE  A4D8               	btfss	status,2,c
  1079   0010F0  EF7C  F008         	goto	u771
  1080   0010F4  EF7E  F008         	goto	u770
  1081   0010F8                     u771:
  1082   0010F8  EF3C  F008         	goto	l1591
  1083   0010FC                     u770:
  1084   0010FC  0012               	return		;funcret
  1085   0010FE                     __end_of_turnLEFT:
  1086                           	callstack 0
  1087                           
  1088 ;; *************** function _setMotorPWM *****************
  1089 ;; Defined at:
  1090 ;;		line 75 in file "../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1093 ;;		 -> motorR(9), motorL(9), 
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;  negDuty         1   17[COMRAM] unsigned char 
  1096 ;;  posDuty         1   16[COMRAM] unsigned char 
  1097 ;; Return value:  Size  Location     Type
  1098 ;;                  1    wreg      void 
  1099 ;; Registers used:
  1100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1101 ;; Tracked objects:
  1102 ;;		On entry : 0/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1106 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1107 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1108 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1109 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1110 ;;Total ram usage:        5 bytes
  1111 ;; Hardware stack levels used: 1
  1112 ;; Hardware stack levels required when called: 1
  1113 ;; This function calls:
  1114 ;;		___lwdiv
  1115 ;;		___wmul
  1116 ;; This function is called by:
  1117 ;;		_turnLEFT
  1118 ;;		_turnRIGHT
  1119 ;;		_stop
  1120 ;;		_forward
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124                           	psect	text3
  1125   0010FE                     __ptext3:
  1126                           	callstack 0
  1127   0010FE                     _setMotorPWM:
  1128                           	callstack 28
  1129   0010FE                     
  1130                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 75: void setMotorPWM(DC_motor *m)
      +                          ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 76: {;../lab-6-motors-and-pwm-tom
      +                          as-thomas.X/dc_motor_v1.c: 77:     unsigned char posDuty, negDuty;;../lab-6-motors-and-p
      +                          wm-tomas-thomas.X/dc_motor_v1.c: 79:     if(m->brakemode) {
  1131   0010FE  5034               	movf	setMotorPWM@m^0,w,c
  1132   001100  6ED9               	movwf	fsr2l,c
  1133   001102  6ADA               	clrf	fsr2h,c
  1134   001104  0E02               	movlw	2
  1135   001106  26D9               	addwf	fsr2l,f,c
  1136   001108  50DF               	movf	indf2,w,c
  1137   00110A  B4D8               	btfsc	status,2,c
  1138   00110C  EF8A  F008         	goto	u501
  1139   001110  EF8C  F008         	goto	u500
  1140   001114                     u501:
  1141   001114  EFBC  F008         	goto	l1379
  1142   001118                     u500:
  1143   001118                     
  1144                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 80:         posDuty=m->PWMperiod 
      +                          - ((unsigned int)(m->power)*(m->PWMperiod))/100;
  1145   001118  5034               	movf	setMotorPWM@m^0,w,c
  1146   00111A  6ED9               	movwf	fsr2l,c
  1147   00111C  6ADA               	clrf	fsr2h,c
  1148   00111E  50DF               	movf	indf2,w,c
  1149   001120  6E35               	movwf	??_setMotorPWM^0,c
  1150   001122  5035               	movf	??_setMotorPWM^0,w,c
  1151   001124  6E27               	movwf	___wmul@multiplier^0,c
  1152   001126  6A28               	clrf	(___wmul@multiplier+1)^0,c
  1153   001128  5034               	movf	setMotorPWM@m^0,w,c
  1154   00112A  6ED9               	movwf	fsr2l,c
  1155   00112C  6ADA               	clrf	fsr2h,c
  1156   00112E  0E03               	movlw	3
  1157   001130  26D9               	addwf	fsr2l,f,c
  1158   001132  CFDE F029          	movff	postinc2,___wmul@multiplicand
  1159   001136  CFDD F02A          	movff	postdec2,___wmul@multiplicand+1
  1160   00113A  ECA1  F00B         	call	___wmul	;wreg free
  1161   00113E  C027  F02D         	movff	?___wmul,___lwdiv@dividend
  1162   001142  C028  F02E         	movff	?___wmul+1,___lwdiv@dividend+1
  1163   001146  0E00               	movlw	0
  1164   001148  6E30               	movwf	(___lwdiv@divisor+1)^0,c
  1165   00114A  0E64               	movlw	100
  1166   00114C  6E2F               	movwf	___lwdiv@divisor^0,c
  1167   00114E  EC50  F00B         	call	___lwdiv	;wreg free
  1168   001152  5034               	movf	setMotorPWM@m^0,w,c
  1169   001154  6ED9               	movwf	fsr2l,c
  1170   001156  6ADA               	clrf	fsr2h,c
  1171   001158  0E03               	movlw	3
  1172   00115A  26D9               	addwf	fsr2l,f,c
  1173   00115C  50DF               	movf	indf2,w,c
  1174   00115E  6E36               	movwf	(??_setMotorPWM+1)^0,c
  1175   001160  502D               	movf	?___lwdiv^0,w,c
  1176   001162  5C36               	subwf	(??_setMotorPWM+1)^0,w,c
  1177   001164  6E37               	movwf	setMotorPWM@posDuty^0,c
  1178   001166                     
  1179                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 81:         negDuty=m->PWMperiod;
  1180   001166  5034               	movf	setMotorPWM@m^0,w,c
  1181   001168  6ED9               	movwf	fsr2l,c
  1182   00116A  6ADA               	clrf	fsr2h,c
  1183   00116C  0E03               	movlw	3
  1184   00116E  26D9               	addwf	fsr2l,f,c
  1185   001170  50DF               	movf	indf2,w,c
  1186   001172  6E38               	movwf	setMotorPWM@negDuty^0,c
  1187                           
  1188                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 82:     }
  1189   001174  EFDD  F008         	goto	l1383
  1190   001178                     l1379:
  1191                           
  1192                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 84:         posDuty=0;
  1193   001178  0E00               	movlw	0
  1194   00117A  6E37               	movwf	setMotorPWM@posDuty^0,c
  1195   00117C                     
  1196                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 85:   negDuty=((unsigned int)(m->
      +                          power)*(m->PWMperiod))/100;
  1197   00117C  5034               	movf	setMotorPWM@m^0,w,c
  1198   00117E  6ED9               	movwf	fsr2l,c
  1199   001180  6ADA               	clrf	fsr2h,c
  1200   001182  50DF               	movf	indf2,w,c
  1201   001184  6E35               	movwf	??_setMotorPWM^0,c
  1202   001186  5035               	movf	??_setMotorPWM^0,w,c
  1203   001188  6E27               	movwf	___wmul@multiplier^0,c
  1204   00118A  6A28               	clrf	(___wmul@multiplier+1)^0,c
  1205   00118C  5034               	movf	setMotorPWM@m^0,w,c
  1206   00118E  6ED9               	movwf	fsr2l,c
  1207   001190  6ADA               	clrf	fsr2h,c
  1208   001192  0E03               	movlw	3
  1209   001194  26D9               	addwf	fsr2l,f,c
  1210   001196  CFDE F029          	movff	postinc2,___wmul@multiplicand
  1211   00119A  CFDD F02A          	movff	postdec2,___wmul@multiplicand+1
  1212   00119E  ECA1  F00B         	call	___wmul	;wreg free
  1213   0011A2  C027  F02D         	movff	?___wmul,___lwdiv@dividend
  1214   0011A6  C028  F02E         	movff	?___wmul+1,___lwdiv@dividend+1
  1215   0011AA  0E00               	movlw	0
  1216   0011AC  6E30               	movwf	(___lwdiv@divisor+1)^0,c
  1217   0011AE  0E64               	movlw	100
  1218   0011B0  6E2F               	movwf	___lwdiv@divisor^0,c
  1219   0011B2  EC50  F00B         	call	___lwdiv	;wreg free
  1220   0011B6  502D               	movf	?___lwdiv^0,w,c
  1221   0011B8  6E38               	movwf	setMotorPWM@negDuty^0,c
  1222   0011BA                     l1383:
  1223                           
  1224                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 88:     if (m->direction) {
  1225   0011BA  5034               	movf	setMotorPWM@m^0,w,c
  1226   0011BC  6ED9               	movwf	fsr2l,c
  1227   0011BE  6ADA               	clrf	fsr2h,c
  1228   0011C0  0E01               	movlw	1
  1229   0011C2  26D9               	addwf	fsr2l,f,c
  1230   0011C4  50DF               	movf	indf2,w,c
  1231   0011C6  B4D8               	btfsc	status,2,c
  1232   0011C8  EFE8  F008         	goto	u511
  1233   0011CC  EFEA  F008         	goto	u510
  1234   0011D0                     u511:
  1235   0011D0  EF0A  F009         	goto	l1387
  1236   0011D4                     u510:
  1237   0011D4                     
  1238                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 89:         *(m->posDutyHighByte)
      +                          =posDuty;
  1239   0011D4  5034               	movf	setMotorPWM@m^0,w,c
  1240   0011D6  6ED9               	movwf	fsr2l,c
  1241   0011D8  6ADA               	clrf	fsr2h,c
  1242   0011DA  0E05               	movlw	5
  1243   0011DC  26D9               	addwf	fsr2l,f,c
  1244   0011DE  CFDE F035          	movff	postinc2,??_setMotorPWM
  1245   0011E2  CFDD F036          	movff	postdec2,??_setMotorPWM+1
  1246   0011E6  C035  FFD9         	movff	??_setMotorPWM,fsr2l
  1247   0011EA  C036  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1248   0011EE  C037  FFDF         	movff	setMotorPWM@posDuty,indf2
  1249                           
  1250                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 90:         *(m->negDutyHighByte)
      +                          =negDuty;
  1251   0011F2  5034               	movf	setMotorPWM@m^0,w,c
  1252   0011F4  6ED9               	movwf	fsr2l,c
  1253   0011F6  6ADA               	clrf	fsr2h,c
  1254   0011F8  0E07               	movlw	7
  1255   0011FA  26D9               	addwf	fsr2l,f,c
  1256   0011FC  CFDE F035          	movff	postinc2,??_setMotorPWM
  1257   001200  CFDD F036          	movff	postdec2,??_setMotorPWM+1
  1258   001204  C035  FFD9         	movff	??_setMotorPWM,fsr2l
  1259   001208  C036  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1260   00120C  C038  FFDF         	movff	setMotorPWM@negDuty,indf2
  1261                           
  1262                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 91:     } else {
  1263   001210  EF28  F009         	goto	l191
  1264   001214                     l1387:
  1265                           
  1266                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 92:         *(m->posDutyHighByte)
      +                          =negDuty;
  1267   001214  5034               	movf	setMotorPWM@m^0,w,c
  1268   001216  6ED9               	movwf	fsr2l,c
  1269   001218  6ADA               	clrf	fsr2h,c
  1270   00121A  0E05               	movlw	5
  1271   00121C  26D9               	addwf	fsr2l,f,c
  1272   00121E  CFDE F035          	movff	postinc2,??_setMotorPWM
  1273   001222  CFDD F036          	movff	postdec2,??_setMotorPWM+1
  1274   001226  C035  FFD9         	movff	??_setMotorPWM,fsr2l
  1275   00122A  C036  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1276   00122E  C038  FFDF         	movff	setMotorPWM@negDuty,indf2
  1277                           
  1278                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 93:         *(m->negDutyHighByte)
      +                          =posDuty;
  1279   001232  5034               	movf	setMotorPWM@m^0,w,c
  1280   001234  6ED9               	movwf	fsr2l,c
  1281   001236  6ADA               	clrf	fsr2h,c
  1282   001238  0E07               	movlw	7
  1283   00123A  26D9               	addwf	fsr2l,f,c
  1284   00123C  CFDE F035          	movff	postinc2,??_setMotorPWM
  1285   001240  CFDD F036          	movff	postdec2,??_setMotorPWM+1
  1286   001244  C035  FFD9         	movff	??_setMotorPWM,fsr2l
  1287   001248  C036  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1288   00124C  C037  FFDF         	movff	setMotorPWM@posDuty,indf2
  1289   001250                     l191:
  1290   001250  0012               	return		;funcret
  1291   001252                     __end_of_setMotorPWM:
  1292                           	callstack 0
  1293                           
  1294 ;; *************** function ___wmul *****************
  1295 ;; Defined at:
  1296 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  multiplier      2    0[COMRAM] unsigned int 
  1299 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  product         2    4[COMRAM] unsigned int 
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  2    0[COMRAM] unsigned int 
  1304 ;; Registers used:
  1305 ;;		wreg, status,2, status,0, prodl, prodh
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1311 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1312 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1314 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1315 ;;Total ram usage:        6 bytes
  1316 ;; Hardware stack levels used: 1
  1317 ;; This function calls:
  1318 ;;		Nothing
  1319 ;; This function is called by:
  1320 ;;		_setMotorPWM
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           	psect	text4
  1325   001742                     __ptext4:
  1326                           	callstack 0
  1327   001742                     ___wmul:
  1328                           	callstack 28
  1329   001742  5027               	movf	___wmul@multiplier^0,w,c
  1330   001744  0229               	mulwf	___wmul@multiplicand^0,c
  1331   001746  CFF3 F02B          	movff	prodl,___wmul@product
  1332   00174A  CFF4 F02C          	movff	prodh,___wmul@product+1
  1333   00174E  5027               	movf	___wmul@multiplier^0,w,c
  1334   001750  022A               	mulwf	(___wmul@multiplicand+1)^0,c
  1335   001752  50F3               	movf	243,w,c
  1336   001754  262C               	addwf	(___wmul@product+1)^0,f,c
  1337   001756  5028               	movf	(___wmul@multiplier+1)^0,w,c
  1338   001758  0229               	mulwf	___wmul@multiplicand^0,c
  1339   00175A  50F3               	movf	243,w,c
  1340   00175C  262C               	addwf	(___wmul@product+1)^0,f,c
  1341   00175E  C02B  F027         	movff	___wmul@product,?___wmul
  1342   001762  C02C  F028         	movff	___wmul@product+1,?___wmul+1
  1343   001766  0012               	return		;funcret
  1344   001768                     __end_of___wmul:
  1345                           	callstack 0
  1346                           
  1347 ;; *************** function ___lwdiv *****************
  1348 ;; Defined at:
  1349 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;  dividend        2    6[COMRAM] unsigned int 
  1352 ;;  divisor         2    8[COMRAM] unsigned int 
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;  quotient        2   10[COMRAM] unsigned int 
  1355 ;;  counter         1   12[COMRAM] unsigned char 
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  2    6[COMRAM] unsigned int 
  1358 ;; Registers used:
  1359 ;;		wreg, status,2, status,0
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1365 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1366 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1368 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1369 ;;Total ram usage:        7 bytes
  1370 ;; Hardware stack levels used: 1
  1371 ;; This function calls:
  1372 ;;		Nothing
  1373 ;; This function is called by:
  1374 ;;		_setMotorPWM
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           	psect	text5
  1379   0016A0                     __ptext5:
  1380                           	callstack 0
  1381   0016A0                     ___lwdiv:
  1382                           	callstack 28
  1383   0016A0  0E00               	movlw	0
  1384   0016A2  6E32               	movwf	(___lwdiv@quotient+1)^0,c
  1385   0016A4  0E00               	movlw	0
  1386   0016A6  6E31               	movwf	___lwdiv@quotient^0,c
  1387   0016A8  502F               	movf	___lwdiv@divisor^0,w,c
  1388   0016AA  1030               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1389   0016AC  B4D8               	btfsc	status,2,c
  1390   0016AE  EF5B  F00B         	goto	u461
  1391   0016B2  EF5D  F00B         	goto	u460
  1392   0016B6                     u461:
  1393   0016B6  EF85  F00B         	goto	l735
  1394   0016BA                     u460:
  1395   0016BA  0E01               	movlw	1
  1396   0016BC  6E33               	movwf	___lwdiv@counter^0,c
  1397   0016BE  EF65  F00B         	goto	l1353
  1398   0016C2                     l1351:
  1399   0016C2  90D8               	bcf	status,0,c
  1400   0016C4  362F               	rlcf	___lwdiv@divisor^0,f,c
  1401   0016C6  3630               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1402   0016C8  2A33               	incf	___lwdiv@counter^0,f,c
  1403   0016CA                     l1353:
  1404   0016CA  AE30               	btfss	(___lwdiv@divisor+1)^0,7,c
  1405   0016CC  EF6A  F00B         	goto	u471
  1406   0016D0  EF6C  F00B         	goto	u470
  1407   0016D4                     u471:
  1408   0016D4  EF61  F00B         	goto	l1351
  1409   0016D8                     u470:
  1410   0016D8                     l1355:
  1411   0016D8  90D8               	bcf	status,0,c
  1412   0016DA  3631               	rlcf	___lwdiv@quotient^0,f,c
  1413   0016DC  3632               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1414   0016DE  502F               	movf	___lwdiv@divisor^0,w,c
  1415   0016E0  5C2D               	subwf	___lwdiv@dividend^0,w,c
  1416   0016E2  5030               	movf	(___lwdiv@divisor+1)^0,w,c
  1417   0016E4  582E               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1418   0016E6  A0D8               	btfss	status,0,c
  1419   0016E8  EF78  F00B         	goto	u481
  1420   0016EC  EF7A  F00B         	goto	u480
  1421   0016F0                     u481:
  1422   0016F0  EF7F  F00B         	goto	l1363
  1423   0016F4                     u480:
  1424   0016F4  502F               	movf	___lwdiv@divisor^0,w,c
  1425   0016F6  5E2D               	subwf	___lwdiv@dividend^0,f,c
  1426   0016F8  5030               	movf	(___lwdiv@divisor+1)^0,w,c
  1427   0016FA  5A2E               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1428   0016FC  8031               	bsf	___lwdiv@quotient^0,0,c
  1429   0016FE                     l1363:
  1430   0016FE  90D8               	bcf	status,0,c
  1431   001700  3230               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1432   001702  322F               	rrcf	___lwdiv@divisor^0,f,c
  1433   001704  2E33               	decfsz	___lwdiv@counter^0,f,c
  1434   001706  EF6C  F00B         	goto	l1355
  1435   00170A                     l735:
  1436   00170A  C031  F02D         	movff	___lwdiv@quotient,?___lwdiv
  1437   00170E  C032  F02E         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1438   001712  0012               	return		;funcret
  1439   001714                     __end_of___lwdiv:
  1440                           	callstack 0
  1441                           
  1442 ;; *************** function _delay_ms_function *****************
  1443 ;; Defined at:
  1444 ;;		line 67 in file "../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  milliseconds    2    0[COMRAM] unsigned int 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;		None
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      void 
  1451 ;; Registers used:
  1452 ;;		wreg, status,2, status,0
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1458 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1460 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1461 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1462 ;;Total ram usage:        3 bytes
  1463 ;; Hardware stack levels used: 1
  1464 ;; This function calls:
  1465 ;;		Nothing
  1466 ;; This function is called by:
  1467 ;;		_turnLEFT
  1468 ;;		_turnRIGHT
  1469 ;;		_forward
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           	psect	text6
  1474   001714                     __ptext6:
  1475                           	callstack 0
  1476   001714                     _delay_ms_function:
  1477                           	callstack 29
  1478   001714                     
  1479                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 68:     while (milliseconds > 0) 
      +                          {
  1480   001714  EF97  F00B         	goto	l181
  1481   001718                     l1369:
  1482                           
  1483                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 69:         _delay((unsigned long
      +                          )((1)*(64000000/4000.0)));
  1484   001718  0E15               	movlw	21
  1485   00171A  6E29               	movwf	??_delay_ms_function^0,c
  1486   00171C  0EC6               	movlw	198
  1487   00171E                     u937:
  1488   00171E  2EE8               	decfsz	wreg,f,c
  1489   001720  D7FE               	bra	u937
  1490   001722  2E29               	decfsz	??_delay_ms_function^0,f,c
  1491   001724  D7FC               	bra	u937
  1492   001726  D000               	nop2	
  1493   001728                     
  1494                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 70:         milliseconds--;
  1495   001728  0627               	decf	delay_ms_function@milliseconds^0,f,c
  1496   00172A  A0D8               	btfss	status,0,c
  1497   00172C  0628               	decf	(delay_ms_function@milliseconds+1)^0,f,c
  1498   00172E                     l181:
  1499                           
  1500                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 68:     while (milliseconds > 0) 
      +                          {
  1501   00172E  5027               	movf	delay_ms_function@milliseconds^0,w,c
  1502   001730  1028               	iorwf	(delay_ms_function@milliseconds+1)^0,w,c
  1503   001732  A4D8               	btfss	status,2,c
  1504   001734  EF9E  F00B         	goto	u491
  1505   001738  EFA0  F00B         	goto	u490
  1506   00173C                     u491:
  1507   00173C  EF8C  F00B         	goto	l1369
  1508   001740                     u490:
  1509   001740  0012               	return		;funcret
  1510   001742                     __end_of_delay_ms_function:
  1511                           	callstack 0
  1512                           
  1513 ;; *************** function ___awdiv *****************
  1514 ;; Defined at:
  1515 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;  dividend        2    0[COMRAM] int 
  1518 ;;  divisor         2    2[COMRAM] int 
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;  quotient        2    6[COMRAM] int 
  1521 ;;  sign            1    5[COMRAM] unsigned char 
  1522 ;;  counter         1    4[COMRAM] unsigned char 
  1523 ;; Return value:  Size  Location     Type
  1524 ;;                  2    0[COMRAM] int 
  1525 ;; Registers used:
  1526 ;;		wreg, status,2, status,0
  1527 ;; Tracked objects:
  1528 ;;		On entry : 0/0
  1529 ;;		On exit  : 0/0
  1530 ;;		Unchanged: 0/0
  1531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1532 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1533 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1535 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1536 ;;Total ram usage:        8 bytes
  1537 ;; Hardware stack levels used: 1
  1538 ;; This function calls:
  1539 ;;		Nothing
  1540 ;; This function is called by:
  1541 ;;		_turnLEFT
  1542 ;;		_turnRIGHT
  1543 ;;		_forward
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           	psect	text7
  1548   00149A                     __ptext7:
  1549                           	callstack 0
  1550   00149A                     ___awdiv:
  1551                           	callstack 29
  1552   00149A  0E00               	movlw	0
  1553   00149C  6E2C               	movwf	___awdiv@sign^0,c
  1554   00149E  BE2A               	btfsc	(___awdiv@divisor+1)^0,7,c
  1555   0014A0  EF56  F00A         	goto	u520
  1556   0014A4  EF54  F00A         	goto	u521
  1557   0014A8                     u521:
  1558   0014A8  EF5C  F00A         	goto	l1397
  1559   0014AC                     u520:
  1560   0014AC  6C29               	negf	___awdiv@divisor^0,c
  1561   0014AE  1E2A               	comf	(___awdiv@divisor+1)^0,f,c
  1562   0014B0  B0D8               	btfsc	status,0,c
  1563   0014B2  2A2A               	incf	(___awdiv@divisor+1)^0,f,c
  1564   0014B4  0E01               	movlw	1
  1565   0014B6  6E2C               	movwf	___awdiv@sign^0,c
  1566   0014B8                     l1397:
  1567   0014B8  BE28               	btfsc	(___awdiv@dividend+1)^0,7,c
  1568   0014BA  EF63  F00A         	goto	u530
  1569   0014BE  EF61  F00A         	goto	u531
  1570   0014C2                     u531:
  1571   0014C2  EF69  F00A         	goto	l1403
  1572   0014C6                     u530:
  1573   0014C6  6C27               	negf	___awdiv@dividend^0,c
  1574   0014C8  1E28               	comf	(___awdiv@dividend+1)^0,f,c
  1575   0014CA  B0D8               	btfsc	status,0,c
  1576   0014CC  2A28               	incf	(___awdiv@dividend+1)^0,f,c
  1577   0014CE  0E01               	movlw	1
  1578   0014D0  1A2C               	xorwf	___awdiv@sign^0,f,c
  1579   0014D2                     l1403:
  1580   0014D2  0E00               	movlw	0
  1581   0014D4  6E2E               	movwf	(___awdiv@quotient+1)^0,c
  1582   0014D6  0E00               	movlw	0
  1583   0014D8  6E2D               	movwf	___awdiv@quotient^0,c
  1584   0014DA  5029               	movf	___awdiv@divisor^0,w,c
  1585   0014DC  102A               	iorwf	(___awdiv@divisor+1)^0,w,c
  1586   0014DE  B4D8               	btfsc	status,2,c
  1587   0014E0  EF74  F00A         	goto	u541
  1588   0014E4  EF76  F00A         	goto	u540
  1589   0014E8                     u541:
  1590   0014E8  EF9E  F00A         	goto	l1425
  1591   0014EC                     u540:
  1592   0014EC  0E01               	movlw	1
  1593   0014EE  6E2B               	movwf	___awdiv@counter^0,c
  1594   0014F0  EF7E  F00A         	goto	l1411
  1595   0014F4                     l1409:
  1596   0014F4  90D8               	bcf	status,0,c
  1597   0014F6  3629               	rlcf	___awdiv@divisor^0,f,c
  1598   0014F8  362A               	rlcf	(___awdiv@divisor+1)^0,f,c
  1599   0014FA  2A2B               	incf	___awdiv@counter^0,f,c
  1600   0014FC                     l1411:
  1601   0014FC  AE2A               	btfss	(___awdiv@divisor+1)^0,7,c
  1602   0014FE  EF83  F00A         	goto	u551
  1603   001502  EF85  F00A         	goto	u550
  1604   001506                     u551:
  1605   001506  EF7A  F00A         	goto	l1409
  1606   00150A                     u550:
  1607   00150A                     l1413:
  1608   00150A  90D8               	bcf	status,0,c
  1609   00150C  362D               	rlcf	___awdiv@quotient^0,f,c
  1610   00150E  362E               	rlcf	(___awdiv@quotient+1)^0,f,c
  1611   001510  5029               	movf	___awdiv@divisor^0,w,c
  1612   001512  5C27               	subwf	___awdiv@dividend^0,w,c
  1613   001514  502A               	movf	(___awdiv@divisor+1)^0,w,c
  1614   001516  5828               	subwfb	(___awdiv@dividend+1)^0,w,c
  1615   001518  A0D8               	btfss	status,0,c
  1616   00151A  EF91  F00A         	goto	u561
  1617   00151E  EF93  F00A         	goto	u560
  1618   001522                     u561:
  1619   001522  EF98  F00A         	goto	l1421
  1620   001526                     u560:
  1621   001526  5029               	movf	___awdiv@divisor^0,w,c
  1622   001528  5E27               	subwf	___awdiv@dividend^0,f,c
  1623   00152A  502A               	movf	(___awdiv@divisor+1)^0,w,c
  1624   00152C  5A28               	subwfb	(___awdiv@dividend+1)^0,f,c
  1625   00152E  802D               	bsf	___awdiv@quotient^0,0,c
  1626   001530                     l1421:
  1627   001530  90D8               	bcf	status,0,c
  1628   001532  322A               	rrcf	(___awdiv@divisor+1)^0,f,c
  1629   001534  3229               	rrcf	___awdiv@divisor^0,f,c
  1630   001536  2E2B               	decfsz	___awdiv@counter^0,f,c
  1631   001538  EF85  F00A         	goto	l1413
  1632   00153C                     l1425:
  1633   00153C  502C               	movf	___awdiv@sign^0,w,c
  1634   00153E  B4D8               	btfsc	status,2,c
  1635   001540  EFA4  F00A         	goto	u571
  1636   001544  EFA6  F00A         	goto	u570
  1637   001548                     u571:
  1638   001548  EFAA  F00A         	goto	l1429
  1639   00154C                     u570:
  1640   00154C  6C2D               	negf	___awdiv@quotient^0,c
  1641   00154E  1E2E               	comf	(___awdiv@quotient+1)^0,f,c
  1642   001550  B0D8               	btfsc	status,0,c
  1643   001552  2A2E               	incf	(___awdiv@quotient+1)^0,f,c
  1644   001554                     l1429:
  1645   001554  C02D  F027         	movff	___awdiv@quotient,?___awdiv
  1646   001558  C02E  F028         	movff	___awdiv@quotient+1,?___awdiv+1
  1647   00155C  0012               	return		;funcret
  1648   00155E                     __end_of___awdiv:
  1649                           	callstack 0
  1650                           
  1651 ;; *************** function _switch_calibration *****************
  1652 ;; Defined at:
  1653 ;;		line 44 in file "../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;  calibration_    1    0[COMRAM] PTR int 
  1656 ;;		 -> calibration(6), 
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;		None
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      void 
  1661 ;; Registers used:
  1662 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1668 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1670 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1671 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1672 ;;Total ram usage:        3 bytes
  1673 ;; Hardware stack levels used: 1
  1674 ;; This function calls:
  1675 ;;		Nothing
  1676 ;; This function is called by:
  1677 ;;		_main
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text8
  1682   00155E                     __ptext8:
  1683                           	callstack 0
  1684   00155E                     _switch_calibration:
  1685                           	callstack 30
  1686   00155E                     l112:
  1687                           
  1688                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 46:         if(!PORTFbits.RF2){
  1689   00155E  B48E               	btfsc	142,2,c	;volatile
  1690   001560  EFB4  F00A         	goto	u701
  1691   001564  EFB6  F00A         	goto	u700
  1692   001568                     u701:
  1693   001568  EFE4  F00A         	goto	l113
  1694   00156C                     u700:
  1695   00156C                     
  1696                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 47:             _delay((unsigned 
      +                          long)((200)*(64000000/4000.0)));
  1697   00156C  0E11               	movlw	17
  1698   00156E  6E29               	movwf	(??_switch_calibration+1)^0,c
  1699   001570  0E3C               	movlw	60
  1700   001572  6E28               	movwf	??_switch_calibration^0,c
  1701   001574  0ECB               	movlw	203
  1702   001576                     u947:
  1703   001576  2EE8               	decfsz	wreg,f,c
  1704   001578  D7FE               	bra	u947
  1705   00157A  2E28               	decfsz	??_switch_calibration^0,f,c
  1706   00157C  D7FC               	bra	u947
  1707   00157E  2E29               	decfsz	(??_switch_calibration+1)^0,f,c
  1708   001580  D7FA               	bra	u947
  1709   001582  0000               	nop	
  1710   001584                     
  1711                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 48:             *calibration_inde
      +                          x = *calibration_index + 1;
  1712   001584  5027               	movf	switch_calibration@calibration_index^0,w,c
  1713   001586  6ED9               	movwf	fsr2l,c
  1714   001588  6ADA               	clrf	fsr2h,c
  1715   00158A  CFDE F028          	movff	postinc2,??_switch_calibration
  1716   00158E  CFDD F029          	movff	postdec2,??_switch_calibration+1
  1717   001592  0E01               	movlw	1
  1718   001594  2628               	addwf	??_switch_calibration^0,f,c
  1719   001596  0E00               	movlw	0
  1720   001598  2229               	addwfc	(??_switch_calibration+1)^0,f,c
  1721   00159A  5027               	movf	switch_calibration@calibration_index^0,w,c
  1722   00159C  6ED9               	movwf	fsr2l,c
  1723   00159E  6ADA               	clrf	fsr2h,c
  1724   0015A0  C028  FFDE         	movff	??_switch_calibration,postinc2
  1725   0015A4  C029  FFDD         	movff	??_switch_calibration+1,postdec2
  1726   0015A8                     
  1727                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 49:             LATDbits.LATD7 = 
      +                          1;
  1728   0015A8  8E7C               	bsf	124,7,c	;volatile
  1729   0015AA                     
  1730                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 50:             _delay((unsigned 
      +                          long)((200)*(64000000/4000.0)));
  1731   0015AA  0E11               	movlw	17
  1732   0015AC  6E29               	movwf	(??_switch_calibration+1)^0,c
  1733   0015AE  0E3C               	movlw	60
  1734   0015B0  6E28               	movwf	??_switch_calibration^0,c
  1735   0015B2  0ECB               	movlw	203
  1736   0015B4                     u957:
  1737   0015B4  2EE8               	decfsz	wreg,f,c
  1738   0015B6  D7FE               	bra	u957
  1739   0015B8  2E28               	decfsz	??_switch_calibration^0,f,c
  1740   0015BA  D7FC               	bra	u957
  1741   0015BC  2E29               	decfsz	(??_switch_calibration+1)^0,f,c
  1742   0015BE  D7FA               	bra	u957
  1743   0015C0  0000               	nop	
  1744   0015C2                     
  1745                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 51:             LATDbits.LATD7 = 
      +                          0;
  1746   0015C2  9E7C               	bcf	124,7,c	;volatile
  1747                           
  1748                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 52:             break;
  1749   0015C4  EF05  F00B         	goto	l117
  1750   0015C8                     l113:
  1751                           
  1752                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 55:         if(!PORTFbits.RF3){
  1753   0015C8  B68E               	btfsc	142,3,c	;volatile
  1754   0015CA  EFE9  F00A         	goto	u711
  1755   0015CE  EFEB  F00A         	goto	u710
  1756   0015D2                     u711:
  1757   0015D2  EFAF  F00A         	goto	l112
  1758   0015D6                     u710:
  1759   0015D6                     
  1760                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 56:             _delay((unsigned 
      +                          long)((200)*(64000000/4000.0)));
  1761   0015D6  0E11               	movlw	17
  1762   0015D8  6E29               	movwf	(??_switch_calibration+1)^0,c
  1763   0015DA  0E3C               	movlw	60
  1764   0015DC  6E28               	movwf	??_switch_calibration^0,c
  1765   0015DE  0ECB               	movlw	203
  1766   0015E0                     u967:
  1767   0015E0  2EE8               	decfsz	wreg,f,c
  1768   0015E2  D7FE               	bra	u967
  1769   0015E4  2E28               	decfsz	??_switch_calibration^0,f,c
  1770   0015E6  D7FC               	bra	u967
  1771   0015E8  2E29               	decfsz	(??_switch_calibration+1)^0,f,c
  1772   0015EA  D7FA               	bra	u967
  1773   0015EC  0000               	nop	
  1774   0015EE                     
  1775                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 57:             LATHbits.LATH3 = 
      +                          1;
  1776   0015EE  8680               	bsf	128,3,c	;volatile
  1777                           
  1778                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 58:             _delay((unsigned 
      +                          long)((200)*(64000000/4000.0)));
  1779   0015F0  0E11               	movlw	17
  1780   0015F2  6E29               	movwf	(??_switch_calibration+1)^0,c
  1781   0015F4  0E3C               	movlw	60
  1782   0015F6  6E28               	movwf	??_switch_calibration^0,c
  1783   0015F8  0ECB               	movlw	203
  1784   0015FA                     u977:
  1785   0015FA  2EE8               	decfsz	wreg,f,c
  1786   0015FC  D7FE               	bra	u977
  1787   0015FE  2E28               	decfsz	??_switch_calibration^0,f,c
  1788   001600  D7FC               	bra	u977
  1789   001602  2E29               	decfsz	(??_switch_calibration+1)^0,f,c
  1790   001604  D7FA               	bra	u977
  1791   001606  0000               	nop	
  1792   001608                     
  1793                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 59:             LATHbits.LATH3 = 
      +                          0;
  1794   001608  9680               	bcf	128,3,c	;volatile
  1795   00160A                     l117:
  1796   00160A  0012               	return		;funcret
  1797   00160C                     __end_of_switch_calibration:
  1798                           	callstack 0
  1799                           
  1800 ;; *************** function _initDCmotorsPWM *****************
  1801 ;; Defined at:
  1802 ;;		line 5 in file "../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      void 
  1809 ;; Registers used:
  1810 ;;		wreg, status,2
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1816 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1819 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1820 ;;Total ram usage:        2 bytes
  1821 ;; Hardware stack levels used: 1
  1822 ;; This function calls:
  1823 ;;		Nothing
  1824 ;; This function is called by:
  1825 ;;		_main
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text9
  1830   00160C                     __ptext9:
  1831                           	callstack 0
  1832   00160C                     _initDCmotorsPWM:
  1833                           	callstack 30
  1834   00160C                     
  1835                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 7:     TRISEbits.TRISE2 = 0;
  1836   00160C  9485               	bcf	133,2,c	;volatile
  1837                           
  1838                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 8:     TRISEbits.TRISE4 = 0;
  1839   00160E  9885               	bcf	133,4,c	;volatile
  1840                           
  1841                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 9:     TRISCbits.TRISC7 = 0;
  1842   001610  9E83               	bcf	131,7,c	;volatile
  1843                           
  1844                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 10:     TRISGbits.TRISG6 = 0;
  1845   001612  9C87               	bcf	135,6,c	;volatile
  1846                           
  1847                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 12:     LATEbits.LATE2 = 0;
  1848   001614  947D               	bcf	125,2,c	;volatile
  1849                           
  1850                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 13:     LATEbits.LATE4 = 0;
  1851   001616  987D               	bcf	125,4,c	;volatile
  1852                           
  1853                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 14:     LATCbits.LATC7 = 0;
  1854   001618  9E7B               	bcf	123,7,c	;volatile
  1855                           
  1856                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 15:     LATGbits.LATG6 = 0;
  1857   00161A  9C7F               	bcf	127,6,c	;volatile
  1858   00161C                     
  1859                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 18:     RE2PPS=0x05;
  1860   00161C  0E05               	movlw	5
  1861   00161E  010E               	movlb	14	; () banked
  1862   001620  6F74               	movwf	116,b	;volatile
  1863                           
  1864                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 19:     RE4PPS=0x06;
  1865   001622  0E06               	movlw	6
  1866   001624  6F76               	movwf	118,b	;volatile
  1867                           
  1868                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 20:     RC7PPS=0x07;
  1869   001626  0E07               	movlw	7
  1870   001628  6F69               	movwf	105,b	;volatile
  1871                           
  1872                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 21:     RG6PPS=0x08;
  1873   00162A  0E08               	movlw	8
  1874   00162C  6F88               	movwf	136,b	;volatile
  1875                           
  1876                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 24:     T2CONbits.CKPS=100;
  1877   00162E  50BD               	movf	189,w,c	;volatile
  1878   001630  0B8F               	andlw	-113
  1879   001632  0940               	iorlw	64
  1880   001634  6EBD               	movwf	189,c	;volatile
  1881                           
  1882                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 25:     T2HLTbits.MODE=0b00000;
  1883   001636  0EE0               	movlw	-32
  1884   001638  16BE               	andwf	190,f,c	;volatile
  1885                           
  1886                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 26:     T2CLKCONbits.CS=0b0001;
  1887   00163A  50BF               	movf	191,w,c	;volatile
  1888   00163C  0BF0               	andlw	-16
  1889   00163E  0901               	iorlw	1
  1890   001640  6EBF               	movwf	191,c	;volatile
  1891   001642                     
  1892                           ; BSR set to: 14
  1893                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 30:     T2PR=PWMperiod;
  1894   001642  C027  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1895   001646                     
  1896                           ; BSR set to: 14
  1897                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 31:     T2CONbits.ON=1;
  1898   001646  8EBD               	bsf	189,7,c	;volatile
  1899                           
  1900                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 35:     CCPR1H=0;
  1901   001648  0E00               	movlw	0
  1902   00164A  6EAA               	movwf	170,c	;volatile
  1903                           
  1904                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 36:     CCPR2H=0;
  1905   00164C  0E00               	movlw	0
  1906   00164E  6EA6               	movwf	166,c	;volatile
  1907                           
  1908                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 37:     CCPR3H=0;
  1909   001650  0E00               	movlw	0
  1910   001652  010F               	movlb	15	; () banked
  1911   001654  6F25               	movwf	37,b	;volatile
  1912                           
  1913                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 38:     CCPR4H=0;
  1914   001656  0E00               	movlw	0
  1915   001658  6F21               	movwf	33,b	;volatile
  1916                           
  1917                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1918   00165A  0EFC               	movlw	-4
  1919   00165C  16AD               	andwf	173,f,c	;volatile
  1920                           
  1921                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1922   00165E  0EF3               	movlw	-13
  1923   001660  16AD               	andwf	173,f,c	;volatile
  1924                           
  1925                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1926   001662  0ECF               	movlw	-49
  1927   001664  16AD               	andwf	173,f,c	;volatile
  1928                           
  1929                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1930   001666  0E3F               	movlw	-193
  1931   001668  16AD               	andwf	173,f,c	;volatile
  1932   00166A                     
  1933                           ; BSR set to: 15
  1934                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 47:     CCP1CONbits.FMT=1;
  1935   00166A  88AB               	bsf	171,4,c	;volatile
  1936                           
  1937                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 48:     CCP1CONbits.CCP1MODE=0b11
      +                          00;
  1938   00166C  50AB               	movf	171,w,c	;volatile
  1939   00166E  0BF0               	andlw	-16
  1940   001670  090C               	iorlw	12
  1941   001672  6EAB               	movwf	171,c	;volatile
  1942   001674                     
  1943                           ; BSR set to: 15
  1944                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 49:     CCP1CONbits.EN=1;
  1945   001674  8EAB               	bsf	171,7,c	;volatile
  1946   001676                     
  1947                           ; BSR set to: 15
  1948                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 51:     CCP2CONbits.FMT=1;
  1949   001676  88A7               	bsf	167,4,c	;volatile
  1950                           
  1951                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 52:     CCP2CONbits.CCP2MODE=0b11
      +                          00;
  1952   001678  50A7               	movf	167,w,c	;volatile
  1953   00167A  0BF0               	andlw	-16
  1954   00167C  090C               	iorlw	12
  1955   00167E  6EA7               	movwf	167,c	;volatile
  1956   001680                     
  1957                           ; BSR set to: 15
  1958                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 53:     CCP2CONbits.EN=1;
  1959   001680  8EA7               	bsf	167,7,c	;volatile
  1960   001682                     
  1961                           ; BSR set to: 15
  1962                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 55:     CCP3CONbits.FMT=1;
  1963   001682  8926               	bsf	38,4,b	;volatile
  1964                           
  1965                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 56:     CCP3CONbits.CCP3MODE=0b11
      +                          00;
  1966   001684  5126               	movf	38,w,b	;volatile
  1967   001686  0BF0               	andlw	-16
  1968   001688  090C               	iorlw	12
  1969   00168A  6F26               	movwf	38,b	;volatile
  1970   00168C                     
  1971                           ; BSR set to: 15
  1972                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 57:     CCP3CONbits.EN=1;
  1973   00168C  8F26               	bsf	38,7,b	;volatile
  1974   00168E                     
  1975                           ; BSR set to: 15
  1976                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 59:     CCP4CONbits.FMT=1;
  1977   00168E  8922               	bsf	34,4,b	;volatile
  1978                           
  1979                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 60:     CCP4CONbits.CCP4MODE=0b11
      +                          00;
  1980   001690  5122               	movf	34,w,b	;volatile
  1981   001692  0BF0               	andlw	-16
  1982   001694  090C               	iorlw	12
  1983   001696  6F22               	movwf	34,b	;volatile
  1984   001698                     
  1985                           ; BSR set to: 15
  1986                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 61:     CCP4CONbits.EN=1;
  1987   001698  8F22               	bsf	34,7,b	;volatile
  1988   00169A                     
  1989                           ; BSR set to: 15
  1990                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 64:     TRISHbits.TRISH3 = 0;
  1991   00169A  9688               	bcf	136,3,c	;volatile
  1992   00169C                     
  1993                           ; BSR set to: 15
  1994                           ;../lab-6-motors-and-pwm-tomas-thomas.X/dc_motor_v1.c: 65:     LATHbits.LATH3 = 0;
  1995   00169C  9680               	bcf	128,3,c	;volatile
  1996   00169E                     
  1997                           ; BSR set to: 15
  1998   00169E  0012               	return		;funcret
  1999   0016A0                     __end_of_initDCmotorsPWM:
  2000                           	callstack 0
  2001                           
  2002 ;; *************** function _adjust_calibration *****************
  2003 ;; Defined at:
  2004 ;;		line 6 in file "../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  calibration_    1    0[COMRAM] PTR int 
  2007 ;;		 -> calibration(6), 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;		None
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      void 
  2012 ;; Registers used:
  2013 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2019 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2021 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2022 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2023 ;;Total ram usage:        5 bytes
  2024 ;; Hardware stack levels used: 1
  2025 ;; This function calls:
  2026 ;;		Nothing
  2027 ;; This function is called by:
  2028 ;;		_main
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           	psect	text10
  2033   001252                     __ptext10:
  2034                           	callstack 0
  2035   001252                     _adjust_calibration:
  2036                           	callstack 30
  2037   001252                     l99:
  2038                           
  2039                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 11:         if(!PORTFbits.RF3 || 
      +                          !PORTFbits.RF2){
  2040   001252  A68E               	btfss	142,3,c	;volatile
  2041   001254  EF2E  F009         	goto	u581
  2042   001258  EF30  F009         	goto	u580
  2043   00125C                     u581:
  2044   00125C  EF37  F009         	goto	l1463
  2045   001260                     u580:
  2046   001260  B48E               	btfsc	142,2,c	;volatile
  2047   001262  EF35  F009         	goto	u591
  2048   001266  EF37  F009         	goto	u590
  2049   00126A                     u591:
  2050   00126A  EF29  F009         	goto	l99
  2051   00126E                     u590:
  2052   00126E                     l1463:
  2053                           
  2054                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 12:             _delay((unsigned 
      +                          long)((100)*(64000000/4000.0)));
  2055   00126E  0E09               	movlw	9
  2056   001270  6E29               	movwf	(??_adjust_calibration+1)^0,c
  2057   001272  0E1E               	movlw	30
  2058   001274  6E28               	movwf	??_adjust_calibration^0,c
  2059   001276  0EE4               	movlw	228
  2060   001278                     u987:
  2061   001278  2EE8               	decfsz	wreg,f,c
  2062   00127A  D7FE               	bra	u987
  2063   00127C  2E28               	decfsz	??_adjust_calibration^0,f,c
  2064   00127E  D7FC               	bra	u987
  2065   001280  2E29               	decfsz	(??_adjust_calibration+1)^0,f,c
  2066   001282  D7FA               	bra	u987
  2067   001284  D000               	nop2	
  2068   001286                     
  2069                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 14:             if(!PORTFbits.RF3
      +                           && !PORTFbits.RF2 ){
  2070   001286  B68E               	btfsc	142,3,c	;volatile
  2071   001288  EF48  F009         	goto	u601
  2072   00128C  EF4A  F009         	goto	u600
  2073   001290                     u601:
  2074   001290  EF63  F009         	goto	l103
  2075   001294                     u600:
  2076   001294  B48E               	btfsc	142,2,c	;volatile
  2077   001296  EF4F  F009         	goto	u611
  2078   00129A  EF51  F009         	goto	u610
  2079   00129E                     u611:
  2080   00129E  EF63  F009         	goto	l103
  2081   0012A2                     u610:
  2082   0012A2                     
  2083                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 16:                 LATHbits.LATH
      +                          3 = 1;
  2084   0012A2  8680               	bsf	128,3,c	;volatile
  2085                           
  2086                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 17:                 LATDbits.LATD
      +                          7 = 1;
  2087   0012A4  8E7C               	bsf	124,7,c	;volatile
  2088   0012A6                     
  2089                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 18:                 _delay((unsig
      +                          ned long)((1000)*(64000000/4000.0)));
  2090   0012A6  0E52               	movlw	82
  2091   0012A8  6E29               	movwf	(??_adjust_calibration+1)^0,c
  2092   0012AA  0E2B               	movlw	43
  2093   0012AC  6E28               	movwf	??_adjust_calibration^0,c
  2094   0012AE  0E00               	movlw	0
  2095   0012B0                     u997:
  2096   0012B0  2EE8               	decfsz	wreg,f,c
  2097   0012B2  D7FE               	bra	u997
  2098   0012B4  2E28               	decfsz	??_adjust_calibration^0,f,c
  2099   0012B6  D7FC               	bra	u997
  2100   0012B8  2E29               	decfsz	(??_adjust_calibration+1)^0,f,c
  2101   0012BA  D7FA               	bra	u997
  2102   0012BC  D000               	nop2	
  2103   0012BE                     
  2104                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 19:                 LATHbits.LATH
      +                          3 = 0;
  2105   0012BE  9680               	bcf	128,3,c	;volatile
  2106   0012C0                     
  2107                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 20:                 LATDbits.LATD
      +                          7 = 0;
  2108   0012C0  9E7C               	bcf	124,7,c	;volatile
  2109                           
  2110                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 21:                 break;
  2111   0012C2  EFCF  F009         	goto	l109
  2112   0012C6                     l103:
  2113                           
  2114                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 24:                 if(!PORTFbits
      +                          .RF2){
  2115   0012C6  B48E               	btfsc	142,2,c	;volatile
  2116   0012C8  EF68  F009         	goto	u621
  2117   0012CC  EF6A  F009         	goto	u620
  2118   0012D0                     u621:
  2119   0012D0  EF96  F009         	goto	l1489
  2120   0012D4                     u620:
  2121   0012D4                     
  2122                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 25:                     _delay((u
      +                          nsigned long)((200)*(64000000/4000.0)));
  2123   0012D4  0E11               	movlw	17
  2124   0012D6  6E29               	movwf	(??_adjust_calibration+1)^0,c
  2125   0012D8  0E3C               	movlw	60
  2126   0012DA  6E28               	movwf	??_adjust_calibration^0,c
  2127   0012DC  0ECB               	movlw	203
  2128   0012DE                     u1007:
  2129   0012DE  2EE8               	decfsz	wreg,f,c
  2130   0012E0  D7FE               	bra	u1007
  2131   0012E2  2E28               	decfsz	??_adjust_calibration^0,f,c
  2132   0012E4  D7FC               	bra	u1007
  2133   0012E6  2E29               	decfsz	(??_adjust_calibration+1)^0,f,c
  2134   0012E8  D7FA               	bra	u1007
  2135   0012EA  0000               	nop	
  2136   0012EC                     
  2137                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 26:                     *calibrat
      +                          ion_label = *calibration_label + 5;
  2138   0012EC  5027               	movf	adjust_calibration@calibration_label^0,w,c
  2139   0012EE  6ED9               	movwf	fsr2l,c
  2140   0012F0  6ADA               	clrf	fsr2h,c
  2141   0012F2  CFDE F028          	movff	postinc2,??_adjust_calibration
  2142   0012F6  CFDD F029          	movff	postdec2,??_adjust_calibration+1
  2143   0012FA  0E05               	movlw	5
  2144   0012FC  2628               	addwf	??_adjust_calibration^0,f,c
  2145   0012FE  0E00               	movlw	0
  2146   001300  2229               	addwfc	(??_adjust_calibration+1)^0,f,c
  2147   001302  5027               	movf	adjust_calibration@calibration_label^0,w,c
  2148   001304  6ED9               	movwf	fsr2l,c
  2149   001306  6ADA               	clrf	fsr2h,c
  2150   001308  C028  FFDE         	movff	??_adjust_calibration,postinc2
  2151   00130C  C029  FFDD         	movff	??_adjust_calibration+1,postdec2
  2152   001310                     
  2153                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 27:                     LATDbits.
      +                          LATD7 = 1;
  2154   001310  8E7C               	bsf	124,7,c	;volatile
  2155   001312                     
  2156                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 28:                     _delay((u
      +                          nsigned long)((200)*(64000000/4000.0)));
  2157   001312  0E11               	movlw	17
  2158   001314  6E29               	movwf	(??_adjust_calibration+1)^0,c
  2159   001316  0E3C               	movlw	60
  2160   001318  6E28               	movwf	??_adjust_calibration^0,c
  2161   00131A  0ECB               	movlw	203
  2162   00131C                     u1017:
  2163   00131C  2EE8               	decfsz	wreg,f,c
  2164   00131E  D7FE               	bra	u1017
  2165   001320  2E28               	decfsz	??_adjust_calibration^0,f,c
  2166   001322  D7FC               	bra	u1017
  2167   001324  2E29               	decfsz	(??_adjust_calibration+1)^0,f,c
  2168   001326  D7FA               	bra	u1017
  2169   001328  0000               	nop	
  2170   00132A                     
  2171                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 29:                     LATDbits.
      +                          LATD7 = 0;
  2172   00132A  9E7C               	bcf	124,7,c	;volatile
  2173   00132C                     l1489:
  2174                           
  2175                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 32:                 if(!PORTFbits
      +                          .RF3){
  2176   00132C  B68E               	btfsc	142,3,c	;volatile
  2177   00132E  EF9B  F009         	goto	u631
  2178   001332  EF9D  F009         	goto	u630
  2179   001336                     u631:
  2180   001336  EFCD  F009         	goto	l100
  2181   00133A                     u630:
  2182   00133A                     
  2183                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 33:                     _delay((u
      +                          nsigned long)((200)*(64000000/4000.0)));
  2184   00133A  0E11               	movlw	17
  2185   00133C  6E29               	movwf	(??_adjust_calibration+1)^0,c
  2186   00133E  0E3C               	movlw	60
  2187   001340  6E28               	movwf	??_adjust_calibration^0,c
  2188   001342  0ECB               	movlw	203
  2189   001344                     u1027:
  2190   001344  2EE8               	decfsz	wreg,f,c
  2191   001346  D7FE               	bra	u1027
  2192   001348  2E28               	decfsz	??_adjust_calibration^0,f,c
  2193   00134A  D7FC               	bra	u1027
  2194   00134C  2E29               	decfsz	(??_adjust_calibration+1)^0,f,c
  2195   00134E  D7FA               	bra	u1027
  2196   001350  0000               	nop	
  2197   001352                     
  2198                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 34:                     *calibrat
      +                          ion_label = *calibration_label - 5;
  2199   001352  5027               	movf	adjust_calibration@calibration_label^0,w,c
  2200   001354  6ED9               	movwf	fsr2l,c
  2201   001356  6ADA               	clrf	fsr2h,c
  2202   001358  CFDE F028          	movff	postinc2,??_adjust_calibration
  2203   00135C  CFDD F029          	movff	postdec2,??_adjust_calibration+1
  2204   001360  0EFB               	movlw	251
  2205   001362  2428               	addwf	??_adjust_calibration^0,w,c
  2206   001364  6E2A               	movwf	(??_adjust_calibration+2)^0,c
  2207   001366  0EFF               	movlw	255
  2208   001368  2029               	addwfc	(??_adjust_calibration+1)^0,w,c
  2209   00136A  6E2B               	movwf	(??_adjust_calibration+3)^0,c
  2210   00136C  5027               	movf	adjust_calibration@calibration_label^0,w,c
  2211   00136E  6ED9               	movwf	fsr2l,c
  2212   001370  6ADA               	clrf	fsr2h,c
  2213   001372  C02A  FFDE         	movff	??_adjust_calibration+2,postinc2
  2214   001376  C02B  FFDD         	movff	??_adjust_calibration+3,postdec2
  2215   00137A                     
  2216                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 35:                     LATHbits.
      +                          LATH3 = 1;
  2217   00137A  8680               	bsf	128,3,c	;volatile
  2218   00137C                     
  2219                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 36:                     _delay((u
      +                          nsigned long)((200)*(64000000/4000.0)));
  2220   00137C  0E11               	movlw	17
  2221   00137E  6E29               	movwf	(??_adjust_calibration+1)^0,c
  2222   001380  0E3C               	movlw	60
  2223   001382  6E28               	movwf	??_adjust_calibration^0,c
  2224   001384  0ECB               	movlw	203
  2225   001386                     u1037:
  2226   001386  2EE8               	decfsz	wreg,f,c
  2227   001388  D7FE               	bra	u1037
  2228   00138A  2E28               	decfsz	??_adjust_calibration^0,f,c
  2229   00138C  D7FC               	bra	u1037
  2230   00138E  2E29               	decfsz	(??_adjust_calibration+1)^0,f,c
  2231   001390  D7FA               	bra	u1037
  2232   001392  0000               	nop	
  2233   001394                     
  2234                           ;../lab-6-motors-and-pwm-tomas-thomas.X/calibration.c: 37:                     LATHbits.
      +                          LATH3 = 0;
  2235   001394  9680               	bcf	128,3,c	;volatile
  2236   001396  EF29  F009         	goto	l99
  2237   00139A                     l100:
  2238   00139A  EF29  F009         	goto	l99
  2239   00139E                     l109:
  2240   00139E  0012               	return		;funcret
  2241   0013A0                     __end_of_adjust_calibration:
  2242                           	callstack 0
  2243                           
  2244                           	psect	smallconst
  2245   000E00                     __psmallconst:
  2246                           	callstack 0
  2247   000E00  00                 	db	0
  2248   000E01  00                 	db	0	; dummy byte at the end
  2249   000000                     
  2250                           	psect	rparam
  2251   000000                     
  2252                           	psect	config
  2253                           
  2254                           ;Config register CONFIG1L @ 0x300000
  2255                           ;	External Oscillator mode Selection bits
  2256                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2257                           ;	Power-up default value for COSC bits
  2258                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2259   300000                     	org	3145728
  2260   300000  AA                 	db	170
  2261                           
  2262                           ;Config register CONFIG1H @ 0x300001
  2263                           ;	unspecified, using default values
  2264                           ;	Clock Out Enable bit
  2265                           ;	CLKOUTEN = 0x1, unprogrammed default
  2266                           ;	Clock Switch Enable bit
  2267                           ;	CSWEN = 0x1, unprogrammed default
  2268                           ;	Fail-Safe Clock Monitor Enable bit
  2269                           ;	FCMEN = 0x1, unprogrammed default
  2270   300001                     	org	3145729
  2271   300001  FF                 	db	255
  2272                           
  2273                           ;Config register CONFIG3L @ 0x300004
  2274                           ;	WDT Period Select bits
  2275                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2276                           ;	WDT operating mode
  2277                           ;	WDTE = OFF, WDT Disabled
  2278   300004                     	org	3145732
  2279   300004  9F                 	db	159
  2280                           
  2281                           ;Config register CONFIG3H @ 0x300005
  2282                           ;	unspecified, using default values
  2283                           ;	WDT Window Select bits
  2284                           ;	WDTCWS = 0x7, unprogrammed default
  2285                           ;	WDT input clock selector
  2286                           ;	WDTCCS = 0x7, unprogrammed default
  2287   300005                     	org	3145733
  2288   300005  FF                 	db	255
  2289                           tosu	equ	0xFFF
  2290                           tosh	equ	0xFFE
  2291                           tosl	equ	0xFFD
  2292                           stkptr	equ	0xFFC
  2293                           pclatu	equ	0xFFB
  2294                           pclath	equ	0xFFA
  2295                           pcl	equ	0xFF9
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           prodh	equ	0xFF4
  2301                           prodl	equ	0xFF3
  2302                           indf0	equ	0xFEF
  2303                           postinc0	equ	0xFEE
  2304                           postdec0	equ	0xFED
  2305                           preinc0	equ	0xFEC
  2306                           plusw0	equ	0xFEB
  2307                           fsr0h	equ	0xFEA
  2308                           fsr0l	equ	0xFE9
  2309                           wreg	equ	0xFE8
  2310                           indf1	equ	0xFE7
  2311                           postinc1	equ	0xFE6
  2312                           postdec1	equ	0xFE5
  2313                           preinc1	equ	0xFE4
  2314                           plusw1	equ	0xFE3
  2315                           fsr1h	equ	0xFE2
  2316                           fsr1l	equ	0xFE1
  2317                           bsr	equ	0xFE0
  2318                           indf2	equ	0xFDF
  2319                           postinc2	equ	0xFDE
  2320                           postdec2	equ	0xFDD
  2321                           preinc2	equ	0xFDC
  2322                           plusw2	equ	0xFDB
  2323                           fsr2h	equ	0xFDA
  2324                           fsr2l	equ	0xFD9
  2325                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     32      71
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    adjust_calibration@calibration_label	PTR int  size(1) Largest target is 6
		 -> calibration(COMRAM[6]), 

    forward@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    forward@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    forward@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    forward@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    switch_calibration@calibration_index	PTR int  size(1) Largest target is 6
		 -> calibration(COMRAM[6]), 

    turnLEFT@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLEFT@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLEFT@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnLEFT@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLEFT@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnLEFT@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRIGHT@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRIGHT@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRIGHT@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 

    turnRIGHT@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRIGHT@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRlllllll[1]), CCPR4H(BITBIGSFRlllllll[1]), 

    turnRIGHT@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRlllllll[1]), CCPR3H(BITBIGSFRlllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_turnLEFT
    _main->_turnRIGHT
    _turnRIGHT->_setMotorPWM
    _turnLEFT->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8711
                 _adjust_calibration
                    _initDCmotorsPWM
                 _switch_calibration
                           _turnLEFT
                          _turnRIGHT
 ---------------------------------------------------------------------------------
 (1) _turnRIGHT                                           16    14      2    4055
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLEFT                                            16    14      2    4055
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2133
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _delay_ms_function                                    3     1      2     479
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     756
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _switch_calibration                                   3     2      1     196
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _adjust_calibration                                   5     4      1     240
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adjust_calibration
   _initDCmotorsPWM
   _switch_calibration
   _turnLEFT
     ___awdiv
     _delay_ms_function
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _turnRIGHT
     ___awdiv
     _delay_ms_function
     _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      49        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRllllll     7A      0       0      47        0.0%
BITBIGSFRllllh      6C      0       0      42        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     20      47       1       74.7%
BITBIGSFRllhll      54      0       0      40        0.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRlllllh     2B      0       0      43        0.0%
BITBIGSFRllhhhh     17      0       0      36        0.0%
BITBIGSFRlllllh     11      0       0      44        0.0%
BITBIGSFRhlh         E      0       0      33        0.0%
BITBIGSFRllllll      A      0       0      46        0.0%
BITBIGSFRllhhhl      5      0       0      37        0.0%
BITBIGSFRllhlhh      2      0       0      38        0.0%
BITBIGSFRlllh        2      0       0      41        0.0%
BITBIGSFRlh          2      0       0      35        0.0%
BITBIGSFRlllllh      1      0       0      45        0.0%
BITBIGSFRllhlhl      1      0       0      39        0.0%
BITBIGSFRhll         1      0       0      34        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      47      48        0.0%
DATA                 0      0      47       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 20:38:55 2024

                                 l99 1252                         ___awdiv@sign 002C  
                ___wmul@multiplicand 0029                                  l100 139A  
                                l103 12C6                                  l112 155E  
                                l113 15C8                                  l109 139E  
                                l117 160A                                  l241 0F7E  
                                l233 0ED2                                  l227 10FC  
                                l219 1050                                  l244 1766  
                                l181 172E                                  l191 1250  
                                l184 1740                                  l178 169E  
                                l475 155C                                  l742 1712  
                                l735 170A                                  u500 1118  
                                u501 1114                                  u510 11D4  
                                u511 11D0                                  u600 1294  
                                u520 14AC                                  u601 1290  
                                u521 14A8                                  u610 12A2  
                                u530 14C6                                  u611 129E  
                                u531 14C2                                  u620 12D4  
                                u700 156C                                  u540 14EC  
                                u460 16BA                                  u621 12D0  
                                u701 1568                                  u541 14E8  
                                u461 16B6                                  u630 133A  
                                u710 15D6                                  u550 150A  
                                u470 16D8                                  u631 1336  
                                u711 15D2                                  u551 1506  
                                u471 16D4                                  u560 1526  
                                u480 16F4                                  u720 1032  
                                u640 0EB4                                  u800 148E  
                                u561 1522                                  u481 16F0  
                                u721 102E                                  u641 0EB0  
                                u801 148A                                  u570 154C  
                                u490 1740                                  u730 1074  
                                u650 0EF6                                  u571 1548  
                                u491 173C                                  u731 1070  
                                u651 0EF2                                  u580 1260  
                                u740 108E                                  u660 0F10  
                                u581 125C                                  u741 108A  
                                u661 0F0C                                  u590 126E  
                                u750 10AC                                  u670 0F2E  
                                u591 126A                                  u751 10A8  
                                u671 0F2A                                  u760 10E6  
                                u680 0F68                                  u761 10E2  
                                u681 0F64                                  u770 10FC  
                                u690 0F7E                                  u771 10F8  
                                u691 0F7A                                  u780 142E  
                                u917 0EC6                                  u781 142A  
                                u790 145E                                  u927 1044  
                                u791 145A                                  u937 171E  
                                u947 1576                                  u957 15B4  
                                u967 15E0                                  u977 15FA  
                                u987 1278                                  u997 12B0  
                                wreg 0FE8           __end_of_adjust_calibration 13A0  
                               l1401 14CE                                 l1411 14FC  
                               l1403 14D2                                 l1421 1530  
                               l1413 150A                                 l1405 14DA  
                               l1341 175E                                 l1501 0E04  
                               l1423 1536                                 l1415 1510  
                               l1407 14EC                                 l1351 16C2  
                               l1511 0E4E                                 l1503 0E1E  
                               l1441 166A                                 l1433 160C  
                               l1417 1526                                 l1409 14F4  
                               l1425 153C                                 l1361 16FC  
                               l1353 16CA                                 l1345 16A0  
                               l1601 10BC                                 l1513 0E76  
                               l1521 0E96                                 l1505 0E26  
                               l1451 168C                                 l1443 1674  
                               l1435 161C                                 l1427 154C  
                               l1419 152E                                 l1371 1728  
                               l1363 16FE                                 l1355 16D8  
                               l1347 16A8                                 l1339 1742  
                               l1603 10C4                                 l1531 0F10  
                               l1523 0EB4                                 l1515 0E7E  
                               l1507 0E26                                 l1611 13A0  
                               l1461 1260                                 l1453 168E  
                               l1445 1676                                 l1437 1642  
                               l1429 1554                                 l1365 1704  
                               l1357 16DE                                 l1349 16BA  
                               l1381 117C                                 l1373 10FE  
                               l1605 10D0                                 l1541 0F46  
                               l1533 0F18                                 l1525 0EC0  
                               l1517 0E86                                 l1509 0E42  
                               l1621 13C0                                 l1613 13AC  
                               l1471 12A6                                 l1463 126E  
                               l1455 1698                                 l1447 1680  
                               l1439 1646                                 l1551 15A8  
                               l1391 149E                                 l1367 1714  
                               l1359 16F4                                 l1383 11BA  
                               l1375 1118                                 l1607 10E6  
                               l1535 0F2E                                 l1543 0F52  
                               l1527 0ECE                                 l1519 0E92  
                               l1631 13DC                                 l1623 13C8  
                               l1615 13B0                                 l1481 12EC  
                               l1473 12BE                                 l1465 1286  
                               l1457 169A                                 l1449 1682  
                               l1561 1608                                 l1553 15AA  
                               l1393 14AC                                 l1369 1718  
                               l1385 11D4                                 l1377 1166  
                               l1545 0F68                                 l1537 0F36  
                               l1529 0EFA                                 l1641 13F8  
                               l1633 13E4                                 l1625 13D0  
                               l1617 13B4                                 l1609 13A0  
                               l1491 133A                                 l1483 1310  
                               l1475 12C0                                 l1467 1294  
                               l1459 169C                                 l1555 15C2  
                               l1547 156C                                 l1395 14B4  
                               l1387 1214                                 l1379 1178  
                               l1571 0FC0                                 l1563 0F82  
                               l1539 0F3E                                 l1651 1404  
                               l1643 13FA                                 l1635 13EC  
                               l1627 13D4                                 l1619 13B8  
                               l1493 1352                                 l1485 1312  
                               l1469 12A2                                 l1557 15D6  
                               l1549 1584                                 l1397 14B8  
                               l1389 149A                                 l1581 1010  
                               l1573 0FCC                                 l1565 0F9C  
                               l1661 1416                                 l1653 1406  
                               l1645 13FC                                 l1637 13F4  
                               l1629 13D8                                 l1495 137A  
                               l1487 132A                                 l1479 12D4  
                               l1559 15EE                                 l1399 14C6  
                               l1591 1078                                 l1575 0FF4  
                               l1583 1014                                 l1567 0FA4  
                               l1671 1444                                 l1663 141A  
                               l1655 140A                                 l1647 13FE  
                               l1639 13F6                                 l1497 137C  
                               l1489 132C                                 l1593 108E  
                               l1585 1032                                 l1577 0FFC  
                               l1569 0FA4                                 l1681 147C  
                               l1673 144C                                 l1665 141E  
                               l1657 140E                                 l1649 1402  
                               l1499 1394                                 l1595 1096  
                               l1587 103E                                 l1579 1004  
                               l1683 148E                                 l1675 145E  
                               l1667 142E                                 l1659 1412  
                               l1597 10AC                                 l1589 104C  
                               l1677 1466                                 l1669 1436  
                               l1599 10B4                                 l1679 1474  
                               u1007 12DE                                 u1017 131C  
                               u1027 1344                                 u1037 1386  
                               _T2PR 0FBC                                 _main 13A0  
                               _temp 0047                                 fsr1h 0FE2  
                               fsr2h 0FDA                                 indf1 0FE7  
                               indf2 0FDF                                 fsr1l 0FE1  
                               fsr2l 0FD9                                 prodh 0FF4  
                               prodl 0FF3                                 start 0000  
                       ___param_bank 0000                                ?_main 0027  
                    __end_of___awdiv 155E                      ___awdiv@divisor 0029  
                    __end_of___lwdiv 1714                      ___awdiv@counter 002B  
                              tablat 0FF5                                status 0FD8  
                 _switch_calibration 155E                      __initialization 1768  
                       __end_of_main 149A                  ?_switch_calibration 0027  
                             ??_main 0047                        __activetblptr 0000  
                       ?_setMotorPWM 0034                               _CCPR1H 0FAA  
                             _CCPR2H 0FA6                               _CCPR3H 0F25  
                             _CCPR4H 0F21                     ___awdiv@dividend 0027  
               ??_switch_calibration 0028                               _RE2PPS 0E74  
                             _RC7PPS 0E69                               _RE4PPS 0E76  
                             _RG6PPS 0E88                         _CCPTMRS0bits 0FAD  
                             ___wmul 1742                            ??___awdiv 002B  
                          ??___lwdiv 0031        delay_ms_function@milliseconds 0027  
                             clear_0 1780                     ___awdiv@quotient 002D  
                             _motorL 0018                               _motorR 000F  
                             isa$std 0001                         __pdataCOMRAM 0047  
                       __mediumconst 0000                               tblptrh 0FF7  
                             tblptrl 0FF6                               tblptru 0FF8  
                  ??_initDCmotorsPWM 0029                     __end_of_turnLEFT 10FE  
                         __accesstop 0060              __end_of__initialization 1786  
                      ___rparam_used 0001                       __pcstackCOMRAM 0027  
                       _T2CLKCONbits 0FBF                   _adjust_calibration 1252  
                            ?___wmul 0027                  ?_adjust_calibration 0027  
                  _delay_ms_function 1714                   ?_delay_ms_function 0027  
                ??_delay_ms_function 0029                 ??_adjust_calibration 0028  
       turnLEFT@rotation_calibration 003E                              __Hparam 0000  
                            __Lparam 0000                              ___awdiv 149A  
                            ___lwdiv 16A0                           _off_period 000B  
                       __psmallconst 0E00                            ?_turnLEFT 0039  
          __end_of_delay_ms_function 1742                              __pcinit 1768  
                            __ramtop 0E00                              __ptext0 13A0  
                            __ptext1 0E02                              __ptext2 0F80  
                            __ptext3 10FE                              __ptext4 1742  
                            __ptext5 16A0                              __ptext6 1714  
                            __ptext7 149A                              __ptext8 155E  
                            __ptext9 160C                            _T2CONbits 0FBD  
                          _T2HLTbits 0FBE                 end_of_initialization 1786  
                            postdec2 0FDD                              postinc0 0FEE  
                            postinc2 0FDE                           ??_turnLEFT 003B  
                  __end_of_turnRIGHT 0F80                      _initDCmotorsPWM 160C  
                 turnRIGHT@max_power 0043                            _PORTFbits 0F8E  
                 setMotorPWM@negDuty 0038                   setMotorPWM@posDuty 0037  
                          _TRISCbits 0F83                            _TRISDbits 0F84  
                          _TRISEbits 0F85                            _TRISFbits 0F86  
                          _TRISGbits 0F87                            _TRISHbits 0F88  
adjust_calibration@calibration_label 0027  switch_calibration@calibration_index 0027  
                        _CCP1CONbits 0FAB                          _CCP2CONbits 0FA7  
                        _CCP3CONbits 0F26                          _CCP4CONbits 0F22  
                     __end_of___wmul 1768                        __pidataCOMRAM 178C  
                start_initialization 1768                   turnLEFT@delay_time 0045  
            __end_of_initDCmotorsPWM 16A0                             ??___wmul 002B  
                        _calibration 0021                          __pbssCOMRAM 0001  
                   ___lwdiv@dividend 002D                          turnRIGHT@mL 0039  
                        turnRIGHT@mR 003A                             ?___awdiv 0027  
                           ?___lwdiv 002D                          __smallconst 0E00  
                      ??_setMotorPWM 0035                     ___lwdiv@quotient 0031  
           initDCmotorsPWM@PWMperiod 0027                       ___wmul@product 002B  
                           _LATCbits 0F7B                             _LATDbits 0F7C  
                           _LATEbits 0F7D                            _on_period 000D  
                           _LATGbits 0F7F                             _LATHbits 0F80  
                   ?_initDCmotorsPWM 0027                    ___wmul@multiplier 0027  
                       setMotorPWM@m 0034        turnRIGHT@rotation_calibration 003E  
                          _turnRIGHT 0E02                  __end_of_setMotorPWM 1252  
                           __Hrparam 0000                             __Lrparam 0000  
                         _ANSELFbits 0EB4                           turnLEFT@mL 0039  
                         turnLEFT@mR 003A                           ?_turnRIGHT 0039  
                    ___lwdiv@divisor 002F                           turnRIGHT@i 003F  
                         turnRIGHT@j 0041           __end_of_switch_calibration 160C  
                    ___lwdiv@counter 0033                             __ptext10 1252  
                  turnLEFT@max_power 0043                    _motor_adjustments 0001  
                           isa$xinst 0000                             _turnLEFT 0F80  
                turnRIGHT@delay_time 0045                          _setMotorPWM 10FE  
                          turnLEFT@i 003F                            turnLEFT@j 0041  
                        ??_turnRIGHT 003B  
