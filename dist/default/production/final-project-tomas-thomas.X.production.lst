

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 14 15:11:31 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34   000000                     
    35                           ; Generated 21/07/2023 GMT
    36                           ; 
    37                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F67K40 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69   000000                     
    70                           	psect	idataCOMRAM
    71   001A52                     __pidataCOMRAM:
    72                           	callstack 0
    73                           
    74                           ;initializer for _temp
    75   001A52  07                 	db	7
    76   000000                     _TX4REG	set	3812
    77   000000                     _RC4STAbits	set	3815
    78   000000                     _SP4BRGH	set	3814
    79   000000                     _LATEbits	set	3965
    80   000000                     _TRISEbits	set	3973
    81   000000                     _LATFbits	set	3966
    82   000000                     _LATGbits	set	3967
    83   000000                     _SSP2CON2bits	set	3802
    84   000000                     _RX4PPS	set	3605
    85   000000                     _SSP2CLKPPS	set	3612
    86   000000                     _SSP2DATPPS	set	3613
    87   000000                     _RC7PPS	set	3689
    88   000000                     _RE2PPS	set	3700
    89   000000                     _LATAbits	set	3961
    90   000000                     _LATDbits	set	3964
    91   000000                     _LATHbits	set	3968
    92   000000                     _PORTFbits	set	3982
    93   000000                     _T2PR	set	4028
    94   000000                     _T2CONbits	set	4029
    95   000000                     _CCPR2H	set	4006
    96   000000                     _CCPR1H	set	4010
    97   000000                     _TRISCbits	set	3971
    98   000000                     _TRISDbits	set	3972
    99   000000                     _TRISFbits	set	3974
   100   000000                     _TRISAbits	set	3969
   101   000000                     _TRISGbits	set	3975
   102   000000                     _TRISHbits	set	3976
   103   000000                     _LATCbits	set	3963
   104   000000                     _RE4PPS	set	3702
   105   000000                     _RG6PPS	set	3720
   106   000000                     _RD5PPS	set	3695
   107   000000                     _ANSELDbits	set	3751
   108   000000                     _SSP2ADD	set	3798
   109   000000                     _SSP2CON1bits	set	3801
   110   000000                     _CCPR4H	set	3873
   111   000000                     _CCPR3H	set	3877
   112   000000                     _T2CLKCONbits	set	4031
   113   000000                     _T2HLTbits	set	4030
   114   000000                     _CCP1CONbits	set	4011
   115   000000                     _CCPTMRS0bits	set	4013
   116   000000                     _CCP2CONbits	set	4007
   117   000000                     _CCP3CONbits	set	3878
   118   000000                     _CCP4CONbits	set	3874
   119   000000                     _RC4REG	set	3811
   120   000000                     _SP4BRGL	set	3813
   121   000000                     _TX4STAbits	set	3816
   122   000000                     _BAUD4CONbits	set	3817
   123   000000                     _SSP2CON2	set	3802
   124   000000                     _SSP2STAT	set	3800
   125   000000                     _ANSELFbits	set	3764
   126   000000                     _SSP2BUF	set	3797
   127   000000                     _PIE4bits	set	3629
   128   000000                     _PIR4bits	set	3639
   129   000000                     _RC0PPS	set	3682
   130   000000                     _RD6PPS	set	3696
   131                           
   132                           	psect	smallconst
   133   000E00                     __psmallconst:
   134                           	callstack 0
   135   000E00  00                 	db	0
   136   000E01  48                 	db	72	;'H'
   137   000E02  3A                 	db	58	;':'
   138   000E03  25                 	db	37
   139   000E04  2E                 	db	46
   140   000E05  32                 	db	50	;'2'
   141   000E06  66                 	db	102	;'f'
   142   000E07  20                 	db	32
   143   000E08  53                 	db	83	;'S'
   144   000E09  3A                 	db	58	;':'
   145   000E0A  20                 	db	32
   146   000E0B  25                 	db	37
   147   000E0C  2E                 	db	46
   148   000E0D  32                 	db	50	;'2'
   149   000E0E  66                 	db	102	;'f'
   150   000E0F  20                 	db	32
   151   000E10  56                 	db	86	;'V'
   152   000E11  3A                 	db	58	;':'
   153   000E12  20                 	db	32
   154   000E13  25                 	db	37
   155   000E14  2E                 	db	46
   156   000E15  32                 	db	50	;'2'
   157   000E16  66                 	db	102	;'f'
   158   000E17  20                 	db	32
   159   000E18  43                 	db	67	;'C'
   160   000E19  3A                 	db	58	;':'
   161   000E1A  25                 	db	37
   162   000E1B  75                 	db	117	;'u'
   163   000E1C  00                 	db	0
   164   000E1D  00                 	db	0	; dummy byte at the end
   165   000000                     
   166                           ; #config settings
   167                           
   168                           	psect	cinit
   169   001934                     __pcinit:
   170                           	callstack 0
   171   001934                     start_initialization:
   172                           	callstack 0
   173   001934                     __initialization:
   174                           	callstack 0
   175                           
   176                           ; Initialize objects allocated to COMRAM (1 bytes)
   177                           ; load TBLPTR registers with __pidataCOMRAM
   178   001934  0E52               	movlw	low __pidataCOMRAM
   179   001936  6EF6               	movwf	tblptrl,c
   180   001938  0E1A               	movlw	high __pidataCOMRAM
   181   00193A  6EF7               	movwf	tblptrh,c
   182   00193C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   183   00193E  6EF8               	movwf	tblptru,c
   184   001940  0009               	tblrd		*+	;fetch initializer
   185   001942  CFF5 F054          	movff	tablat,__pdataCOMRAM
   186                           
   187                           ; Clear objects allocated to BANK0 (60 bytes)
   188   001946  EE00  F060         	lfsr	0,__pbssBANK0
   189   00194A  0E3C               	movlw	60
   190   00194C                     clear_0:
   191   00194C  6AEE               	clrf	postinc0,c
   192   00194E  06E8               	decf	wreg,f,c
   193   001950  E1FD               	bnz	clear_0
   194                           
   195                           ; Clear objects allocated to COMRAM (51 bytes)
   196   001952  EE00  F001         	lfsr	0,__pbssCOMRAM
   197   001956  0E33               	movlw	51
   198   001958                     clear_1:
   199   001958  6AEE               	clrf	postinc0,c
   200   00195A  06E8               	decf	wreg,f,c
   201   00195C  E1FD               	bnz	clear_1
   202   00195E                     end_of_initialization:
   203                           	callstack 0
   204   00195E                     __end_of__initialization:
   205                           	callstack 0
   206   00195E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   207   001960  6EF8               	movwf	tblptru,c
   208   001962  0E0E               	movlw	high __Lsmallconst
   209   001964  6EF7               	movwf	tblptrh,c
   210   001966  0100               	movlb	0
   211   001968  EF9E  F00A         	goto	_main	;jump to C main() function
   212                           
   213                           	psect	bssCOMRAM
   214   000001                     __pbssCOMRAM:
   215                           	callstack 0
   216   000001                     _EUSART4RXbuf:
   217                           	callstack 0
   218   000001                     	ds	20
   219   000015                     _TxBufReadCnt:
   220                           	callstack 0
   221   000015                     	ds	1
   222   000016                     _TxBufWriteCnt:
   223                           	callstack 0
   224   000016                     	ds	1
   225   000017                     _RxBufReadCnt:
   226                           	callstack 0
   227   000017                     	ds	1
   228   000018                     _RxBufWriteCnt:
   229                           	callstack 0
   230   000018                     	ds	1
   231   000019                     _motorR:
   232                           	callstack 0
   233   000019                     	ds	9
   234   000022                     _motorL:
   235                           	callstack 0
   236   000022                     	ds	9
   237   00002B                     _calibration:
   238                           	callstack 0
   239   00002B                     	ds	9
   240                           
   241                           	psect	dataCOMRAM
   242   000054                     __pdataCOMRAM:
   243                           	callstack 0
   244   000054                     _temp:
   245                           	callstack 0
   246   000054                     	ds	1
   247                           
   248                           	psect	bssBANK0
   249   000060                     __pbssBANK0:
   250                           	callstack 0
   251   000060                     _EUSART4TXbuf:
   252                           	callstack 0
   253   000060                     	ds	60
   254                           
   255                           	psect	cstackCOMRAM
   256   000034                     __pcstackCOMRAM:
   257                           	callstack 0
   258   000034                     ??_I2C_2_Master_Idle:
   259   000034                     ?___wmul:
   260                           	callstack 0
   261   000034                     ?___awdiv:
   262                           	callstack 0
   263   000034                     adjust_calibration@calibration_label:
   264                           	callstack 0
   265   000034                     switch_calibration@calibration_index:
   266                           	callstack 0
   267   000034                     initDCmotorsPWM@PWMperiod:
   268                           	callstack 0
   269   000034                     delay_ms_function@milliseconds:
   270                           	callstack 0
   271   000034                     ___wmul@multiplier:
   272                           	callstack 0
   273   000034                     ___awdiv@dividend:
   274                           	callstack 0
   275                           
   276                           ; 2 bytes @ 0x0
   277   000034                     	ds	1
   278   000035                     ??_adjust_calibration:
   279   000035                     ??_switch_calibration:
   280   000035                     I2C_2_Master_Write@data_byte:
   281                           	callstack 0
   282                           
   283                           ; 1 bytes @ 0x1
   284   000035                     	ds	1
   285   000036                     ??_delay_ms_function:
   286   000036                     color_writetoaddr@value:
   287                           	callstack 0
   288   000036                     ___wmul@multiplicand:
   289                           	callstack 0
   290   000036                     ___awdiv@divisor:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x2
   294   000036                     	ds	1
   295   000037                     color_writetoaddr@address:
   296                           	callstack 0
   297                           
   298                           ; 1 bytes @ 0x3
   299   000037                     	ds	1
   300   000038                     ??_color_click_init:
   301   000038                     ___awdiv@counter:
   302                           	callstack 0
   303   000038                     ___wmul@product:
   304                           	callstack 0
   305                           
   306                           ; 2 bytes @ 0x4
   307   000038                     	ds	1
   308   000039                     ___awdiv@sign:
   309                           	callstack 0
   310                           
   311                           ; 1 bytes @ 0x5
   312   000039                     	ds	1
   313   00003A                     ?___lwdiv:
   314                           	callstack 0
   315   00003A                     ___awdiv@quotient:
   316                           	callstack 0
   317   00003A                     ___lwdiv@dividend:
   318                           	callstack 0
   319                           
   320                           ; 2 bytes @ 0x6
   321   00003A                     	ds	2
   322   00003C                     ___lwdiv@divisor:
   323                           	callstack 0
   324                           
   325                           ; 2 bytes @ 0x8
   326   00003C                     	ds	2
   327   00003E                     ___lwdiv@quotient:
   328                           	callstack 0
   329                           
   330                           ; 2 bytes @ 0xA
   331   00003E                     	ds	2
   332   000040                     ___lwdiv@counter:
   333                           	callstack 0
   334                           
   335                           ; 1 bytes @ 0xC
   336   000040                     	ds	1
   337   000041                     setMotorPWM@m:
   338                           	callstack 0
   339                           
   340                           ; 1 bytes @ 0xD
   341   000041                     	ds	1
   342   000042                     ??_setMotorPWM:
   343                           
   344                           ; 1 bytes @ 0xE
   345   000042                     	ds	2
   346   000044                     setMotorPWM@posDuty:
   347                           	callstack 0
   348                           
   349                           ; 1 bytes @ 0x10
   350   000044                     	ds	1
   351   000045                     setMotorPWM@negDuty:
   352                           	callstack 0
   353                           
   354                           ; 1 bytes @ 0x11
   355   000045                     	ds	1
   356   000046                     forward@mL:
   357                           	callstack 0
   358   000046                     turnLEFT@mL:
   359                           	callstack 0
   360   000046                     turnRIGHT@mL:
   361                           	callstack 0
   362                           
   363                           ; 1 bytes @ 0x12
   364   000046                     	ds	1
   365   000047                     forward@mR:
   366                           	callstack 0
   367   000047                     turnLEFT@mR:
   368                           	callstack 0
   369   000047                     turnRIGHT@mR:
   370                           	callstack 0
   371                           
   372                           ; 1 bytes @ 0x13
   373   000047                     	ds	1
   374   000048                     ??_forward:
   375   000048                     ??_turnLEFT:
   376   000048                     ??_turnRIGHT:
   377                           
   378                           ; 1 bytes @ 0x14
   379   000048                     	ds	3
   380   00004B                     forward@Distance_Calibration:
   381                           	callstack 0
   382   00004B                     turnLEFT@rotation_calibration:
   383                           	callstack 0
   384   00004B                     turnRIGHT@rotation_calibration:
   385                           	callstack 0
   386                           
   387                           ; 1 bytes @ 0x17
   388   00004B                     	ds	1
   389   00004C                     forward@i:
   390                           	callstack 0
   391   00004C                     turnLEFT@i:
   392                           	callstack 0
   393   00004C                     turnRIGHT@i:
   394                           	callstack 0
   395                           
   396                           ; 2 bytes @ 0x18
   397   00004C                     	ds	2
   398   00004E                     forward@j:
   399                           	callstack 0
   400   00004E                     turnLEFT@j:
   401                           	callstack 0
   402   00004E                     turnRIGHT@j:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0x1A
   406   00004E                     	ds	2
   407   000050                     forward@max_power:
   408                           	callstack 0
   409   000050                     turnLEFT@max_power:
   410                           	callstack 0
   411   000050                     turnRIGHT@max_power:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x1C
   415   000050                     	ds	2
   416   000052                     forward@delay_time:
   417                           	callstack 0
   418   000052                     turnLEFT@delay_time:
   419                           	callstack 0
   420   000052                     turnRIGHT@delay_time:
   421                           	callstack 0
   422                           
   423                           ; 2 bytes @ 0x1E
   424   000052                     	ds	2
   425   000054                     
   426                           ; 1 bytes @ 0x20
   427 ;;
   428 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   429 ;;
   430 ;; *************** function _main *****************
   431 ;; Defined at:
   432 ;;		line 17 in file "main.c"
   433 ;; Parameters:    Size  Location     Type
   434 ;;		None
   435 ;; Auto vars:     Size  Location     Type
   436 ;;  PWMperiod       2    0        unsigned int 
   437 ;; Return value:  Size  Location     Type
   438 ;;                  1    wreg      void 
   439 ;; Registers used:
   440 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   450 ;;Total ram usage:        0 bytes
   451 ;; Hardware stack levels required when called: 4
   452 ;; This function calls:
   453 ;;		_adjust_calibration
   454 ;;		_color_click_init
   455 ;;		_forward
   456 ;;		_initDCmotorsPWM
   457 ;;		_switch_calibration
   458 ;;		_turnLEFT
   459 ;;		_turnRIGHT
   460 ;; This function is called by:
   461 ;;		Startup code after reset
   462 ;; This function uses a non-reentrant model
   463 ;;
   464                           
   465                           	psect	text0
   466   00153C                     __ptext0:
   467                           	callstack 0
   468   00153C                     _main:
   469                           	callstack 27
   470   00153C                     
   471                           ;main.c: 19:     initDCmotorsPWM(PWMperiod);
   472   00153C  0E00               	movlw	0
   473   00153E  6E35               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   474   001540  0E63               	movlw	99
   475   001542  6E34               	movwf	initDCmotorsPWM@PWMperiod^0,c
   476   001544  ECF0  F00B         	call	_initDCmotorsPWM	;wreg free
   477   001548                     
   478                           ;main.c: 21:     color_click_init();
   479   001548  EC74  F00C         	call	_color_click_init	;wreg free
   480   00154C                     
   481                           ;main.c: 26:     motorL.power=0;
   482   00154C  0E00               	movlw	0
   483   00154E  6E22               	movwf	_motorL^0,c
   484   001550                     
   485                           ;main.c: 27:     motorL.direction=1;
   486   001550  0E01               	movlw	1
   487   001552  6E23               	movwf	(_motorL+1)^0,c
   488   001554                     
   489                           ;main.c: 28:     motorL.brakemode=1;
   490   001554  0E01               	movlw	1
   491   001556  6E24               	movwf	(_motorL+2)^0,c
   492   001558                     
   493                           ;main.c: 29:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   494   001558  0EAA               	movlw	170
   495   00155A  6E27               	movwf	(_motorL+5)^0,c
   496   00155C  0E0F               	movlw	15
   497   00155E  6E28               	movwf	(_motorL+6)^0,c
   498   001560                     
   499                           ;main.c: 30:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   500   001560  0EA6               	movlw	166
   501   001562  6E29               	movwf	(_motorL+7)^0,c
   502   001564  0E0F               	movlw	15
   503   001566  6E2A               	movwf	(_motorL+8)^0,c
   504   001568                     
   505                           ;main.c: 31:     motorL.PWMperiod=PWMperiod;
   506   001568  0E00               	movlw	0
   507   00156A  6E26               	movwf	(_motorL+4)^0,c
   508   00156C  0E63               	movlw	99
   509   00156E  6E25               	movwf	(_motorL+3)^0,c
   510   001570                     
   511                           ;main.c: 33:     motorR.power=0;
   512   001570  0E00               	movlw	0
   513   001572  6E19               	movwf	_motorR^0,c
   514   001574                     
   515                           ;main.c: 34:     motorR.direction=1;
   516   001574  0E01               	movlw	1
   517   001576  6E1A               	movwf	(_motorR+1)^0,c
   518   001578                     
   519                           ;main.c: 35:     motorR.brakemode=1;
   520   001578  0E01               	movlw	1
   521   00157A  6E1B               	movwf	(_motorR+2)^0,c
   522                           
   523                           ;main.c: 36:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   524   00157C  0E25               	movlw	37
   525   00157E  6E1E               	movwf	(_motorR+5)^0,c
   526   001580  0E0F               	movlw	15
   527   001582  6E1F               	movwf	(_motorR+6)^0,c
   528                           
   529                           ;main.c: 37:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   530   001584  0E21               	movlw	33
   531   001586  6E20               	movwf	(_motorR+7)^0,c
   532   001588  0E0F               	movlw	15
   533   00158A  6E21               	movwf	(_motorR+8)^0,c
   534   00158C                     
   535                           ;main.c: 38:     motorR.PWMperiod=PWMperiod;
   536   00158C  0E00               	movlw	0
   537   00158E  6E1D               	movwf	(_motorR+4)^0,c
   538   001590  0E63               	movlw	99
   539   001592  6E1C               	movwf	(_motorR+3)^0,c
   540   001594                     
   541                           ;main.c: 44:     TRISDbits.TRISD7 = 0;
   542   001594  9E84               	bcf	132,7,c	;volatile
   543   001596                     
   544                           ;main.c: 45:     LATDbits.LATD7 = 0;
   545   001596  9E7C               	bcf	124,7,c	;volatile
   546   001598                     
   547                           ;main.c: 48:     TRISHbits.TRISH3 = 0;
   548   001598  9688               	bcf	136,3,c	;volatile
   549   00159A                     
   550                           ;main.c: 49:     LATHbits.LATH3 = 0;
   551   00159A  9680               	bcf	128,3,c	;volatile
   552   00159C                     
   553                           ;main.c: 52:     TRISFbits.TRISF2=1;
   554   00159C  8486               	bsf	134,2,c	;volatile
   555   00159E                     
   556                           ;main.c: 53:     ANSELFbits.ANSELF2=0;
   557   00159E  010E               	movlb	14	; () banked
   558   0015A0  95B4               	bcf	180,2,b	;volatile
   559   0015A2                     
   560                           ; BSR set to: 14
   561                           ;main.c: 56:     TRISFbits.TRISF3=1;
   562   0015A2  8686               	bsf	134,3,c	;volatile
   563   0015A4                     
   564                           ; BSR set to: 14
   565                           ;main.c: 57:     ANSELFbits.ANSELF3=0;
   566   0015A4  97B4               	bcf	180,3,b	;volatile
   567   0015A6                     
   568                           ; BSR set to: 14
   569                           ;main.c: 61:     calibration.index = 1;
   570   0015A6  0E01               	movlw	1
   571   0015A8  6E2B               	movwf	_calibration^0,c
   572   0015AA                     
   573                           ; BSR set to: 14
   574                           ;main.c: 62:     calibration.over = 0;
   575   0015AA  0E00               	movlw	0
   576   0015AC  6E2C               	movwf	(_calibration+1)^0,c
   577   0015AE                     
   578                           ; BSR set to: 14
   579                           ;main.c: 68:     calibration.left_90 = 60;
   580   0015AE  0E3C               	movlw	60
   581   0015B0  6E2D               	movwf	(_calibration+2)^0,c
   582   0015B2                     
   583                           ; BSR set to: 14
   584                           ;main.c: 69:     calibration.right_90 = 10;
   585   0015B2  0E0A               	movlw	10
   586   0015B4  6E2E               	movwf	(_calibration+3)^0,c
   587   0015B6                     
   588                           ; BSR set to: 14
   589                           ;main.c: 70:     calibration.left_135 = 60;
   590   0015B6  0E3C               	movlw	60
   591   0015B8  6E2F               	movwf	(_calibration+4)^0,c
   592   0015BA                     
   593                           ; BSR set to: 14
   594                           ;main.c: 71:     calibration.right_135 = 10;
   595   0015BA  0E0A               	movlw	10
   596   0015BC  6E30               	movwf	(_calibration+5)^0,c
   597   0015BE                     
   598                           ; BSR set to: 14
   599                           ;main.c: 72:     calibration.forward = 10;
   600   0015BE  0E0A               	movlw	10
   601   0015C0  6E31               	movwf	(_calibration+6)^0,c
   602   0015C2                     
   603                           ; BSR set to: 14
   604                           ;main.c: 73:     calibration.forward_motorL = 20;
   605   0015C2  0E14               	movlw	20
   606   0015C4  6E32               	movwf	(_calibration+7)^0,c
   607   0015C6                     
   608                           ; BSR set to: 14
   609                           ;main.c: 74:     calibration.forward_motorR = 20;
   610   0015C6  0E14               	movlw	20
   611   0015C8  6E33               	movwf	(_calibration+8)^0,c
   612   0015CA                     l2399:
   613                           
   614                           ;main.c: 85:         if(calibration.index == 1){
   615   0015CA  042B               	decf	_calibration^0,w,c
   616   0015CC  A4D8               	btfss	status,2,c
   617   0015CE  EFEB  F00A         	goto	u1611
   618   0015D2  EFED  F00A         	goto	u1610
   619   0015D6                     u1611:
   620   0015D6  EFFC  F00A         	goto	l2407
   621   0015DA                     u1610:
   622   0015DA                     
   623                           ;main.c: 86:             adjust_calibration(&calibration.right_90);
   624   0015DA  0E2E               	movlw	low (_calibration+3)
   625   0015DC  6E34               	movwf	adjust_calibration@calibration_label^0,c
   626   0015DE  ECF7  F009         	call	_adjust_calibration	;wreg free
   627   0015E2                     
   628                           ;main.c: 87:             turnRIGHT(calibration.right_90, &motorL, &motorR);
   629   0015E2  0E22               	movlw	low _motorL
   630   0015E4  6E46               	movwf	turnRIGHT@mL^0,c
   631   0015E6  0E19               	movlw	low _motorR
   632   0015E8  6E47               	movwf	turnRIGHT@mR^0,c
   633   0015EA  502E               	movf	(_calibration+3)^0,w,c
   634   0015EC  ECCF  F007         	call	_turnRIGHT
   635   0015F0                     
   636                           ;main.c: 88:             switch_calibration(&calibration.index);
   637   0015F0  0E2B               	movlw	low _calibration
   638   0015F2  6E34               	movwf	switch_calibration@calibration_index^0,c
   639   0015F4  EC99  F00B         	call	_switch_calibration	;wreg free
   640   0015F8                     l2407:
   641                           
   642                           ;main.c: 92:         if(calibration.index == 2){
   643   0015F8  0E02               	movlw	2
   644   0015FA  182B               	xorwf	_calibration^0,w,c
   645   0015FC  A4D8               	btfss	status,2,c
   646   0015FE  EF03  F00B         	goto	u1621
   647   001602  EF05  F00B         	goto	u1620
   648   001606                     u1621:
   649   001606  EF14  F00B         	goto	l2415
   650   00160A                     u1620:
   651   00160A                     
   652                           ;main.c: 93:             adjust_calibration(&calibration.left_90);
   653   00160A  0E2D               	movlw	low (_calibration+2)
   654   00160C  6E34               	movwf	adjust_calibration@calibration_label^0,c
   655   00160E  ECF7  F009         	call	_adjust_calibration	;wreg free
   656   001612                     
   657                           ;main.c: 94:             turnLEFT(calibration.left_90, &motorL, &motorR);
   658   001612  0E22               	movlw	low _motorL
   659   001614  6E46               	movwf	turnLEFT@mL^0,c
   660   001616  0E19               	movlw	low _motorR
   661   001618  6E47               	movwf	turnLEFT@mR^0,c
   662   00161A  502D               	movf	(_calibration+2)^0,w,c
   663   00161C  EC8E  F008         	call	_turnLEFT
   664   001620                     
   665                           ;main.c: 95:             switch_calibration(&calibration.index);
   666   001620  0E2B               	movlw	low _calibration
   667   001622  6E34               	movwf	switch_calibration@calibration_index^0,c
   668   001624  EC99  F00B         	call	_switch_calibration	;wreg free
   669   001628                     l2415:
   670                           
   671                           ;main.c: 99:         if(calibration.index == 3){
   672   001628  0E03               	movlw	3
   673   00162A  182B               	xorwf	_calibration^0,w,c
   674   00162C  A4D8               	btfss	status,2,c
   675   00162E  EF1B  F00B         	goto	u1631
   676   001632  EF1D  F00B         	goto	u1630
   677   001636                     u1631:
   678   001636  EF2C  F00B         	goto	l2423
   679   00163A                     u1630:
   680   00163A                     
   681                           ;main.c: 100:             adjust_calibration(&calibration.forward);
   682   00163A  0E31               	movlw	low (_calibration+6)
   683   00163C  6E34               	movwf	adjust_calibration@calibration_label^0,c
   684   00163E  ECF7  F009         	call	_adjust_calibration	;wreg free
   685   001642                     
   686                           ;main.c: 101:             forward(calibration.forward, &motorL, &motorR);
   687   001642  0E22               	movlw	low _motorL
   688   001644  6E46               	movwf	forward@mL^0,c
   689   001646  0E19               	movlw	low _motorR
   690   001648  6E47               	movwf	forward@mR^0,c
   691   00164A  5031               	movf	(_calibration+6)^0,w,c
   692   00164C  EC0F  F007         	call	_forward
   693   001650                     
   694                           ;main.c: 102:             switch_calibration(&calibration.index);
   695   001650  0E2B               	movlw	low _calibration
   696   001652  6E34               	movwf	switch_calibration@calibration_index^0,c
   697   001654  EC99  F00B         	call	_switch_calibration	;wreg free
   698   001658                     l2423:
   699                           
   700                           ;main.c: 110:         if(calibration.index == 4){
   701   001658  0E04               	movlw	4
   702   00165A  182B               	xorwf	_calibration^0,w,c
   703   00165C  A4D8               	btfss	status,2,c
   704   00165E  EF33  F00B         	goto	u1641
   705   001662  EF35  F00B         	goto	u1640
   706   001666                     u1641:
   707   001666  EFE5  F00A         	goto	l2399
   708   00166A                     u1640:
   709   00166A  EF00  F000         	goto	start
   710   00166E                     __end_of_main:
   711                           	callstack 0
   712                           
   713 ;; *************** function _turnRIGHT *****************
   714 ;; Defined at:
   715 ;;		line 206 in file "dc_motor_v1.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;  rotation_cal    1    wreg     unsigned char 
   718 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   719 ;;		 -> motorL(9), 
   720 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   721 ;;		 -> motorR(9), 
   722 ;; Auto vars:     Size  Location     Type
   723 ;;  rotation_cal    1   23[COMRAM] unsigned char 
   724 ;;  j               2   26[COMRAM] int 
   725 ;;  i               2   24[COMRAM] int 
   726 ;;  delay_time      2   30[COMRAM] int 
   727 ;;  max_power       2   28[COMRAM] int 
   728 ;;  acceleration    2    0        int 
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   738 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   739 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   740 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   741 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   742 ;;Total ram usage:       14 bytes
   743 ;; Hardware stack levels used: 1
   744 ;; Hardware stack levels required when called: 2
   745 ;; This function calls:
   746 ;;		___awdiv
   747 ;;		_delay_ms_function
   748 ;;		_setMotorPWM
   749 ;; This function is called by:
   750 ;;		_main
   751 ;; This function uses a non-reentrant model
   752 ;;
   753                           
   754                           	psect	text1
   755   000F9E                     __ptext1:
   756                           	callstack 0
   757   000F9E                     _turnRIGHT:
   758                           	callstack 28
   759                           
   760                           ;incstack = 0
   761                           ;turnRIGHT@rotation_calibration stored from wreg
   762   000F9E  6E4B               	movwf	turnRIGHT@rotation_calibration^0,c
   763   000FA0                     
   764                           ;dc_motor_v1.c: 207:     mL->direction = 1;
   765   000FA0  5046               	movf	turnRIGHT@mL^0,w,c
   766   000FA2  6ED9               	movwf	fsr2l,c
   767   000FA4  6ADA               	clrf	fsr2h,c
   768   000FA6  0E01               	movlw	1
   769   000FA8  26D9               	addwf	fsr2l,f,c
   770   000FAA  0E01               	movlw	1
   771   000FAC  6EDF               	movwf	indf2,c
   772                           
   773                           ;dc_motor_v1.c: 208:     mR->direction = 0;
   774   000FAE  5047               	movf	turnRIGHT@mR^0,w,c
   775   000FB0  6ED9               	movwf	fsr2l,c
   776   000FB2  6ADA               	clrf	fsr2h,c
   777   000FB4  0E01               	movlw	1
   778   000FB6  26D9               	addwf	fsr2l,f,c
   779   000FB8  6ADF               	clrf	indf2,c
   780   000FBA                     
   781                           ;dc_motor_v1.c: 210:    int max_power = 20;
   782   000FBA  0E00               	movlw	0
   783   000FBC  6E51               	movwf	(turnRIGHT@max_power+1)^0,c
   784   000FBE  0E14               	movlw	20
   785   000FC0  6E50               	movwf	turnRIGHT@max_power^0,c
   786   000FC2                     
   787                           ;dc_motor_v1.c: 212:     int delay_time = acceleration_time/max_power;
   788   000FC2  0E00               	movlw	0
   789   000FC4  6E35               	movwf	(___awdiv@dividend+1)^0,c
   790   000FC6  0E64               	movlw	100
   791   000FC8  6E34               	movwf	___awdiv@dividend^0,c
   792   000FCA  0E00               	movlw	0
   793   000FCC  6E37               	movwf	(___awdiv@divisor+1)^0,c
   794   000FCE  0E14               	movlw	20
   795   000FD0  6E36               	movwf	___awdiv@divisor^0,c
   796   000FD2  EC37  F00B         	call	___awdiv	;wreg free
   797   000FD6  C034  F052         	movff	?___awdiv,turnRIGHT@delay_time
   798   000FDA  C035  F053         	movff	?___awdiv+1,turnRIGHT@delay_time+1
   799   000FDE                     
   800                           ;dc_motor_v1.c: 215:     for(int i=0; i< max_power; i++){
   801   000FDE  0E00               	movlw	0
   802   000FE0  6E4D               	movwf	(turnRIGHT@i+1)^0,c
   803   000FE2  0E00               	movlw	0
   804   000FE4  6E4C               	movwf	turnRIGHT@i^0,c
   805   000FE6  EF19  F008         	goto	l2293
   806   000FEA                     l2283:
   807                           
   808                           ;dc_motor_v1.c: 216:         mL->power = mL->power + 1;
   809   000FEA  5046               	movf	turnRIGHT@mL^0,w,c
   810   000FEC  6ED9               	movwf	fsr2l,c
   811   000FEE  6ADA               	clrf	fsr2h,c
   812   000FF0  5046               	movf	turnRIGHT@mL^0,w,c
   813   000FF2  6EE1               	movwf	fsr1l,c
   814   000FF4  6AE2               	clrf	fsr1h,c
   815   000FF6  50E7               	movf	indf1,w,c
   816   000FF8  6E48               	movwf	??_turnRIGHT^0,c
   817   000FFA  2848               	incf	??_turnRIGHT^0,w,c
   818   000FFC  6EDF               	movwf	indf2,c
   819                           
   820                           ;dc_motor_v1.c: 217:         mR->power = mR->power + 1 ;
   821   000FFE  5047               	movf	turnRIGHT@mR^0,w,c
   822   001000  6ED9               	movwf	fsr2l,c
   823   001002  6ADA               	clrf	fsr2h,c
   824   001004  5047               	movf	turnRIGHT@mR^0,w,c
   825   001006  6EE1               	movwf	fsr1l,c
   826   001008  6AE2               	clrf	fsr1h,c
   827   00100A  50E7               	movf	indf1,w,c
   828   00100C  6E48               	movwf	??_turnRIGHT^0,c
   829   00100E  2848               	incf	??_turnRIGHT^0,w,c
   830   001010  6EDF               	movwf	indf2,c
   831   001012                     
   832                           ;dc_motor_v1.c: 218:         setMotorPWM(mR);
   833   001012  C047  F041         	movff	turnRIGHT@mR,setMotorPWM@m
   834   001016  EC4D  F009         	call	_setMotorPWM	;wreg free
   835   00101A                     
   836                           ;dc_motor_v1.c: 219:         setMotorPWM(mL);
   837   00101A  C046  F041         	movff	turnRIGHT@mL,setMotorPWM@m
   838   00101E  EC4D  F009         	call	_setMotorPWM	;wreg free
   839   001022                     
   840                           ;dc_motor_v1.c: 220:         delay_ms_function(delay_time);
   841   001022  C052  F034         	movff	turnRIGHT@delay_time,delay_ms_function@milliseconds
   842   001026  C053  F035         	movff	turnRIGHT@delay_time+1,delay_ms_function@milliseconds+1
   843   00102A  ECB6  F00C         	call	_delay_ms_function	;wreg free
   844   00102E                     
   845                           ;dc_motor_v1.c: 221:     }
   846   00102E  4A4C               	infsnz	turnRIGHT@i^0,f,c
   847   001030  2A4D               	incf	(turnRIGHT@i+1)^0,f,c
   848   001032                     l2293:
   849   001032  5050               	movf	turnRIGHT@max_power^0,w,c
   850   001034  5C4C               	subwf	turnRIGHT@i^0,w,c
   851   001036  504D               	movf	(turnRIGHT@i+1)^0,w,c
   852   001038  0A80               	xorlw	128
   853   00103A  6E48               	movwf	??_turnRIGHT^0,c
   854   00103C  5051               	movf	(turnRIGHT@max_power+1)^0,w,c
   855   00103E  0A80               	xorlw	128
   856   001040  5848               	subwfb	??_turnRIGHT^0,w,c
   857   001042  A0D8               	btfss	status,0,c
   858   001044  EF26  F008         	goto	u1511
   859   001048  EF28  F008         	goto	u1510
   860   00104C                     u1511:
   861   00104C  EFF5  F007         	goto	l2283
   862   001050                     u1510:
   863   001050                     
   864                           ;dc_motor_v1.c: 224:     for(int j=0; j<rotation_calibration; j++){
   865   001050  0E00               	movlw	0
   866   001052  6E4F               	movwf	(turnRIGHT@j+1)^0,c
   867   001054  0E00               	movlw	0
   868   001056  6E4E               	movwf	turnRIGHT@j^0,c
   869   001058  EF37  F008         	goto	l282
   870   00105C                     l2297:
   871                           
   872                           ;dc_motor_v1.c: 225:         _delay((unsigned long)((10)*(64000000/4000.0)));
   873   00105C  0ED0               	movlw	208
   874   00105E  6E48               	movwf	??_turnRIGHT^0,c
   875   001060  0ECA               	movlw	202
   876   001062                     u1677:
   877   001062  2EE8               	decfsz	wreg,f,c
   878   001064  D7FE               	bra	u1677
   879   001066  2E48               	decfsz	??_turnRIGHT^0,f,c
   880   001068  D7FC               	bra	u1677
   881   00106A                     
   882                           ;dc_motor_v1.c: 226:     }
   883   00106A  4A4E               	infsnz	turnRIGHT@j^0,f,c
   884   00106C  2A4F               	incf	(turnRIGHT@j+1)^0,f,c
   885   00106E                     l282:
   886   00106E  504B               	movf	turnRIGHT@rotation_calibration^0,w,c
   887   001070  6E48               	movwf	??_turnRIGHT^0,c
   888   001072  6A49               	clrf	(??_turnRIGHT+1)^0,c
   889   001074  5048               	movf	??_turnRIGHT^0,w,c
   890   001076  5C4E               	subwf	turnRIGHT@j^0,w,c
   891   001078  504F               	movf	(turnRIGHT@j+1)^0,w,c
   892   00107A  0A80               	xorlw	128
   893   00107C  6E4A               	movwf	(??_turnRIGHT+2)^0,c
   894   00107E  5049               	movf	(??_turnRIGHT+1)^0,w,c
   895   001080  0A80               	xorlw	128
   896   001082  584A               	subwfb	(??_turnRIGHT+2)^0,w,c
   897   001084  A0D8               	btfss	status,0,c
   898   001086  EF47  F008         	goto	u1521
   899   00108A  EF49  F008         	goto	u1520
   900   00108E                     u1521:
   901   00108E  EF2E  F008         	goto	l2297
   902   001092                     u1520:
   903   001092  EF77  F008         	goto	l2315
   904   001096                     l2301:
   905                           
   906                           ;dc_motor_v1.c: 230:         if(mR->power> 0 ){
   907   001096  5047               	movf	turnRIGHT@mR^0,w,c
   908   001098  6ED9               	movwf	fsr2l,c
   909   00109A  6ADA               	clrf	fsr2h,c
   910   00109C  50DF               	movf	indf2,w,c
   911   00109E  B4D8               	btfsc	status,2,c
   912   0010A0  EF54  F008         	goto	u1531
   913   0010A4  EF56  F008         	goto	u1530
   914   0010A8                     u1531:
   915   0010A8  EF5A  F008         	goto	l2305
   916   0010AC                     u1530:
   917   0010AC                     
   918                           ;dc_motor_v1.c: 231:             mR->power--;
   919   0010AC  5047               	movf	turnRIGHT@mR^0,w,c
   920   0010AE  6ED9               	movwf	fsr2l,c
   921   0010B0  6ADA               	clrf	fsr2h,c
   922   0010B2  06DF               	decf	indf2,f,c
   923   0010B4                     l2305:
   924                           
   925                           ;dc_motor_v1.c: 233:         if(mL->power> 0 ){
   926   0010B4  5046               	movf	turnRIGHT@mL^0,w,c
   927   0010B6  6ED9               	movwf	fsr2l,c
   928   0010B8  6ADA               	clrf	fsr2h,c
   929   0010BA  50DF               	movf	indf2,w,c
   930   0010BC  B4D8               	btfsc	status,2,c
   931   0010BE  EF63  F008         	goto	u1541
   932   0010C2  EF65  F008         	goto	u1540
   933   0010C6                     u1541:
   934   0010C6  EF69  F008         	goto	l2309
   935   0010CA                     u1540:
   936   0010CA                     
   937                           ;dc_motor_v1.c: 234:             mL->power--;
   938   0010CA  5046               	movf	turnRIGHT@mL^0,w,c
   939   0010CC  6ED9               	movwf	fsr2l,c
   940   0010CE  6ADA               	clrf	fsr2h,c
   941   0010D0  06DF               	decf	indf2,f,c
   942   0010D2                     l2309:
   943                           
   944                           ;dc_motor_v1.c: 236:         setMotorPWM(mR);
   945   0010D2  C047  F041         	movff	turnRIGHT@mR,setMotorPWM@m
   946   0010D6  EC4D  F009         	call	_setMotorPWM	;wreg free
   947   0010DA                     
   948                           ;dc_motor_v1.c: 237:         setMotorPWM(mL);
   949   0010DA  C046  F041         	movff	turnRIGHT@mL,setMotorPWM@m
   950   0010DE  EC4D  F009         	call	_setMotorPWM	;wreg free
   951   0010E2                     
   952                           ;dc_motor_v1.c: 238:         delay_ms_function(delay_time);
   953   0010E2  C052  F034         	movff	turnRIGHT@delay_time,delay_ms_function@milliseconds
   954   0010E6  C053  F035         	movff	turnRIGHT@delay_time+1,delay_ms_function@milliseconds+1
   955   0010EA  ECB6  F00C         	call	_delay_ms_function	;wreg free
   956   0010EE                     l2315:
   957                           
   958                           ;dc_motor_v1.c: 229:     while(mL->power || mR->power > 0){
   959   0010EE  5046               	movf	turnRIGHT@mL^0,w,c
   960   0010F0  6ED9               	movwf	fsr2l,c
   961   0010F2  6ADA               	clrf	fsr2h,c
   962   0010F4  50DF               	movf	indf2,w,c
   963   0010F6  A4D8               	btfss	status,2,c
   964   0010F8  EF80  F008         	goto	u1551
   965   0010FC  EF82  F008         	goto	u1550
   966   001100                     u1551:
   967   001100  EF4B  F008         	goto	l2301
   968   001104                     u1550:
   969   001104  5047               	movf	turnRIGHT@mR^0,w,c
   970   001106  6ED9               	movwf	fsr2l,c
   971   001108  6ADA               	clrf	fsr2h,c
   972   00110A  50DF               	movf	indf2,w,c
   973   00110C  A4D8               	btfss	status,2,c
   974   00110E  EF8B  F008         	goto	u1561
   975   001112  EF8D  F008         	goto	u1560
   976   001116                     u1561:
   977   001116  EF4B  F008         	goto	l2301
   978   00111A                     u1560:
   979   00111A  0012               	return		;funcret
   980   00111C                     __end_of_turnRIGHT:
   981                           	callstack 0
   982                           
   983 ;; *************** function _turnLEFT *****************
   984 ;; Defined at:
   985 ;;		line 168 in file "dc_motor_v1.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;  rotation_cal    1    wreg     unsigned char 
   988 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   989 ;;		 -> motorL(9), 
   990 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   991 ;;		 -> motorR(9), 
   992 ;; Auto vars:     Size  Location     Type
   993 ;;  rotation_cal    1   23[COMRAM] unsigned char 
   994 ;;  j               2   26[COMRAM] int 
   995 ;;  i               2   24[COMRAM] int 
   996 ;;  delay_time      2   30[COMRAM] int 
   997 ;;  max_power       2   28[COMRAM] int 
   998 ;;  acceleration    2    0        int 
   999 ;; Return value:  Size  Location     Type
  1000 ;;                  1    wreg      void 
  1001 ;; Registers used:
  1002 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1003 ;; Tracked objects:
  1004 ;;		On entry : 0/0
  1005 ;;		On exit  : 0/0
  1006 ;;		Unchanged: 0/0
  1007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1008 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1009 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1010 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1011 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1012 ;;Total ram usage:       14 bytes
  1013 ;; Hardware stack levels used: 1
  1014 ;; Hardware stack levels required when called: 2
  1015 ;; This function calls:
  1016 ;;		___awdiv
  1017 ;;		_delay_ms_function
  1018 ;;		_setMotorPWM
  1019 ;; This function is called by:
  1020 ;;		_main
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           	psect	text2
  1025   00111C                     __ptext2:
  1026                           	callstack 0
  1027   00111C                     _turnLEFT:
  1028                           	callstack 28
  1029                           
  1030                           ;incstack = 0
  1031                           ;turnLEFT@rotation_calibration stored from wreg
  1032   00111C  6E4B               	movwf	turnLEFT@rotation_calibration^0,c
  1033   00111E                     
  1034                           ;dc_motor_v1.c: 169:     mL->direction = 0;
  1035   00111E  5046               	movf	turnLEFT@mL^0,w,c
  1036   001120  6ED9               	movwf	fsr2l,c
  1037   001122  6ADA               	clrf	fsr2h,c
  1038   001124  0E01               	movlw	1
  1039   001126  26D9               	addwf	fsr2l,f,c
  1040   001128  6ADF               	clrf	indf2,c
  1041                           
  1042                           ;dc_motor_v1.c: 170:     mR->direction = 1;
  1043   00112A  5047               	movf	turnLEFT@mR^0,w,c
  1044   00112C  6ED9               	movwf	fsr2l,c
  1045   00112E  6ADA               	clrf	fsr2h,c
  1046   001130  0E01               	movlw	1
  1047   001132  26D9               	addwf	fsr2l,f,c
  1048   001134  0E01               	movlw	1
  1049   001136  6EDF               	movwf	indf2,c
  1050   001138                     
  1051                           ;dc_motor_v1.c: 172:     int max_power = 20;
  1052   001138  0E00               	movlw	0
  1053   00113A  6E51               	movwf	(turnLEFT@max_power+1)^0,c
  1054   00113C  0E14               	movlw	20
  1055   00113E  6E50               	movwf	turnLEFT@max_power^0,c
  1056   001140                     
  1057                           ;dc_motor_v1.c: 174:     int delay_time = acceleration_time/max_power;
  1058   001140  0E00               	movlw	0
  1059   001142  6E35               	movwf	(___awdiv@dividend+1)^0,c
  1060   001144  0E64               	movlw	100
  1061   001146  6E34               	movwf	___awdiv@dividend^0,c
  1062   001148  0E00               	movlw	0
  1063   00114A  6E37               	movwf	(___awdiv@divisor+1)^0,c
  1064   00114C  0E14               	movlw	20
  1065   00114E  6E36               	movwf	___awdiv@divisor^0,c
  1066   001150  EC37  F00B         	call	___awdiv	;wreg free
  1067   001154  C034  F052         	movff	?___awdiv,turnLEFT@delay_time
  1068   001158  C035  F053         	movff	?___awdiv+1,turnLEFT@delay_time+1
  1069   00115C                     
  1070                           ;dc_motor_v1.c: 177:     for(int i=0; i< max_power; i++){
  1071   00115C  0E00               	movlw	0
  1072   00115E  6E4D               	movwf	(turnLEFT@i+1)^0,c
  1073   001160  0E00               	movlw	0
  1074   001162  6E4C               	movwf	turnLEFT@i^0,c
  1075   001164  EFD8  F008         	goto	l2247
  1076   001168                     l2237:
  1077                           
  1078                           ;dc_motor_v1.c: 178:         mL->power = mL->power + 1;
  1079   001168  5046               	movf	turnLEFT@mL^0,w,c
  1080   00116A  6ED9               	movwf	fsr2l,c
  1081   00116C  6ADA               	clrf	fsr2h,c
  1082   00116E  5046               	movf	turnLEFT@mL^0,w,c
  1083   001170  6EE1               	movwf	fsr1l,c
  1084   001172  6AE2               	clrf	fsr1h,c
  1085   001174  50E7               	movf	indf1,w,c
  1086   001176  6E48               	movwf	??_turnLEFT^0,c
  1087   001178  2848               	incf	??_turnLEFT^0,w,c
  1088   00117A  6EDF               	movwf	indf2,c
  1089                           
  1090                           ;dc_motor_v1.c: 179:         mR->power = mR->power + 1 ;
  1091   00117C  5047               	movf	turnLEFT@mR^0,w,c
  1092   00117E  6ED9               	movwf	fsr2l,c
  1093   001180  6ADA               	clrf	fsr2h,c
  1094   001182  5047               	movf	turnLEFT@mR^0,w,c
  1095   001184  6EE1               	movwf	fsr1l,c
  1096   001186  6AE2               	clrf	fsr1h,c
  1097   001188  50E7               	movf	indf1,w,c
  1098   00118A  6E48               	movwf	??_turnLEFT^0,c
  1099   00118C  2848               	incf	??_turnLEFT^0,w,c
  1100   00118E  6EDF               	movwf	indf2,c
  1101   001190                     
  1102                           ;dc_motor_v1.c: 180:         setMotorPWM(mR);
  1103   001190  C047  F041         	movff	turnLEFT@mR,setMotorPWM@m
  1104   001194  EC4D  F009         	call	_setMotorPWM	;wreg free
  1105   001198                     
  1106                           ;dc_motor_v1.c: 181:         setMotorPWM(mL);
  1107   001198  C046  F041         	movff	turnLEFT@mL,setMotorPWM@m
  1108   00119C  EC4D  F009         	call	_setMotorPWM	;wreg free
  1109   0011A0                     
  1110                           ;dc_motor_v1.c: 182:         delay_ms_function(delay_time);
  1111   0011A0  C052  F034         	movff	turnLEFT@delay_time,delay_ms_function@milliseconds
  1112   0011A4  C053  F035         	movff	turnLEFT@delay_time+1,delay_ms_function@milliseconds+1
  1113   0011A8  ECB6  F00C         	call	_delay_ms_function	;wreg free
  1114   0011AC                     
  1115                           ;dc_motor_v1.c: 183:     }
  1116   0011AC  4A4C               	infsnz	turnLEFT@i^0,f,c
  1117   0011AE  2A4D               	incf	(turnLEFT@i+1)^0,f,c
  1118   0011B0                     l2247:
  1119   0011B0  5050               	movf	turnLEFT@max_power^0,w,c
  1120   0011B2  5C4C               	subwf	turnLEFT@i^0,w,c
  1121   0011B4  504D               	movf	(turnLEFT@i+1)^0,w,c
  1122   0011B6  0A80               	xorlw	128
  1123   0011B8  6E48               	movwf	??_turnLEFT^0,c
  1124   0011BA  5051               	movf	(turnLEFT@max_power+1)^0,w,c
  1125   0011BC  0A80               	xorlw	128
  1126   0011BE  5848               	subwfb	??_turnLEFT^0,w,c
  1127   0011C0  A0D8               	btfss	status,0,c
  1128   0011C2  EFE5  F008         	goto	u1451
  1129   0011C6  EFE7  F008         	goto	u1450
  1130   0011CA                     u1451:
  1131   0011CA  EFB4  F008         	goto	l2237
  1132   0011CE                     u1450:
  1133   0011CE                     
  1134                           ;dc_motor_v1.c: 186:     for(int j=0; j<rotation_calibration; j++){
  1135   0011CE  0E00               	movlw	0
  1136   0011D0  6E4F               	movwf	(turnLEFT@j+1)^0,c
  1137   0011D2  0E00               	movlw	0
  1138   0011D4  6E4E               	movwf	turnLEFT@j^0,c
  1139   0011D6  EFF6  F008         	goto	l268
  1140   0011DA                     l2251:
  1141                           
  1142                           ;dc_motor_v1.c: 187:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1143   0011DA  0ED0               	movlw	208
  1144   0011DC  6E48               	movwf	??_turnLEFT^0,c
  1145   0011DE  0ECA               	movlw	202
  1146   0011E0                     u1687:
  1147   0011E0  2EE8               	decfsz	wreg,f,c
  1148   0011E2  D7FE               	bra	u1687
  1149   0011E4  2E48               	decfsz	??_turnLEFT^0,f,c
  1150   0011E6  D7FC               	bra	u1687
  1151   0011E8                     
  1152                           ;dc_motor_v1.c: 188:     }
  1153   0011E8  4A4E               	infsnz	turnLEFT@j^0,f,c
  1154   0011EA  2A4F               	incf	(turnLEFT@j+1)^0,f,c
  1155   0011EC                     l268:
  1156   0011EC  504B               	movf	turnLEFT@rotation_calibration^0,w,c
  1157   0011EE  6E48               	movwf	??_turnLEFT^0,c
  1158   0011F0  6A49               	clrf	(??_turnLEFT+1)^0,c
  1159   0011F2  5048               	movf	??_turnLEFT^0,w,c
  1160   0011F4  5C4E               	subwf	turnLEFT@j^0,w,c
  1161   0011F6  504F               	movf	(turnLEFT@j+1)^0,w,c
  1162   0011F8  0A80               	xorlw	128
  1163   0011FA  6E4A               	movwf	(??_turnLEFT+2)^0,c
  1164   0011FC  5049               	movf	(??_turnLEFT+1)^0,w,c
  1165   0011FE  0A80               	xorlw	128
  1166   001200  584A               	subwfb	(??_turnLEFT+2)^0,w,c
  1167   001202  A0D8               	btfss	status,0,c
  1168   001204  EF06  F009         	goto	u1461
  1169   001208  EF08  F009         	goto	u1460
  1170   00120C                     u1461:
  1171   00120C  EFED  F008         	goto	l2251
  1172   001210                     u1460:
  1173   001210  EF36  F009         	goto	l2269
  1174   001214                     l2255:
  1175                           
  1176                           ;dc_motor_v1.c: 192:         if(mR->power> 0 ){
  1177   001214  5047               	movf	turnLEFT@mR^0,w,c
  1178   001216  6ED9               	movwf	fsr2l,c
  1179   001218  6ADA               	clrf	fsr2h,c
  1180   00121A  50DF               	movf	indf2,w,c
  1181   00121C  B4D8               	btfsc	status,2,c
  1182   00121E  EF13  F009         	goto	u1471
  1183   001222  EF15  F009         	goto	u1470
  1184   001226                     u1471:
  1185   001226  EF19  F009         	goto	l2259
  1186   00122A                     u1470:
  1187   00122A                     
  1188                           ;dc_motor_v1.c: 193:             mR->power--;
  1189   00122A  5047               	movf	turnLEFT@mR^0,w,c
  1190   00122C  6ED9               	movwf	fsr2l,c
  1191   00122E  6ADA               	clrf	fsr2h,c
  1192   001230  06DF               	decf	indf2,f,c
  1193   001232                     l2259:
  1194                           
  1195                           ;dc_motor_v1.c: 195:         if(mL->power> 0 ){
  1196   001232  5046               	movf	turnLEFT@mL^0,w,c
  1197   001234  6ED9               	movwf	fsr2l,c
  1198   001236  6ADA               	clrf	fsr2h,c
  1199   001238  50DF               	movf	indf2,w,c
  1200   00123A  B4D8               	btfsc	status,2,c
  1201   00123C  EF22  F009         	goto	u1481
  1202   001240  EF24  F009         	goto	u1480
  1203   001244                     u1481:
  1204   001244  EF28  F009         	goto	l2263
  1205   001248                     u1480:
  1206   001248                     
  1207                           ;dc_motor_v1.c: 196:             mL->power--;
  1208   001248  5046               	movf	turnLEFT@mL^0,w,c
  1209   00124A  6ED9               	movwf	fsr2l,c
  1210   00124C  6ADA               	clrf	fsr2h,c
  1211   00124E  06DF               	decf	indf2,f,c
  1212   001250                     l2263:
  1213                           
  1214                           ;dc_motor_v1.c: 198:         setMotorPWM(mR);
  1215   001250  C047  F041         	movff	turnLEFT@mR,setMotorPWM@m
  1216   001254  EC4D  F009         	call	_setMotorPWM	;wreg free
  1217   001258                     
  1218                           ;dc_motor_v1.c: 199:         setMotorPWM(mL);
  1219   001258  C046  F041         	movff	turnLEFT@mL,setMotorPWM@m
  1220   00125C  EC4D  F009         	call	_setMotorPWM	;wreg free
  1221   001260                     
  1222                           ;dc_motor_v1.c: 200:         delay_ms_function(delay_time);
  1223   001260  C052  F034         	movff	turnLEFT@delay_time,delay_ms_function@milliseconds
  1224   001264  C053  F035         	movff	turnLEFT@delay_time+1,delay_ms_function@milliseconds+1
  1225   001268  ECB6  F00C         	call	_delay_ms_function	;wreg free
  1226   00126C                     l2269:
  1227                           
  1228                           ;dc_motor_v1.c: 191:     while(mL->power || mR->power > 0){
  1229   00126C  5046               	movf	turnLEFT@mL^0,w,c
  1230   00126E  6ED9               	movwf	fsr2l,c
  1231   001270  6ADA               	clrf	fsr2h,c
  1232   001272  50DF               	movf	indf2,w,c
  1233   001274  A4D8               	btfss	status,2,c
  1234   001276  EF3F  F009         	goto	u1491
  1235   00127A  EF41  F009         	goto	u1490
  1236   00127E                     u1491:
  1237   00127E  EF0A  F009         	goto	l2255
  1238   001282                     u1490:
  1239   001282  5047               	movf	turnLEFT@mR^0,w,c
  1240   001284  6ED9               	movwf	fsr2l,c
  1241   001286  6ADA               	clrf	fsr2h,c
  1242   001288  50DF               	movf	indf2,w,c
  1243   00128A  A4D8               	btfss	status,2,c
  1244   00128C  EF4A  F009         	goto	u1501
  1245   001290  EF4C  F009         	goto	u1500
  1246   001294                     u1501:
  1247   001294  EF0A  F009         	goto	l2255
  1248   001298                     u1500:
  1249   001298  0012               	return		;funcret
  1250   00129A                     __end_of_turnLEFT:
  1251                           	callstack 0
  1252                           
  1253 ;; *************** function _switch_calibration *****************
  1254 ;; Defined at:
  1255 ;;		line 44 in file "calibration.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;  calibration_    1    0[COMRAM] PTR int 
  1258 ;;		 -> calibration(9), 
  1259 ;; Auto vars:     Size  Location     Type
  1260 ;;		None
  1261 ;; Return value:  Size  Location     Type
  1262 ;;                  1    wreg      void 
  1263 ;; Registers used:
  1264 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1265 ;; Tracked objects:
  1266 ;;		On entry : 0/0
  1267 ;;		On exit  : 0/0
  1268 ;;		Unchanged: 0/0
  1269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1270 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1272 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1273 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1274 ;;Total ram usage:        3 bytes
  1275 ;; Hardware stack levels used: 1
  1276 ;; This function calls:
  1277 ;;		Nothing
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text3
  1284   001732                     __ptext3:
  1285                           	callstack 0
  1286   001732                     _switch_calibration:
  1287                           	callstack 30
  1288   001732                     l32:
  1289                           
  1290                           ;calibration.c: 46:         if(!PORTFbits.RF2){
  1291   001732  B48E               	btfsc	142,2,c	;volatile
  1292   001734  EF9E  F00B         	goto	u1371
  1293   001738  EFA0  F00B         	goto	u1370
  1294   00173C                     u1371:
  1295   00173C  EFCE  F00B         	goto	l33
  1296   001740                     u1370:
  1297   001740                     
  1298                           ;calibration.c: 47:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1299   001740  0E11               	movlw	17
  1300   001742  6E36               	movwf	(??_switch_calibration+1)^0,c
  1301   001744  0E3C               	movlw	60
  1302   001746  6E35               	movwf	??_switch_calibration^0,c
  1303   001748  0ECB               	movlw	203
  1304   00174A                     u1697:
  1305   00174A  2EE8               	decfsz	wreg,f,c
  1306   00174C  D7FE               	bra	u1697
  1307   00174E  2E35               	decfsz	??_switch_calibration^0,f,c
  1308   001750  D7FC               	bra	u1697
  1309   001752  2E36               	decfsz	(??_switch_calibration+1)^0,f,c
  1310   001754  D7FA               	bra	u1697
  1311   001756  0000               	nop	
  1312   001758                     
  1313                           ;calibration.c: 48:             *calibration_index = *calibration_index + 1;
  1314   001758  5034               	movf	switch_calibration@calibration_index^0,w,c
  1315   00175A  6ED9               	movwf	fsr2l,c
  1316   00175C  6ADA               	clrf	fsr2h,c
  1317   00175E  CFDE F035          	movff	postinc2,??_switch_calibration
  1318   001762  CFDD F036          	movff	postdec2,??_switch_calibration+1
  1319   001766  0E01               	movlw	1
  1320   001768  2635               	addwf	??_switch_calibration^0,f,c
  1321   00176A  0E00               	movlw	0
  1322   00176C  2236               	addwfc	(??_switch_calibration+1)^0,f,c
  1323   00176E  5034               	movf	switch_calibration@calibration_index^0,w,c
  1324   001770  6ED9               	movwf	fsr2l,c
  1325   001772  6ADA               	clrf	fsr2h,c
  1326   001774  C035  FFDE         	movff	??_switch_calibration,postinc2
  1327   001778  C036  FFDD         	movff	??_switch_calibration+1,postdec2
  1328   00177C                     
  1329                           ;calibration.c: 49:             LATDbits.LATD7 = 1;
  1330   00177C  8E7C               	bsf	124,7,c	;volatile
  1331   00177E                     
  1332                           ;calibration.c: 50:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1333   00177E  0E11               	movlw	17
  1334   001780  6E36               	movwf	(??_switch_calibration+1)^0,c
  1335   001782  0E3C               	movlw	60
  1336   001784  6E35               	movwf	??_switch_calibration^0,c
  1337   001786  0ECB               	movlw	203
  1338   001788                     u1707:
  1339   001788  2EE8               	decfsz	wreg,f,c
  1340   00178A  D7FE               	bra	u1707
  1341   00178C  2E35               	decfsz	??_switch_calibration^0,f,c
  1342   00178E  D7FC               	bra	u1707
  1343   001790  2E36               	decfsz	(??_switch_calibration+1)^0,f,c
  1344   001792  D7FA               	bra	u1707
  1345   001794  0000               	nop	
  1346   001796                     
  1347                           ;calibration.c: 51:             LATDbits.LATD7 = 0;
  1348   001796  9E7C               	bcf	124,7,c	;volatile
  1349                           
  1350                           ;calibration.c: 52:             break;
  1351   001798  EFEF  F00B         	goto	l37
  1352   00179C                     l33:
  1353                           
  1354                           ;calibration.c: 55:         if(!PORTFbits.RF3){
  1355   00179C  B68E               	btfsc	142,3,c	;volatile
  1356   00179E  EFD3  F00B         	goto	u1381
  1357   0017A2  EFD5  F00B         	goto	u1380
  1358   0017A6                     u1381:
  1359   0017A6  EF99  F00B         	goto	l32
  1360   0017AA                     u1380:
  1361   0017AA                     
  1362                           ;calibration.c: 56:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1363   0017AA  0E11               	movlw	17
  1364   0017AC  6E36               	movwf	(??_switch_calibration+1)^0,c
  1365   0017AE  0E3C               	movlw	60
  1366   0017B0  6E35               	movwf	??_switch_calibration^0,c
  1367   0017B2  0ECB               	movlw	203
  1368   0017B4                     u1717:
  1369   0017B4  2EE8               	decfsz	wreg,f,c
  1370   0017B6  D7FE               	bra	u1717
  1371   0017B8  2E35               	decfsz	??_switch_calibration^0,f,c
  1372   0017BA  D7FC               	bra	u1717
  1373   0017BC  2E36               	decfsz	(??_switch_calibration+1)^0,f,c
  1374   0017BE  D7FA               	bra	u1717
  1375   0017C0  0000               	nop	
  1376   0017C2                     
  1377                           ;calibration.c: 57:             LATHbits.LATH3 = 1;
  1378   0017C2  8680               	bsf	128,3,c	;volatile
  1379                           
  1380                           ;calibration.c: 58:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1381   0017C4  0E11               	movlw	17
  1382   0017C6  6E36               	movwf	(??_switch_calibration+1)^0,c
  1383   0017C8  0E3C               	movlw	60
  1384   0017CA  6E35               	movwf	??_switch_calibration^0,c
  1385   0017CC  0ECB               	movlw	203
  1386   0017CE                     u1727:
  1387   0017CE  2EE8               	decfsz	wreg,f,c
  1388   0017D0  D7FE               	bra	u1727
  1389   0017D2  2E35               	decfsz	??_switch_calibration^0,f,c
  1390   0017D4  D7FC               	bra	u1727
  1391   0017D6  2E36               	decfsz	(??_switch_calibration+1)^0,f,c
  1392   0017D8  D7FA               	bra	u1727
  1393   0017DA  0000               	nop	
  1394   0017DC                     
  1395                           ;calibration.c: 59:             LATHbits.LATH3 = 0;
  1396   0017DC  9680               	bcf	128,3,c	;volatile
  1397   0017DE                     l37:
  1398   0017DE  0012               	return		;funcret
  1399   0017E0                     __end_of_switch_calibration:
  1400                           	callstack 0
  1401                           
  1402 ;; *************** function _initDCmotorsPWM *****************
  1403 ;; Defined at:
  1404 ;;		line 5 in file "dc_motor_v1.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;		None
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      void 
  1411 ;; Registers used:
  1412 ;;		wreg, status,2
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1421 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1422 ;;Total ram usage:        2 bytes
  1423 ;; Hardware stack levels used: 1
  1424 ;; This function calls:
  1425 ;;		Nothing
  1426 ;; This function is called by:
  1427 ;;		_main
  1428 ;; This function uses a non-reentrant model
  1429 ;;
  1430                           
  1431                           	psect	text4
  1432   0017E0                     __ptext4:
  1433                           	callstack 0
  1434   0017E0                     _initDCmotorsPWM:
  1435                           	callstack 30
  1436   0017E0                     
  1437                           ;dc_motor_v1.c: 7:     TRISEbits.TRISE2 = 0;
  1438   0017E0  9485               	bcf	133,2,c	;volatile
  1439                           
  1440                           ;dc_motor_v1.c: 8:     TRISEbits.TRISE4 = 0;
  1441   0017E2  9885               	bcf	133,4,c	;volatile
  1442                           
  1443                           ;dc_motor_v1.c: 9:     TRISCbits.TRISC7 = 0;
  1444   0017E4  9E83               	bcf	131,7,c	;volatile
  1445                           
  1446                           ;dc_motor_v1.c: 10:     TRISGbits.TRISG6 = 0;
  1447   0017E6  9C87               	bcf	135,6,c	;volatile
  1448                           
  1449                           ;dc_motor_v1.c: 12:     LATEbits.LATE2 = 0;
  1450   0017E8  947D               	bcf	125,2,c	;volatile
  1451                           
  1452                           ;dc_motor_v1.c: 13:     LATEbits.LATE4 = 0;
  1453   0017EA  987D               	bcf	125,4,c	;volatile
  1454                           
  1455                           ;dc_motor_v1.c: 14:     LATCbits.LATC7 = 0;
  1456   0017EC  9E7B               	bcf	123,7,c	;volatile
  1457                           
  1458                           ;dc_motor_v1.c: 15:     LATGbits.LATG6 = 0;
  1459   0017EE  9C7F               	bcf	127,6,c	;volatile
  1460   0017F0                     
  1461                           ;dc_motor_v1.c: 18:     RE2PPS=0x05;
  1462   0017F0  0E05               	movlw	5
  1463   0017F2  010E               	movlb	14	; () banked
  1464   0017F4  6F74               	movwf	116,b	;volatile
  1465                           
  1466                           ;dc_motor_v1.c: 19:     RE4PPS=0x06;
  1467   0017F6  0E06               	movlw	6
  1468   0017F8  6F76               	movwf	118,b	;volatile
  1469                           
  1470                           ;dc_motor_v1.c: 20:     RC7PPS=0x07;
  1471   0017FA  0E07               	movlw	7
  1472   0017FC  6F69               	movwf	105,b	;volatile
  1473                           
  1474                           ;dc_motor_v1.c: 21:     RG6PPS=0x08;
  1475   0017FE  0E08               	movlw	8
  1476   001800  6F88               	movwf	136,b	;volatile
  1477                           
  1478                           ;dc_motor_v1.c: 24:     T2CONbits.CKPS=100;
  1479   001802  50BD               	movf	189,w,c	;volatile
  1480   001804  0B8F               	andlw	-113
  1481   001806  0940               	iorlw	64
  1482   001808  6EBD               	movwf	189,c	;volatile
  1483                           
  1484                           ;dc_motor_v1.c: 25:     T2HLTbits.MODE=0b00000;
  1485   00180A  0EE0               	movlw	-32
  1486   00180C  16BE               	andwf	190,f,c	;volatile
  1487                           
  1488                           ;dc_motor_v1.c: 26:     T2CLKCONbits.CS=0b0001;
  1489   00180E  50BF               	movf	191,w,c	;volatile
  1490   001810  0BF0               	andlw	-16
  1491   001812  0901               	iorlw	1
  1492   001814  6EBF               	movwf	191,c	;volatile
  1493   001816                     
  1494                           ; BSR set to: 14
  1495                           ;dc_motor_v1.c: 30:     T2PR=PWMperiod;
  1496   001816  C034  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1497   00181A                     
  1498                           ; BSR set to: 14
  1499                           ;dc_motor_v1.c: 31:     T2CONbits.ON=1;
  1500   00181A  8EBD               	bsf	189,7,c	;volatile
  1501                           
  1502                           ;dc_motor_v1.c: 35:     CCPR1H=0;
  1503   00181C  0E00               	movlw	0
  1504   00181E  6EAA               	movwf	170,c	;volatile
  1505                           
  1506                           ;dc_motor_v1.c: 36:     CCPR2H=0;
  1507   001820  0E00               	movlw	0
  1508   001822  6EA6               	movwf	166,c	;volatile
  1509                           
  1510                           ;dc_motor_v1.c: 37:     CCPR3H=0;
  1511   001824  0E00               	movlw	0
  1512   001826  010F               	movlb	15	; () banked
  1513   001828  6F25               	movwf	37,b	;volatile
  1514                           
  1515                           ;dc_motor_v1.c: 38:     CCPR4H=0;
  1516   00182A  0E00               	movlw	0
  1517   00182C  6F21               	movwf	33,b	;volatile
  1518                           
  1519                           ;dc_motor_v1.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1520   00182E  0EFC               	movlw	-4
  1521   001830  16AD               	andwf	173,f,c	;volatile
  1522                           
  1523                           ;dc_motor_v1.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1524   001832  0EF3               	movlw	-13
  1525   001834  16AD               	andwf	173,f,c	;volatile
  1526                           
  1527                           ;dc_motor_v1.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1528   001836  0ECF               	movlw	-49
  1529   001838  16AD               	andwf	173,f,c	;volatile
  1530                           
  1531                           ;dc_motor_v1.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1532   00183A  0E3F               	movlw	-193
  1533   00183C  16AD               	andwf	173,f,c	;volatile
  1534   00183E                     
  1535                           ; BSR set to: 15
  1536                           ;dc_motor_v1.c: 47:     CCP1CONbits.FMT=1;
  1537   00183E  88AB               	bsf	171,4,c	;volatile
  1538                           
  1539                           ;dc_motor_v1.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1540   001840  50AB               	movf	171,w,c	;volatile
  1541   001842  0BF0               	andlw	-16
  1542   001844  090C               	iorlw	12
  1543   001846  6EAB               	movwf	171,c	;volatile
  1544   001848                     
  1545                           ; BSR set to: 15
  1546                           ;dc_motor_v1.c: 49:     CCP1CONbits.EN=1;
  1547   001848  8EAB               	bsf	171,7,c	;volatile
  1548   00184A                     
  1549                           ; BSR set to: 15
  1550                           ;dc_motor_v1.c: 51:     CCP2CONbits.FMT=1;
  1551   00184A  88A7               	bsf	167,4,c	;volatile
  1552                           
  1553                           ;dc_motor_v1.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  1554   00184C  50A7               	movf	167,w,c	;volatile
  1555   00184E  0BF0               	andlw	-16
  1556   001850  090C               	iorlw	12
  1557   001852  6EA7               	movwf	167,c	;volatile
  1558   001854                     
  1559                           ; BSR set to: 15
  1560                           ;dc_motor_v1.c: 53:     CCP2CONbits.EN=1;
  1561   001854  8EA7               	bsf	167,7,c	;volatile
  1562   001856                     
  1563                           ; BSR set to: 15
  1564                           ;dc_motor_v1.c: 55:     CCP3CONbits.FMT=1;
  1565   001856  8926               	bsf	38,4,b	;volatile
  1566                           
  1567                           ;dc_motor_v1.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  1568   001858  5126               	movf	38,w,b	;volatile
  1569   00185A  0BF0               	andlw	-16
  1570   00185C  090C               	iorlw	12
  1571   00185E  6F26               	movwf	38,b	;volatile
  1572   001860                     
  1573                           ; BSR set to: 15
  1574                           ;dc_motor_v1.c: 57:     CCP3CONbits.EN=1;
  1575   001860  8F26               	bsf	38,7,b	;volatile
  1576   001862                     
  1577                           ; BSR set to: 15
  1578                           ;dc_motor_v1.c: 59:     CCP4CONbits.FMT=1;
  1579   001862  8922               	bsf	34,4,b	;volatile
  1580                           
  1581                           ;dc_motor_v1.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  1582   001864  5122               	movf	34,w,b	;volatile
  1583   001866  0BF0               	andlw	-16
  1584   001868  090C               	iorlw	12
  1585   00186A  6F22               	movwf	34,b	;volatile
  1586   00186C                     
  1587                           ; BSR set to: 15
  1588                           ;dc_motor_v1.c: 61:     CCP4CONbits.EN=1;
  1589   00186C  8F22               	bsf	34,7,b	;volatile
  1590   00186E                     
  1591                           ; BSR set to: 15
  1592                           ;dc_motor_v1.c: 64:     TRISHbits.TRISH3 = 0;
  1593   00186E  9688               	bcf	136,3,c	;volatile
  1594   001870                     
  1595                           ; BSR set to: 15
  1596                           ;dc_motor_v1.c: 65:     LATHbits.LATH3 = 0;
  1597   001870  9680               	bcf	128,3,c	;volatile
  1598   001872                     
  1599                           ; BSR set to: 15
  1600   001872  0012               	return		;funcret
  1601   001874                     __end_of_initDCmotorsPWM:
  1602                           	callstack 0
  1603                           
  1604 ;; *************** function _forward *****************
  1605 ;; Defined at:
  1606 ;;		line 122 in file "dc_motor_v1.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;  Distance_Cal    1    wreg     unsigned char 
  1609 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1610 ;;		 -> motorL(9), 
  1611 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1612 ;;		 -> motorR(9), 
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;  Distance_Cal    1   23[COMRAM] unsigned char 
  1615 ;;  j               2   26[COMRAM] int 
  1616 ;;  i               2   24[COMRAM] int 
  1617 ;;  delay_time      2   30[COMRAM] int 
  1618 ;;  max_power       2   28[COMRAM] int 
  1619 ;;  acceleration    2    0        int 
  1620 ;; Return value:  Size  Location     Type
  1621 ;;                  1    wreg      void 
  1622 ;; Registers used:
  1623 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1624 ;; Tracked objects:
  1625 ;;		On entry : 0/0
  1626 ;;		On exit  : 0/0
  1627 ;;		Unchanged: 0/0
  1628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1629 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1630 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1631 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1632 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1633 ;;Total ram usage:       14 bytes
  1634 ;; Hardware stack levels used: 1
  1635 ;; Hardware stack levels required when called: 2
  1636 ;; This function calls:
  1637 ;;		___awdiv
  1638 ;;		_delay_ms_function
  1639 ;;		_setMotorPWM
  1640 ;; This function is called by:
  1641 ;;		_main
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           	psect	text5
  1646   000E1E                     __ptext5:
  1647                           	callstack 0
  1648   000E1E                     _forward:
  1649                           	callstack 28
  1650                           
  1651                           ; BSR set to: 15
  1652                           ;incstack = 0
  1653                           ;forward@Distance_Calibration stored from wreg
  1654   000E1E  6E4B               	movwf	forward@Distance_Calibration^0,c
  1655   000E20                     
  1656                           ;dc_motor_v1.c: 123:     mL->direction = 1;
  1657   000E20  5046               	movf	forward@mL^0,w,c
  1658   000E22  6ED9               	movwf	fsr2l,c
  1659   000E24  6ADA               	clrf	fsr2h,c
  1660   000E26  0E01               	movlw	1
  1661   000E28  26D9               	addwf	fsr2l,f,c
  1662   000E2A  0E01               	movlw	1
  1663   000E2C  6EDF               	movwf	indf2,c
  1664                           
  1665                           ;dc_motor_v1.c: 124:     mR->direction = 1;
  1666   000E2E  5047               	movf	forward@mR^0,w,c
  1667   000E30  6ED9               	movwf	fsr2l,c
  1668   000E32  6ADA               	clrf	fsr2h,c
  1669   000E34  0E01               	movlw	1
  1670   000E36  26D9               	addwf	fsr2l,f,c
  1671   000E38  0E01               	movlw	1
  1672   000E3A  6EDF               	movwf	indf2,c
  1673   000E3C                     
  1674                           ;dc_motor_v1.c: 131:     int max_power = 20;
  1675   000E3C  0E00               	movlw	0
  1676   000E3E  6E51               	movwf	(forward@max_power+1)^0,c
  1677   000E40  0E14               	movlw	20
  1678   000E42  6E50               	movwf	forward@max_power^0,c
  1679   000E44                     
  1680                           ;dc_motor_v1.c: 133:     int delay_time = acceleration_time/max_power;
  1681   000E44  0E00               	movlw	0
  1682   000E46  6E35               	movwf	(___awdiv@dividend+1)^0,c
  1683   000E48  0E64               	movlw	100
  1684   000E4A  6E34               	movwf	___awdiv@dividend^0,c
  1685   000E4C  0E00               	movlw	0
  1686   000E4E  6E37               	movwf	(___awdiv@divisor+1)^0,c
  1687   000E50  0E14               	movlw	20
  1688   000E52  6E36               	movwf	___awdiv@divisor^0,c
  1689   000E54  EC37  F00B         	call	___awdiv	;wreg free
  1690   000E58  C034  F052         	movff	?___awdiv,forward@delay_time
  1691   000E5C  C035  F053         	movff	?___awdiv+1,forward@delay_time+1
  1692   000E60                     
  1693                           ;dc_motor_v1.c: 136:     for(int i=0; i< max_power; i++){
  1694   000E60  0E00               	movlw	0
  1695   000E62  6E4D               	movwf	(forward@i+1)^0,c
  1696   000E64  0E00               	movlw	0
  1697   000E66  6E4C               	movwf	forward@i^0,c
  1698   000E68  EF5A  F007         	goto	l2201
  1699   000E6C                     l2191:
  1700                           
  1701                           ;dc_motor_v1.c: 137:         mL->power = mL->power + 1;
  1702   000E6C  5046               	movf	forward@mL^0,w,c
  1703   000E6E  6ED9               	movwf	fsr2l,c
  1704   000E70  6ADA               	clrf	fsr2h,c
  1705   000E72  5046               	movf	forward@mL^0,w,c
  1706   000E74  6EE1               	movwf	fsr1l,c
  1707   000E76  6AE2               	clrf	fsr1h,c
  1708   000E78  50E7               	movf	indf1,w,c
  1709   000E7A  6E48               	movwf	??_forward^0,c
  1710   000E7C  2848               	incf	??_forward^0,w,c
  1711   000E7E  6EDF               	movwf	indf2,c
  1712                           
  1713                           ;dc_motor_v1.c: 138:         mR->power = mR->power + 1 ;
  1714   000E80  5047               	movf	forward@mR^0,w,c
  1715   000E82  6ED9               	movwf	fsr2l,c
  1716   000E84  6ADA               	clrf	fsr2h,c
  1717   000E86  5047               	movf	forward@mR^0,w,c
  1718   000E88  6EE1               	movwf	fsr1l,c
  1719   000E8A  6AE2               	clrf	fsr1h,c
  1720   000E8C  50E7               	movf	indf1,w,c
  1721   000E8E  6E48               	movwf	??_forward^0,c
  1722   000E90  2848               	incf	??_forward^0,w,c
  1723   000E92  6EDF               	movwf	indf2,c
  1724   000E94                     
  1725                           ;dc_motor_v1.c: 139:         setMotorPWM(mR);
  1726   000E94  C047  F041         	movff	forward@mR,setMotorPWM@m
  1727   000E98  EC4D  F009         	call	_setMotorPWM	;wreg free
  1728   000E9C                     
  1729                           ;dc_motor_v1.c: 140:         setMotorPWM(mL);
  1730   000E9C  C046  F041         	movff	forward@mL,setMotorPWM@m
  1731   000EA0  EC4D  F009         	call	_setMotorPWM	;wreg free
  1732   000EA4                     
  1733                           ;dc_motor_v1.c: 141:         delay_ms_function(delay_time);
  1734   000EA4  C052  F034         	movff	forward@delay_time,delay_ms_function@milliseconds
  1735   000EA8  C053  F035         	movff	forward@delay_time+1,delay_ms_function@milliseconds+1
  1736   000EAC  ECB6  F00C         	call	_delay_ms_function	;wreg free
  1737   000EB0                     
  1738                           ;dc_motor_v1.c: 142:     }
  1739   000EB0  4A4C               	infsnz	forward@i^0,f,c
  1740   000EB2  2A4D               	incf	(forward@i+1)^0,f,c
  1741   000EB4                     l2201:
  1742   000EB4  5050               	movf	forward@max_power^0,w,c
  1743   000EB6  5C4C               	subwf	forward@i^0,w,c
  1744   000EB8  504D               	movf	(forward@i+1)^0,w,c
  1745   000EBA  0A80               	xorlw	128
  1746   000EBC  6E48               	movwf	??_forward^0,c
  1747   000EBE  5051               	movf	(forward@max_power+1)^0,w,c
  1748   000EC0  0A80               	xorlw	128
  1749   000EC2  5848               	subwfb	??_forward^0,w,c
  1750   000EC4  A0D8               	btfss	status,0,c
  1751   000EC6  EF67  F007         	goto	u1391
  1752   000ECA  EF69  F007         	goto	u1390
  1753   000ECE                     u1391:
  1754   000ECE  EF36  F007         	goto	l2191
  1755   000ED2                     u1390:
  1756   000ED2                     
  1757                           ;dc_motor_v1.c: 147:     for(int j=0; j<Distance_Calibration; j++){
  1758   000ED2  0E00               	movlw	0
  1759   000ED4  6E4F               	movwf	(forward@j+1)^0,c
  1760   000ED6  0E00               	movlw	0
  1761   000ED8  6E4E               	movwf	forward@j^0,c
  1762   000EDA  EF78  F007         	goto	l254
  1763   000EDE                     l2205:
  1764                           
  1765                           ;dc_motor_v1.c: 148:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1766   000EDE  0ED0               	movlw	208
  1767   000EE0  6E48               	movwf	??_forward^0,c
  1768   000EE2  0ECA               	movlw	202
  1769   000EE4                     u1737:
  1770   000EE4  2EE8               	decfsz	wreg,f,c
  1771   000EE6  D7FE               	bra	u1737
  1772   000EE8  2E48               	decfsz	??_forward^0,f,c
  1773   000EEA  D7FC               	bra	u1737
  1774   000EEC                     
  1775                           ;dc_motor_v1.c: 149:     }
  1776   000EEC  4A4E               	infsnz	forward@j^0,f,c
  1777   000EEE  2A4F               	incf	(forward@j+1)^0,f,c
  1778   000EF0                     l254:
  1779   000EF0  504B               	movf	forward@Distance_Calibration^0,w,c
  1780   000EF2  6E48               	movwf	??_forward^0,c
  1781   000EF4  6A49               	clrf	(??_forward+1)^0,c
  1782   000EF6  5048               	movf	??_forward^0,w,c
  1783   000EF8  5C4E               	subwf	forward@j^0,w,c
  1784   000EFA  504F               	movf	(forward@j+1)^0,w,c
  1785   000EFC  0A80               	xorlw	128
  1786   000EFE  6E4A               	movwf	(??_forward+2)^0,c
  1787   000F00  5049               	movf	(??_forward+1)^0,w,c
  1788   000F02  0A80               	xorlw	128
  1789   000F04  584A               	subwfb	(??_forward+2)^0,w,c
  1790   000F06  A0D8               	btfss	status,0,c
  1791   000F08  EF88  F007         	goto	u1401
  1792   000F0C  EF8A  F007         	goto	u1400
  1793   000F10                     u1401:
  1794   000F10  EF6F  F007         	goto	l2205
  1795   000F14                     u1400:
  1796   000F14  EFB8  F007         	goto	l2223
  1797   000F18                     l2209:
  1798                           
  1799                           ;dc_motor_v1.c: 153:         if(mR->power> 0 ){
  1800   000F18  5047               	movf	forward@mR^0,w,c
  1801   000F1A  6ED9               	movwf	fsr2l,c
  1802   000F1C  6ADA               	clrf	fsr2h,c
  1803   000F1E  50DF               	movf	indf2,w,c
  1804   000F20  B4D8               	btfsc	status,2,c
  1805   000F22  EF95  F007         	goto	u1411
  1806   000F26  EF97  F007         	goto	u1410
  1807   000F2A                     u1411:
  1808   000F2A  EF9B  F007         	goto	l2213
  1809   000F2E                     u1410:
  1810   000F2E                     
  1811                           ;dc_motor_v1.c: 154:             mR->power--;
  1812   000F2E  5047               	movf	forward@mR^0,w,c
  1813   000F30  6ED9               	movwf	fsr2l,c
  1814   000F32  6ADA               	clrf	fsr2h,c
  1815   000F34  06DF               	decf	indf2,f,c
  1816   000F36                     l2213:
  1817                           
  1818                           ;dc_motor_v1.c: 156:         if(mL->power> 0 ){
  1819   000F36  5046               	movf	forward@mL^0,w,c
  1820   000F38  6ED9               	movwf	fsr2l,c
  1821   000F3A  6ADA               	clrf	fsr2h,c
  1822   000F3C  50DF               	movf	indf2,w,c
  1823   000F3E  B4D8               	btfsc	status,2,c
  1824   000F40  EFA4  F007         	goto	u1421
  1825   000F44  EFA6  F007         	goto	u1420
  1826   000F48                     u1421:
  1827   000F48  EFAA  F007         	goto	l2217
  1828   000F4C                     u1420:
  1829   000F4C                     
  1830                           ;dc_motor_v1.c: 157:             mL->power--;
  1831   000F4C  5046               	movf	forward@mL^0,w,c
  1832   000F4E  6ED9               	movwf	fsr2l,c
  1833   000F50  6ADA               	clrf	fsr2h,c
  1834   000F52  06DF               	decf	indf2,f,c
  1835   000F54                     l2217:
  1836                           
  1837                           ;dc_motor_v1.c: 159:         setMotorPWM(mR);
  1838   000F54  C047  F041         	movff	forward@mR,setMotorPWM@m
  1839   000F58  EC4D  F009         	call	_setMotorPWM	;wreg free
  1840   000F5C                     
  1841                           ;dc_motor_v1.c: 160:         setMotorPWM(mL);
  1842   000F5C  C046  F041         	movff	forward@mL,setMotorPWM@m
  1843   000F60  EC4D  F009         	call	_setMotorPWM	;wreg free
  1844   000F64                     
  1845                           ;dc_motor_v1.c: 161:         delay_ms_function(delay_time);
  1846   000F64  C052  F034         	movff	forward@delay_time,delay_ms_function@milliseconds
  1847   000F68  C053  F035         	movff	forward@delay_time+1,delay_ms_function@milliseconds+1
  1848   000F6C  ECB6  F00C         	call	_delay_ms_function	;wreg free
  1849   000F70                     l2223:
  1850                           
  1851                           ;dc_motor_v1.c: 152:     while(mL->power || mR->power > 0){
  1852   000F70  5046               	movf	forward@mL^0,w,c
  1853   000F72  6ED9               	movwf	fsr2l,c
  1854   000F74  6ADA               	clrf	fsr2h,c
  1855   000F76  50DF               	movf	indf2,w,c
  1856   000F78  A4D8               	btfss	status,2,c
  1857   000F7A  EFC1  F007         	goto	u1431
  1858   000F7E  EFC3  F007         	goto	u1430
  1859   000F82                     u1431:
  1860   000F82  EF8C  F007         	goto	l2209
  1861   000F86                     u1430:
  1862   000F86  5047               	movf	forward@mR^0,w,c
  1863   000F88  6ED9               	movwf	fsr2l,c
  1864   000F8A  6ADA               	clrf	fsr2h,c
  1865   000F8C  50DF               	movf	indf2,w,c
  1866   000F8E  A4D8               	btfss	status,2,c
  1867   000F90  EFCC  F007         	goto	u1441
  1868   000F94  EFCE  F007         	goto	u1440
  1869   000F98                     u1441:
  1870   000F98  EF8C  F007         	goto	l2209
  1871   000F9C                     u1440:
  1872   000F9C  0012               	return		;funcret
  1873   000F9E                     __end_of_forward:
  1874                           	callstack 0
  1875                           
  1876 ;; *************** function _setMotorPWM *****************
  1877 ;; Defined at:
  1878 ;;		line 75 in file "dc_motor_v1.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1881 ;;		 -> motorR(9), motorL(9), 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;  negDuty         1   17[COMRAM] unsigned char 
  1884 ;;  posDuty         1   16[COMRAM] unsigned char 
  1885 ;; Return value:  Size  Location     Type
  1886 ;;                  1    wreg      void 
  1887 ;; Registers used:
  1888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1889 ;; Tracked objects:
  1890 ;;		On entry : 0/0
  1891 ;;		On exit  : 0/0
  1892 ;;		Unchanged: 0/0
  1893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1894 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1895 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1896 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1897 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1898 ;;Total ram usage:        5 bytes
  1899 ;; Hardware stack levels used: 1
  1900 ;; Hardware stack levels required when called: 1
  1901 ;; This function calls:
  1902 ;;		___lwdiv
  1903 ;;		___wmul
  1904 ;; This function is called by:
  1905 ;;		_forward
  1906 ;;		_turnLEFT
  1907 ;;		_turnRIGHT
  1908 ;;		_stop
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text6
  1913   00129A                     __ptext6:
  1914                           	callstack 0
  1915   00129A                     _setMotorPWM:
  1916                           	callstack 28
  1917   00129A                     
  1918                           ;dc_motor_v1.c: 75: void setMotorPWM(DC_motor *m);dc_motor_v1.c: 76: {;dc_motor_v1.c: 77
      +                          :     unsigned char posDuty, negDuty;;dc_motor_v1.c: 79:     if(m->brakemode) {
  1919   00129A  5041               	movf	setMotorPWM@m^0,w,c
  1920   00129C  6ED9               	movwf	fsr2l,c
  1921   00129E  6ADA               	clrf	fsr2h,c
  1922   0012A0  0E02               	movlw	2
  1923   0012A2  26D9               	addwf	fsr2l,f,c
  1924   0012A4  50DF               	movf	indf2,w,c
  1925   0012A6  B4D8               	btfsc	status,2,c
  1926   0012A8  EF58  F009         	goto	u1231
  1927   0012AC  EF5A  F009         	goto	u1230
  1928   0012B0                     u1231:
  1929   0012B0  EF8A  F009         	goto	l2009
  1930   0012B4                     u1230:
  1931   0012B4                     
  1932                           ;dc_motor_v1.c: 80:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperi
      +                          od))/100;
  1933   0012B4  5041               	movf	setMotorPWM@m^0,w,c
  1934   0012B6  6ED9               	movwf	fsr2l,c
  1935   0012B8  6ADA               	clrf	fsr2h,c
  1936   0012BA  50DF               	movf	indf2,w,c
  1937   0012BC  6E42               	movwf	??_setMotorPWM^0,c
  1938   0012BE  5042               	movf	??_setMotorPWM^0,w,c
  1939   0012C0  6E34               	movwf	___wmul@multiplier^0,c
  1940   0012C2  6A35               	clrf	(___wmul@multiplier+1)^0,c
  1941   0012C4  5041               	movf	setMotorPWM@m^0,w,c
  1942   0012C6  6ED9               	movwf	fsr2l,c
  1943   0012C8  6ADA               	clrf	fsr2h,c
  1944   0012CA  0E03               	movlw	3
  1945   0012CC  26D9               	addwf	fsr2l,f,c
  1946   0012CE  CFDE F036          	movff	postinc2,___wmul@multiplicand
  1947   0012D2  CFDD F037          	movff	postdec2,___wmul@multiplicand+1
  1948   0012D6  ECF6  F00C         	call	___wmul	;wreg free
  1949   0012DA  C034  F03A         	movff	?___wmul,___lwdiv@dividend
  1950   0012DE  C035  F03B         	movff	?___wmul+1,___lwdiv@dividend+1
  1951   0012E2  0E00               	movlw	0
  1952   0012E4  6E3D               	movwf	(___lwdiv@divisor+1)^0,c
  1953   0012E6  0E64               	movlw	100
  1954   0012E8  6E3C               	movwf	___lwdiv@divisor^0,c
  1955   0012EA  EC3A  F00C         	call	___lwdiv	;wreg free
  1956   0012EE  5041               	movf	setMotorPWM@m^0,w,c
  1957   0012F0  6ED9               	movwf	fsr2l,c
  1958   0012F2  6ADA               	clrf	fsr2h,c
  1959   0012F4  0E03               	movlw	3
  1960   0012F6  26D9               	addwf	fsr2l,f,c
  1961   0012F8  50DF               	movf	indf2,w,c
  1962   0012FA  6E43               	movwf	(??_setMotorPWM+1)^0,c
  1963   0012FC  503A               	movf	?___lwdiv^0,w,c
  1964   0012FE  5C43               	subwf	(??_setMotorPWM+1)^0,w,c
  1965   001300  6E44               	movwf	setMotorPWM@posDuty^0,c
  1966   001302                     
  1967                           ;dc_motor_v1.c: 81:         negDuty=m->PWMperiod;
  1968   001302  5041               	movf	setMotorPWM@m^0,w,c
  1969   001304  6ED9               	movwf	fsr2l,c
  1970   001306  6ADA               	clrf	fsr2h,c
  1971   001308  0E03               	movlw	3
  1972   00130A  26D9               	addwf	fsr2l,f,c
  1973   00130C  50DF               	movf	indf2,w,c
  1974   00130E  6E45               	movwf	setMotorPWM@negDuty^0,c
  1975                           
  1976                           ;dc_motor_v1.c: 82:     }
  1977   001310  EFAB  F009         	goto	l2013
  1978   001314                     l2009:
  1979                           
  1980                           ;dc_motor_v1.c: 84:         posDuty=0;
  1981   001314  0E00               	movlw	0
  1982   001316  6E44               	movwf	setMotorPWM@posDuty^0,c
  1983   001318                     
  1984                           ;dc_motor_v1.c: 85:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1985   001318  5041               	movf	setMotorPWM@m^0,w,c
  1986   00131A  6ED9               	movwf	fsr2l,c
  1987   00131C  6ADA               	clrf	fsr2h,c
  1988   00131E  50DF               	movf	indf2,w,c
  1989   001320  6E42               	movwf	??_setMotorPWM^0,c
  1990   001322  5042               	movf	??_setMotorPWM^0,w,c
  1991   001324  6E34               	movwf	___wmul@multiplier^0,c
  1992   001326  6A35               	clrf	(___wmul@multiplier+1)^0,c
  1993   001328  5041               	movf	setMotorPWM@m^0,w,c
  1994   00132A  6ED9               	movwf	fsr2l,c
  1995   00132C  6ADA               	clrf	fsr2h,c
  1996   00132E  0E03               	movlw	3
  1997   001330  26D9               	addwf	fsr2l,f,c
  1998   001332  CFDE F036          	movff	postinc2,___wmul@multiplicand
  1999   001336  CFDD F037          	movff	postdec2,___wmul@multiplicand+1
  2000   00133A  ECF6  F00C         	call	___wmul	;wreg free
  2001   00133E  C034  F03A         	movff	?___wmul,___lwdiv@dividend
  2002   001342  C035  F03B         	movff	?___wmul+1,___lwdiv@dividend+1
  2003   001346  0E00               	movlw	0
  2004   001348  6E3D               	movwf	(___lwdiv@divisor+1)^0,c
  2005   00134A  0E64               	movlw	100
  2006   00134C  6E3C               	movwf	___lwdiv@divisor^0,c
  2007   00134E  EC3A  F00C         	call	___lwdiv	;wreg free
  2008   001352  503A               	movf	?___lwdiv^0,w,c
  2009   001354  6E45               	movwf	setMotorPWM@negDuty^0,c
  2010   001356                     l2013:
  2011                           
  2012                           ;dc_motor_v1.c: 88:     if (m->direction) {
  2013   001356  5041               	movf	setMotorPWM@m^0,w,c
  2014   001358  6ED9               	movwf	fsr2l,c
  2015   00135A  6ADA               	clrf	fsr2h,c
  2016   00135C  0E01               	movlw	1
  2017   00135E  26D9               	addwf	fsr2l,f,c
  2018   001360  50DF               	movf	indf2,w,c
  2019   001362  B4D8               	btfsc	status,2,c
  2020   001364  EFB6  F009         	goto	u1241
  2021   001368  EFB8  F009         	goto	u1240
  2022   00136C                     u1241:
  2023   00136C  EFD8  F009         	goto	l2017
  2024   001370                     u1240:
  2025   001370                     
  2026                           ;dc_motor_v1.c: 89:         *(m->posDutyHighByte)=posDuty;
  2027   001370  5041               	movf	setMotorPWM@m^0,w,c
  2028   001372  6ED9               	movwf	fsr2l,c
  2029   001374  6ADA               	clrf	fsr2h,c
  2030   001376  0E05               	movlw	5
  2031   001378  26D9               	addwf	fsr2l,f,c
  2032   00137A  CFDE F042          	movff	postinc2,??_setMotorPWM
  2033   00137E  CFDD F043          	movff	postdec2,??_setMotorPWM+1
  2034   001382  C042  FFD9         	movff	??_setMotorPWM,fsr2l
  2035   001386  C043  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2036   00138A  C044  FFDF         	movff	setMotorPWM@posDuty,indf2
  2037                           
  2038                           ;dc_motor_v1.c: 90:         *(m->negDutyHighByte)=negDuty;
  2039   00138E  5041               	movf	setMotorPWM@m^0,w,c
  2040   001390  6ED9               	movwf	fsr2l,c
  2041   001392  6ADA               	clrf	fsr2h,c
  2042   001394  0E07               	movlw	7
  2043   001396  26D9               	addwf	fsr2l,f,c
  2044   001398  CFDE F042          	movff	postinc2,??_setMotorPWM
  2045   00139C  CFDD F043          	movff	postdec2,??_setMotorPWM+1
  2046   0013A0  C042  FFD9         	movff	??_setMotorPWM,fsr2l
  2047   0013A4  C043  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2048   0013A8  C045  FFDF         	movff	setMotorPWM@negDuty,indf2
  2049                           
  2050                           ;dc_motor_v1.c: 91:     } else {
  2051   0013AC  EFF6  F009         	goto	l240
  2052   0013B0                     l2017:
  2053                           
  2054                           ;dc_motor_v1.c: 92:         *(m->posDutyHighByte)=negDuty;
  2055   0013B0  5041               	movf	setMotorPWM@m^0,w,c
  2056   0013B2  6ED9               	movwf	fsr2l,c
  2057   0013B4  6ADA               	clrf	fsr2h,c
  2058   0013B6  0E05               	movlw	5
  2059   0013B8  26D9               	addwf	fsr2l,f,c
  2060   0013BA  CFDE F042          	movff	postinc2,??_setMotorPWM
  2061   0013BE  CFDD F043          	movff	postdec2,??_setMotorPWM+1
  2062   0013C2  C042  FFD9         	movff	??_setMotorPWM,fsr2l
  2063   0013C6  C043  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2064   0013CA  C045  FFDF         	movff	setMotorPWM@negDuty,indf2
  2065                           
  2066                           ;dc_motor_v1.c: 93:         *(m->negDutyHighByte)=posDuty;
  2067   0013CE  5041               	movf	setMotorPWM@m^0,w,c
  2068   0013D0  6ED9               	movwf	fsr2l,c
  2069   0013D2  6ADA               	clrf	fsr2h,c
  2070   0013D4  0E07               	movlw	7
  2071   0013D6  26D9               	addwf	fsr2l,f,c
  2072   0013D8  CFDE F042          	movff	postinc2,??_setMotorPWM
  2073   0013DC  CFDD F043          	movff	postdec2,??_setMotorPWM+1
  2074   0013E0  C042  FFD9         	movff	??_setMotorPWM,fsr2l
  2075   0013E4  C043  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2076   0013E8  C044  FFDF         	movff	setMotorPWM@posDuty,indf2
  2077   0013EC                     l240:
  2078   0013EC  0012               	return		;funcret
  2079   0013EE                     __end_of_setMotorPWM:
  2080                           	callstack 0
  2081                           
  2082 ;; *************** function ___wmul *****************
  2083 ;; Defined at:
  2084 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;  multiplier      2    0[COMRAM] unsigned int 
  2087 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;  product         2    4[COMRAM] unsigned int 
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  2    0[COMRAM] unsigned int 
  2092 ;; Registers used:
  2093 ;;		wreg, status,2, status,0, prodl, prodh
  2094 ;; Tracked objects:
  2095 ;;		On entry : 0/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2099 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2100 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2102 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2103 ;;Total ram usage:        6 bytes
  2104 ;; Hardware stack levels used: 1
  2105 ;; This function calls:
  2106 ;;		Nothing
  2107 ;; This function is called by:
  2108 ;;		_setMotorPWM
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           	psect	text7
  2113   0019EC                     __ptext7:
  2114                           	callstack 0
  2115   0019EC                     ___wmul:
  2116                           	callstack 28
  2117   0019EC  5034               	movf	___wmul@multiplier^0,w,c
  2118   0019EE  0236               	mulwf	___wmul@multiplicand^0,c
  2119   0019F0  CFF3 F038          	movff	prodl,___wmul@product
  2120   0019F4  CFF4 F039          	movff	prodh,___wmul@product+1
  2121   0019F8  5034               	movf	___wmul@multiplier^0,w,c
  2122   0019FA  0237               	mulwf	(___wmul@multiplicand+1)^0,c
  2123   0019FC  50F3               	movf	243,w,c
  2124   0019FE  2639               	addwf	(___wmul@product+1)^0,f,c
  2125   001A00  5035               	movf	(___wmul@multiplier+1)^0,w,c
  2126   001A02  0236               	mulwf	___wmul@multiplicand^0,c
  2127   001A04  50F3               	movf	243,w,c
  2128   001A06  2639               	addwf	(___wmul@product+1)^0,f,c
  2129   001A08  C038  F034         	movff	___wmul@product,?___wmul
  2130   001A0C  C039  F035         	movff	___wmul@product+1,?___wmul+1
  2131   001A10  0012               	return		;funcret
  2132   001A12                     __end_of___wmul:
  2133                           	callstack 0
  2134                           
  2135 ;; *************** function ___lwdiv *****************
  2136 ;; Defined at:
  2137 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  dividend        2    6[COMRAM] unsigned int 
  2140 ;;  divisor         2    8[COMRAM] unsigned int 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;  quotient        2   10[COMRAM] unsigned int 
  2143 ;;  counter         1   12[COMRAM] unsigned char 
  2144 ;; Return value:  Size  Location     Type
  2145 ;;                  2    6[COMRAM] unsigned int 
  2146 ;; Registers used:
  2147 ;;		wreg, status,2, status,0
  2148 ;; Tracked objects:
  2149 ;;		On entry : 0/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2153 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2154 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2156 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2157 ;;Total ram usage:        7 bytes
  2158 ;; Hardware stack levels used: 1
  2159 ;; This function calls:
  2160 ;;		Nothing
  2161 ;; This function is called by:
  2162 ;;		_setMotorPWM
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text8
  2167   001874                     __ptext8:
  2168                           	callstack 0
  2169   001874                     ___lwdiv:
  2170                           	callstack 28
  2171   001874  0E00               	movlw	0
  2172   001876  6E3F               	movwf	(___lwdiv@quotient+1)^0,c
  2173   001878  0E00               	movlw	0
  2174   00187A  6E3E               	movwf	___lwdiv@quotient^0,c
  2175   00187C  503C               	movf	___lwdiv@divisor^0,w,c
  2176   00187E  103D               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2177   001880  B4D8               	btfsc	status,2,c
  2178   001882  EF45  F00C         	goto	u1191
  2179   001886  EF47  F00C         	goto	u1190
  2180   00188A                     u1191:
  2181   00188A  EF6F  F00C         	goto	l970
  2182   00188E                     u1190:
  2183   00188E  0E01               	movlw	1
  2184   001890  6E40               	movwf	___lwdiv@counter^0,c
  2185   001892  EF4F  F00C         	goto	l1981
  2186   001896                     l1979:
  2187   001896  90D8               	bcf	status,0,c
  2188   001898  363C               	rlcf	___lwdiv@divisor^0,f,c
  2189   00189A  363D               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2190   00189C  2A40               	incf	___lwdiv@counter^0,f,c
  2191   00189E                     l1981:
  2192   00189E  AE3D               	btfss	(___lwdiv@divisor+1)^0,7,c
  2193   0018A0  EF54  F00C         	goto	u1201
  2194   0018A4  EF56  F00C         	goto	u1200
  2195   0018A8                     u1201:
  2196   0018A8  EF4B  F00C         	goto	l1979
  2197   0018AC                     u1200:
  2198   0018AC                     l1983:
  2199   0018AC  90D8               	bcf	status,0,c
  2200   0018AE  363E               	rlcf	___lwdiv@quotient^0,f,c
  2201   0018B0  363F               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2202   0018B2  503C               	movf	___lwdiv@divisor^0,w,c
  2203   0018B4  5C3A               	subwf	___lwdiv@dividend^0,w,c
  2204   0018B6  503D               	movf	(___lwdiv@divisor+1)^0,w,c
  2205   0018B8  583B               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2206   0018BA  A0D8               	btfss	status,0,c
  2207   0018BC  EF62  F00C         	goto	u1211
  2208   0018C0  EF64  F00C         	goto	u1210
  2209   0018C4                     u1211:
  2210   0018C4  EF69  F00C         	goto	l1991
  2211   0018C8                     u1210:
  2212   0018C8  503C               	movf	___lwdiv@divisor^0,w,c
  2213   0018CA  5E3A               	subwf	___lwdiv@dividend^0,f,c
  2214   0018CC  503D               	movf	(___lwdiv@divisor+1)^0,w,c
  2215   0018CE  5A3B               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2216   0018D0  803E               	bsf	___lwdiv@quotient^0,0,c
  2217   0018D2                     l1991:
  2218   0018D2  90D8               	bcf	status,0,c
  2219   0018D4  323D               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2220   0018D6  323C               	rrcf	___lwdiv@divisor^0,f,c
  2221   0018D8  2E40               	decfsz	___lwdiv@counter^0,f,c
  2222   0018DA  EF56  F00C         	goto	l1983
  2223   0018DE                     l970:
  2224   0018DE  C03E  F03A         	movff	___lwdiv@quotient,?___lwdiv
  2225   0018E2  C03F  F03B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2226   0018E6  0012               	return		;funcret
  2227   0018E8                     __end_of___lwdiv:
  2228                           	callstack 0
  2229                           
  2230 ;; *************** function _delay_ms_function *****************
  2231 ;; Defined at:
  2232 ;;		line 67 in file "dc_motor_v1.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;  milliseconds    2    0[COMRAM] unsigned int 
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;		None
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      void 
  2239 ;; Registers used:
  2240 ;;		wreg, status,2, status,0
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2246 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2248 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2249 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2250 ;;Total ram usage:        3 bytes
  2251 ;; Hardware stack levels used: 1
  2252 ;; This function calls:
  2253 ;;		Nothing
  2254 ;; This function is called by:
  2255 ;;		_forward
  2256 ;;		_turnLEFT
  2257 ;;		_turnRIGHT
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text9
  2262   00196C                     __ptext9:
  2263                           	callstack 0
  2264   00196C                     _delay_ms_function:
  2265                           	callstack 29
  2266   00196C                     
  2267                           ;dc_motor_v1.c: 68:     while (milliseconds > 0) {
  2268   00196C  EFC3  F00C         	goto	l230
  2269   001970                     l1999:
  2270                           
  2271                           ;dc_motor_v1.c: 69:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2272   001970  0E15               	movlw	21
  2273   001972  6E36               	movwf	??_delay_ms_function^0,c
  2274   001974  0EC6               	movlw	198
  2275   001976                     u1747:
  2276   001976  2EE8               	decfsz	wreg,f,c
  2277   001978  D7FE               	bra	u1747
  2278   00197A  2E36               	decfsz	??_delay_ms_function^0,f,c
  2279   00197C  D7FC               	bra	u1747
  2280   00197E  D000               	nop2	
  2281   001980                     
  2282                           ;dc_motor_v1.c: 70:         milliseconds--;
  2283   001980  0634               	decf	delay_ms_function@milliseconds^0,f,c
  2284   001982  A0D8               	btfss	status,0,c
  2285   001984  0635               	decf	(delay_ms_function@milliseconds+1)^0,f,c
  2286   001986                     l230:
  2287                           
  2288                           ;dc_motor_v1.c: 68:     while (milliseconds > 0) {
  2289   001986  5034               	movf	delay_ms_function@milliseconds^0,w,c
  2290   001988  1035               	iorwf	(delay_ms_function@milliseconds+1)^0,w,c
  2291   00198A  A4D8               	btfss	status,2,c
  2292   00198C  EFCA  F00C         	goto	u1221
  2293   001990  EFCC  F00C         	goto	u1220
  2294   001994                     u1221:
  2295   001994  EFB8  F00C         	goto	l1999
  2296   001998                     u1220:
  2297   001998  0012               	return		;funcret
  2298   00199A                     __end_of_delay_ms_function:
  2299                           	callstack 0
  2300                           
  2301 ;; *************** function ___awdiv *****************
  2302 ;; Defined at:
  2303 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2304 ;; Parameters:    Size  Location     Type
  2305 ;;  dividend        2    0[COMRAM] int 
  2306 ;;  divisor         2    2[COMRAM] int 
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;  quotient        2    6[COMRAM] int 
  2309 ;;  sign            1    5[COMRAM] unsigned char 
  2310 ;;  counter         1    4[COMRAM] unsigned char 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  2    0[COMRAM] int 
  2313 ;; Registers used:
  2314 ;;		wreg, status,2, status,0
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2320 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2321 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2323 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2324 ;;Total ram usage:        8 bytes
  2325 ;; Hardware stack levels used: 1
  2326 ;; This function calls:
  2327 ;;		Nothing
  2328 ;; This function is called by:
  2329 ;;		_forward
  2330 ;;		_turnLEFT
  2331 ;;		_turnRIGHT
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           	psect	text10
  2336   00166E                     __ptext10:
  2337                           	callstack 0
  2338   00166E                     ___awdiv:
  2339                           	callstack 29
  2340   00166E  0E00               	movlw	0
  2341   001670  6E39               	movwf	___awdiv@sign^0,c
  2342   001672  BE37               	btfsc	(___awdiv@divisor+1)^0,7,c
  2343   001674  EF40  F00B         	goto	u1250
  2344   001678  EF3E  F00B         	goto	u1251
  2345   00167C                     u1251:
  2346   00167C  EF46  F00B         	goto	l2027
  2347   001680                     u1250:
  2348   001680  6C36               	negf	___awdiv@divisor^0,c
  2349   001682  1E37               	comf	(___awdiv@divisor+1)^0,f,c
  2350   001684  B0D8               	btfsc	status,0,c
  2351   001686  2A37               	incf	(___awdiv@divisor+1)^0,f,c
  2352   001688  0E01               	movlw	1
  2353   00168A  6E39               	movwf	___awdiv@sign^0,c
  2354   00168C                     l2027:
  2355   00168C  BE35               	btfsc	(___awdiv@dividend+1)^0,7,c
  2356   00168E  EF4D  F00B         	goto	u1260
  2357   001692  EF4B  F00B         	goto	u1261
  2358   001696                     u1261:
  2359   001696  EF53  F00B         	goto	l2033
  2360   00169A                     u1260:
  2361   00169A  6C34               	negf	___awdiv@dividend^0,c
  2362   00169C  1E35               	comf	(___awdiv@dividend+1)^0,f,c
  2363   00169E  B0D8               	btfsc	status,0,c
  2364   0016A0  2A35               	incf	(___awdiv@dividend+1)^0,f,c
  2365   0016A2  0E01               	movlw	1
  2366   0016A4  1A39               	xorwf	___awdiv@sign^0,f,c
  2367   0016A6                     l2033:
  2368   0016A6  0E00               	movlw	0
  2369   0016A8  6E3B               	movwf	(___awdiv@quotient+1)^0,c
  2370   0016AA  0E00               	movlw	0
  2371   0016AC  6E3A               	movwf	___awdiv@quotient^0,c
  2372   0016AE  5036               	movf	___awdiv@divisor^0,w,c
  2373   0016B0  1037               	iorwf	(___awdiv@divisor+1)^0,w,c
  2374   0016B2  B4D8               	btfsc	status,2,c
  2375   0016B4  EF5E  F00B         	goto	u1271
  2376   0016B8  EF60  F00B         	goto	u1270
  2377   0016BC                     u1271:
  2378   0016BC  EF88  F00B         	goto	l2055
  2379   0016C0                     u1270:
  2380   0016C0  0E01               	movlw	1
  2381   0016C2  6E38               	movwf	___awdiv@counter^0,c
  2382   0016C4  EF68  F00B         	goto	l2041
  2383   0016C8                     l2039:
  2384   0016C8  90D8               	bcf	status,0,c
  2385   0016CA  3636               	rlcf	___awdiv@divisor^0,f,c
  2386   0016CC  3637               	rlcf	(___awdiv@divisor+1)^0,f,c
  2387   0016CE  2A38               	incf	___awdiv@counter^0,f,c
  2388   0016D0                     l2041:
  2389   0016D0  AE37               	btfss	(___awdiv@divisor+1)^0,7,c
  2390   0016D2  EF6D  F00B         	goto	u1281
  2391   0016D6  EF6F  F00B         	goto	u1280
  2392   0016DA                     u1281:
  2393   0016DA  EF64  F00B         	goto	l2039
  2394   0016DE                     u1280:
  2395   0016DE                     l2043:
  2396   0016DE  90D8               	bcf	status,0,c
  2397   0016E0  363A               	rlcf	___awdiv@quotient^0,f,c
  2398   0016E2  363B               	rlcf	(___awdiv@quotient+1)^0,f,c
  2399   0016E4  5036               	movf	___awdiv@divisor^0,w,c
  2400   0016E6  5C34               	subwf	___awdiv@dividend^0,w,c
  2401   0016E8  5037               	movf	(___awdiv@divisor+1)^0,w,c
  2402   0016EA  5835               	subwfb	(___awdiv@dividend+1)^0,w,c
  2403   0016EC  A0D8               	btfss	status,0,c
  2404   0016EE  EF7B  F00B         	goto	u1291
  2405   0016F2  EF7D  F00B         	goto	u1290
  2406   0016F6                     u1291:
  2407   0016F6  EF82  F00B         	goto	l2051
  2408   0016FA                     u1290:
  2409   0016FA  5036               	movf	___awdiv@divisor^0,w,c
  2410   0016FC  5E34               	subwf	___awdiv@dividend^0,f,c
  2411   0016FE  5037               	movf	(___awdiv@divisor+1)^0,w,c
  2412   001700  5A35               	subwfb	(___awdiv@dividend+1)^0,f,c
  2413   001702  803A               	bsf	___awdiv@quotient^0,0,c
  2414   001704                     l2051:
  2415   001704  90D8               	bcf	status,0,c
  2416   001706  3237               	rrcf	(___awdiv@divisor+1)^0,f,c
  2417   001708  3236               	rrcf	___awdiv@divisor^0,f,c
  2418   00170A  2E38               	decfsz	___awdiv@counter^0,f,c
  2419   00170C  EF6F  F00B         	goto	l2043
  2420   001710                     l2055:
  2421   001710  5039               	movf	___awdiv@sign^0,w,c
  2422   001712  B4D8               	btfsc	status,2,c
  2423   001714  EF8E  F00B         	goto	u1301
  2424   001718  EF90  F00B         	goto	u1300
  2425   00171C                     u1301:
  2426   00171C  EF94  F00B         	goto	l2059
  2427   001720                     u1300:
  2428   001720  6C3A               	negf	___awdiv@quotient^0,c
  2429   001722  1E3B               	comf	(___awdiv@quotient+1)^0,f,c
  2430   001724  B0D8               	btfsc	status,0,c
  2431   001726  2A3B               	incf	(___awdiv@quotient+1)^0,f,c
  2432   001728                     l2059:
  2433   001728  C03A  F034         	movff	___awdiv@quotient,?___awdiv
  2434   00172C  C03B  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  2435   001730  0012               	return		;funcret
  2436   001732                     __end_of___awdiv:
  2437                           	callstack 0
  2438                           
  2439 ;; *************** function _color_click_init *****************
  2440 ;; Defined at:
  2441 ;;		line 7 in file "color.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;		None
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;		None
  2446 ;; Return value:  Size  Location     Type
  2447 ;;                  1    wreg      void 
  2448 ;; Registers used:
  2449 ;;		wreg, status,2, status,0, cstack
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2457 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2458 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2459 ;;Total ram usage:        1 bytes
  2460 ;; Hardware stack levels used: 1
  2461 ;; Hardware stack levels required when called: 3
  2462 ;; This function calls:
  2463 ;;		_I2C_2_Master_Init
  2464 ;;		_color_writetoaddr
  2465 ;; This function is called by:
  2466 ;;		_main
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text11
  2471   0018E8                     __ptext11:
  2472                           	callstack 0
  2473   0018E8                     _color_click_init:
  2474                           	callstack 27
  2475   0018E8                     
  2476                           ;color.c: 10:     I2C_2_Master_Init();
  2477   0018E8  ECCD  F00C         	call	_I2C_2_Master_Init	;wreg free
  2478   0018EC                     
  2479                           ;color.c: 13:   color_writetoaddr(0x00, 0x01);
  2480   0018EC  0E01               	movlw	1
  2481   0018EE  6E36               	movwf	color_writetoaddr@value^0,c
  2482   0018F0  0E00               	movlw	0
  2483   0018F2  EC09  F00D         	call	_color_writetoaddr
  2484   0018F6                     
  2485                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2486   0018F6  0E3F               	movlw	63
  2487   0018F8  6E38               	movwf	??_color_click_init^0,c
  2488   0018FA  0E55               	movlw	85
  2489   0018FC                     u1757:
  2490   0018FC  2EE8               	decfsz	wreg,f,c
  2491   0018FE  D7FE               	bra	u1757
  2492   001900  2E38               	decfsz	??_color_click_init^0,f,c
  2493   001902  D7FC               	bra	u1757
  2494   001904  0000               	nop	
  2495   001906                     
  2496                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  2497   001906  0E03               	movlw	3
  2498   001908  6E36               	movwf	color_writetoaddr@value^0,c
  2499   00190A  0E00               	movlw	0
  2500   00190C  EC09  F00D         	call	_color_writetoaddr
  2501   001910                     
  2502                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  2503   001910  0ED5               	movlw	213
  2504   001912  6E36               	movwf	color_writetoaddr@value^0,c
  2505   001914  0E01               	movlw	1
  2506   001916  EC09  F00D         	call	_color_writetoaddr
  2507   00191A                     
  2508                           ;color.c: 25:     TRISGbits.TRISG1 = 0;
  2509   00191A  9287               	bcf	135,1,c	;volatile
  2510   00191C                     
  2511                           ;color.c: 26:     TRISAbits.TRISA4 = 0;
  2512   00191C  9881               	bcf	129,4,c	;volatile
  2513   00191E                     
  2514                           ;color.c: 27:     TRISFbits.TRISF7 = 0;
  2515   00191E  9E86               	bcf	134,7,c	;volatile
  2516   001920                     
  2517                           ;color.c: 30:     LATGbits.LATG1 = 1;
  2518   001920  827F               	bsf	127,1,c	;volatile
  2519   001922                     
  2520                           ;color.c: 31:     LATAbits.LATA4 = 1;
  2521   001922  8879               	bsf	121,4,c	;volatile
  2522   001924                     
  2523                           ;color.c: 32:     LATFbits.LATF7 = 1;
  2524   001924  8E7E               	bsf	126,7,c	;volatile
  2525   001926                     
  2526                           ;color.c: 35:     TRISHbits.TRISH1 = 0;
  2527   001926  9288               	bcf	136,1,c	;volatile
  2528   001928                     
  2529                           ;color.c: 36:     LATHbits.LATH1 = 1;
  2530   001928  8280               	bsf	128,1,c	;volatile
  2531   00192A                     
  2532                           ;color.c: 38:     TRISDbits.TRISD4 = 0;
  2533   00192A  9884               	bcf	132,4,c	;volatile
  2534   00192C                     
  2535                           ;color.c: 39:     LATDbits.LATD4 = 1;
  2536   00192C  887C               	bsf	124,4,c	;volatile
  2537   00192E                     
  2538                           ;color.c: 41:     TRISDbits.TRISD3 = 0;
  2539   00192E  9684               	bcf	132,3,c	;volatile
  2540   001930                     
  2541                           ;color.c: 42:     LATDbits.LATD3 = 1;
  2542   001930  867C               	bsf	124,3,c	;volatile
  2543   001932  0012               	return		;funcret
  2544   001934                     __end_of_color_click_init:
  2545                           	callstack 0
  2546                           
  2547 ;; *************** function _color_writetoaddr *****************
  2548 ;; Defined at:
  2549 ;;		line 45 in file "color.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;  address         1    wreg     unsigned char 
  2552 ;;  value           1    2[COMRAM] unsigned char 
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;  address         1    3[COMRAM] unsigned char 
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  1    wreg      void 
  2557 ;; Registers used:
  2558 ;;		wreg, status,2, status,0, cstack
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2564 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2565 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2567 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2568 ;;Total ram usage:        2 bytes
  2569 ;; Hardware stack levels used: 1
  2570 ;; Hardware stack levels required when called: 2
  2571 ;; This function calls:
  2572 ;;		_I2C_2_Master_Start
  2573 ;;		_I2C_2_Master_Stop
  2574 ;;		_I2C_2_Master_Write
  2575 ;; This function is called by:
  2576 ;;		_color_click_init
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text12
  2581   001A12                     __ptext12:
  2582                           	callstack 0
  2583   001A12                     _color_writetoaddr:
  2584                           	callstack 27
  2585                           
  2586                           ;incstack = 0
  2587                           ;color_writetoaddr@address stored from wreg
  2588   001A12  6E37               	movwf	color_writetoaddr@address^0,c
  2589   001A14                     
  2590                           ;color.c: 46:     I2C_2_Master_Start();
  2591   001A14  EC24  F00D         	call	_I2C_2_Master_Start	;wreg free
  2592                           
  2593                           ;color.c: 47:     I2C_2_Master_Write(0x52 | 0x00);
  2594   001A18  0E52               	movlw	82
  2595   001A1A  EC19  F00D         	call	_I2C_2_Master_Write
  2596                           
  2597                           ;color.c: 48:     I2C_2_Master_Write(0x80 | address);
  2598   001A1E  5037               	movf	color_writetoaddr@address^0,w,c
  2599   001A20  0980               	iorlw	128
  2600   001A22  EC19  F00D         	call	_I2C_2_Master_Write
  2601                           
  2602                           ;color.c: 49:     I2C_2_Master_Write(value);
  2603   001A26  5036               	movf	color_writetoaddr@value^0,w,c
  2604   001A28  EC19  F00D         	call	_I2C_2_Master_Write
  2605                           
  2606                           ;color.c: 50:     I2C_2_Master_Stop();
  2607   001A2C  EC1F  F00D         	call	_I2C_2_Master_Stop	;wreg free
  2608   001A30  0012               	return		;funcret
  2609   001A32                     __end_of_color_writetoaddr:
  2610                           	callstack 0
  2611                           
  2612 ;; *************** function _I2C_2_Master_Write *****************
  2613 ;; Defined at:
  2614 ;;		line 45 in file "i2c.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;  data_byte       1    wreg     unsigned char 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;  data_byte       1    1[COMRAM] unsigned char 
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  1    wreg      void 
  2621 ;; Registers used:
  2622 ;;		wreg, status,2, status,0, cstack
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2629 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2631 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2632 ;;Total ram usage:        1 bytes
  2633 ;; Hardware stack levels used: 1
  2634 ;; Hardware stack levels required when called: 1
  2635 ;; This function calls:
  2636 ;;		_I2C_2_Master_Idle
  2637 ;; This function is called by:
  2638 ;;		_color_writetoaddr
  2639 ;;		_color_read_Red
  2640 ;;		_color_read_Green
  2641 ;;		_color_read_Blue
  2642 ;;		_color_read_Clear
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text13
  2647   001A32                     __ptext13:
  2648                           	callstack 0
  2649   001A32                     _I2C_2_Master_Write:
  2650                           	callstack 27
  2651                           
  2652                           ;incstack = 0
  2653                           ;I2C_2_Master_Write@data_byte stored from wreg
  2654   001A32  6E35               	movwf	I2C_2_Master_Write@data_byte^0,c
  2655   001A34                     
  2656                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  2657   001A34  ECE2  F00C         	call	_I2C_2_Master_Idle	;wreg free
  2658   001A38                     
  2659                           ;i2c.c: 48:   SSP2BUF = data_byte;
  2660   001A38  C035  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  2661   001A3C  0012               	return		;funcret
  2662   001A3E                     __end_of_I2C_2_Master_Write:
  2663                           	callstack 0
  2664                           
  2665 ;; *************** function _I2C_2_Master_Stop *****************
  2666 ;; Defined at:
  2667 ;;		line 39 in file "i2c.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;		None
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2, status,0, cstack
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2685 ;;Total ram usage:        0 bytes
  2686 ;; Hardware stack levels used: 1
  2687 ;; Hardware stack levels required when called: 1
  2688 ;; This function calls:
  2689 ;;		_I2C_2_Master_Idle
  2690 ;; This function is called by:
  2691 ;;		_color_writetoaddr
  2692 ;;		_color_read_Red
  2693 ;;		_color_read_Green
  2694 ;;		_color_read_Blue
  2695 ;;		_color_read_Clear
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text14
  2700   001A3E                     __ptext14:
  2701                           	callstack 0
  2702   001A3E                     _I2C_2_Master_Stop:
  2703                           	callstack 27
  2704   001A3E                     
  2705                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2706   001A3E  ECE2  F00C         	call	_I2C_2_Master_Idle	;wreg free
  2707   001A42                     
  2708                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2709   001A42  010E               	movlb	14	; () banked
  2710   001A44  85DA               	bsf	218,2,b	;volatile
  2711   001A46                     
  2712                           ; BSR set to: 14
  2713   001A46  0012               	return		;funcret
  2714   001A48                     __end_of_I2C_2_Master_Stop:
  2715                           	callstack 0
  2716                           
  2717 ;; *************** function _I2C_2_Master_Start *****************
  2718 ;; Defined at:
  2719 ;;		line 27 in file "i2c.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;		None
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;		None
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  1    wreg      void 
  2726 ;; Registers used:
  2727 ;;		wreg, status,2, status,0, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2737 ;;Total ram usage:        0 bytes
  2738 ;; Hardware stack levels used: 1
  2739 ;; Hardware stack levels required when called: 1
  2740 ;; This function calls:
  2741 ;;		_I2C_2_Master_Idle
  2742 ;; This function is called by:
  2743 ;;		_color_writetoaddr
  2744 ;;		_color_read_Red
  2745 ;;		_color_read_Green
  2746 ;;		_color_read_Blue
  2747 ;;		_color_read_Clear
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text15
  2752   001A48                     __ptext15:
  2753                           	callstack 0
  2754   001A48                     _I2C_2_Master_Start:
  2755                           	callstack 27
  2756   001A48                     
  2757                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2758   001A48  ECE2  F00C         	call	_I2C_2_Master_Idle	;wreg free
  2759   001A4C                     
  2760                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2761   001A4C  010E               	movlb	14	; () banked
  2762   001A4E  81DA               	bsf	218,0,b	;volatile
  2763   001A50                     
  2764                           ; BSR set to: 14
  2765   001A50  0012               	return		;funcret
  2766   001A52                     __end_of_I2C_2_Master_Start:
  2767                           	callstack 0
  2768                           
  2769 ;; *************** function _I2C_2_Master_Idle *****************
  2770 ;; Defined at:
  2771 ;;		line 22 in file "i2c.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		wreg, status,2, status,0
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2787 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2788 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2789 ;;Total ram usage:        1 bytes
  2790 ;; Hardware stack levels used: 1
  2791 ;; This function calls:
  2792 ;;		Nothing
  2793 ;; This function is called by:
  2794 ;;		_I2C_2_Master_Start
  2795 ;;		_I2C_2_Master_Stop
  2796 ;;		_I2C_2_Master_Write
  2797 ;;		_I2C_2_Master_RepStart
  2798 ;;		_I2C_2_Master_Read
  2799 ;; This function uses a non-reentrant model
  2800 ;;
  2801                           
  2802                           	psect	text16
  2803   0019C4                     __ptext16:
  2804                           	callstack 0
  2805   0019C4                     _I2C_2_Master_Idle:
  2806                           	callstack 27
  2807   0019C4                     l320:
  2808   0019C4  010E               	movlb	14	; () banked
  2809   0019C6  B5D8               	btfsc	216,2,b	;volatile
  2810   0019C8  EFE8  F00C         	goto	u11
  2811   0019CC  EFEA  F00C         	goto	u10
  2812   0019D0                     u11:
  2813   0019D0  EFE2  F00C         	goto	l320
  2814   0019D4                     u10:
  2815   0019D4                     
  2816                           ; BSR set to: 14
  2817   0019D4  CEDA F034          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2818   0019D8  0E1F               	movlw	31
  2819   0019DA  1634               	andwf	??_I2C_2_Master_Idle^0,f,c
  2820   0019DC  A4D8               	btfss	status,2,c
  2821   0019DE  EFF3  F00C         	goto	u21
  2822   0019E2  EFF5  F00C         	goto	u20
  2823   0019E6                     u21:
  2824   0019E6  EFE2  F00C         	goto	l320
  2825   0019EA                     u20:
  2826   0019EA                     
  2827                           ; BSR set to: 14
  2828   0019EA  0012               	return		;funcret
  2829   0019EC                     __end_of_I2C_2_Master_Idle:
  2830                           	callstack 0
  2831                           
  2832 ;; *************** function _I2C_2_Master_Init *****************
  2833 ;; Defined at:
  2834 ;;		line 4 in file "i2c.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;		None
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;		None
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      void 
  2841 ;; Registers used:
  2842 ;;		wreg, status,2
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2852 ;;Total ram usage:        0 bytes
  2853 ;; Hardware stack levels used: 1
  2854 ;; This function calls:
  2855 ;;		Nothing
  2856 ;; This function is called by:
  2857 ;;		_color_click_init
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	text17
  2862   00199A                     __ptext17:
  2863                           	callstack 0
  2864   00199A                     _I2C_2_Master_Init:
  2865                           	callstack 29
  2866   00199A                     
  2867                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2868   00199A  010E               	movlb	14	; () banked
  2869   00199C  51D9               	movf	217,w,b	;volatile
  2870   00199E  0BF0               	andlw	-16
  2871   0019A0  0908               	iorlw	8
  2872   0019A2  6FD9               	movwf	217,b	;volatile
  2873   0019A4                     
  2874                           ; BSR set to: 14
  2875                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2876   0019A4  8BD9               	bsf	217,5,b	;volatile
  2877                           
  2878                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2879   0019A6  0E9F               	movlw	159
  2880   0019A8  6FD6               	movwf	214,b	;volatile
  2881   0019AA                     
  2882                           ; BSR set to: 14
  2883                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2884   0019AA  8A84               	bsf	132,5,c	;volatile
  2885   0019AC                     
  2886                           ; BSR set to: 14
  2887                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2888   0019AC  8C84               	bsf	132,6,c	;volatile
  2889   0019AE                     
  2890                           ; BSR set to: 14
  2891                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2892   0019AE  9BA7               	bcf	167,5,b	;volatile
  2893   0019B0                     
  2894                           ; BSR set to: 14
  2895                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2896   0019B0  9DA7               	bcf	167,6,b	;volatile
  2897                           
  2898                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2899   0019B2  0E1D               	movlw	29
  2900   0019B4  6F1D               	movwf	29,b	;volatile
  2901                           
  2902                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2903   0019B6  0E1E               	movlw	30
  2904   0019B8  6F1C               	movwf	28,b	;volatile
  2905                           
  2906                           ;i2c.c: 18:   RD5PPS=0x1C;
  2907   0019BA  0E1C               	movlw	28
  2908   0019BC  6F6F               	movwf	111,b	;volatile
  2909                           
  2910                           ;i2c.c: 19:   RD6PPS=0x1B;
  2911   0019BE  0E1B               	movlw	27
  2912   0019C0  6F70               	movwf	112,b	;volatile
  2913   0019C2                     
  2914                           ; BSR set to: 14
  2915   0019C2  0012               	return		;funcret
  2916   0019C4                     __end_of_I2C_2_Master_Init:
  2917                           	callstack 0
  2918                           
  2919 ;; *************** function _adjust_calibration *****************
  2920 ;; Defined at:
  2921 ;;		line 6 in file "calibration.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;  calibration_    1    0[COMRAM] PTR int 
  2924 ;;		 -> calibration(9), 
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;		None
  2927 ;; Return value:  Size  Location     Type
  2928 ;;                  1    wreg      void 
  2929 ;; Registers used:
  2930 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2936 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2938 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2939 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2940 ;;Total ram usage:        5 bytes
  2941 ;; Hardware stack levels used: 1
  2942 ;; This function calls:
  2943 ;;		Nothing
  2944 ;; This function is called by:
  2945 ;;		_main
  2946 ;; This function uses a non-reentrant model
  2947 ;;
  2948                           
  2949                           	psect	text18
  2950   0013EE                     __ptext18:
  2951                           	callstack 0
  2952   0013EE                     _adjust_calibration:
  2953                           	callstack 30
  2954   0013EE                     l19:
  2955                           
  2956                           ;calibration.c: 11:         if(!PORTFbits.RF3 || !PORTFbits.RF2){
  2957   0013EE  A68E               	btfss	142,3,c	;volatile
  2958   0013F0  EFFC  F009         	goto	u1311
  2959   0013F4  EFFE  F009         	goto	u1310
  2960   0013F8                     u1311:
  2961   0013F8  EF05  F00A         	goto	l2065
  2962   0013FC                     u1310:
  2963   0013FC  B48E               	btfsc	142,2,c	;volatile
  2964   0013FE  EF03  F00A         	goto	u1321
  2965   001402  EF05  F00A         	goto	u1320
  2966   001406                     u1321:
  2967   001406  EFF7  F009         	goto	l19
  2968   00140A                     u1320:
  2969   00140A                     l2065:
  2970                           
  2971                           ;calibration.c: 12:             _delay((unsigned long)((100)*(64000000/4000.0)));
  2972   00140A  0E09               	movlw	9
  2973   00140C  6E36               	movwf	(??_adjust_calibration+1)^0,c
  2974   00140E  0E1E               	movlw	30
  2975   001410  6E35               	movwf	??_adjust_calibration^0,c
  2976   001412  0EE4               	movlw	228
  2977   001414                     u1767:
  2978   001414  2EE8               	decfsz	wreg,f,c
  2979   001416  D7FE               	bra	u1767
  2980   001418  2E35               	decfsz	??_adjust_calibration^0,f,c
  2981   00141A  D7FC               	bra	u1767
  2982   00141C  2E36               	decfsz	(??_adjust_calibration+1)^0,f,c
  2983   00141E  D7FA               	bra	u1767
  2984   001420  D000               	nop2	
  2985   001422                     
  2986                           ;calibration.c: 14:             if(!PORTFbits.RF3 && !PORTFbits.RF2 ){
  2987   001422  B68E               	btfsc	142,3,c	;volatile
  2988   001424  EF16  F00A         	goto	u1331
  2989   001428  EF18  F00A         	goto	u1330
  2990   00142C                     u1331:
  2991   00142C  EF31  F00A         	goto	l23
  2992   001430                     u1330:
  2993   001430  B48E               	btfsc	142,2,c	;volatile
  2994   001432  EF1D  F00A         	goto	u1341
  2995   001436  EF1F  F00A         	goto	u1340
  2996   00143A                     u1341:
  2997   00143A  EF31  F00A         	goto	l23
  2998   00143E                     u1340:
  2999   00143E                     
  3000                           ;calibration.c: 16:                 LATHbits.LATH3 = 1;
  3001   00143E  8680               	bsf	128,3,c	;volatile
  3002                           
  3003                           ;calibration.c: 17:                 LATDbits.LATD7 = 1;
  3004   001440  8E7C               	bsf	124,7,c	;volatile
  3005   001442                     
  3006                           ;calibration.c: 18:                 _delay((unsigned long)((1000)*(64000000/4000.0)));
  3007   001442  0E52               	movlw	82
  3008   001444  6E36               	movwf	(??_adjust_calibration+1)^0,c
  3009   001446  0E2B               	movlw	43
  3010   001448  6E35               	movwf	??_adjust_calibration^0,c
  3011   00144A  0E00               	movlw	0
  3012   00144C                     u1777:
  3013   00144C  2EE8               	decfsz	wreg,f,c
  3014   00144E  D7FE               	bra	u1777
  3015   001450  2E35               	decfsz	??_adjust_calibration^0,f,c
  3016   001452  D7FC               	bra	u1777
  3017   001454  2E36               	decfsz	(??_adjust_calibration+1)^0,f,c
  3018   001456  D7FA               	bra	u1777
  3019   001458  D000               	nop2	
  3020   00145A                     
  3021                           ;calibration.c: 19:                 LATHbits.LATH3 = 0;
  3022   00145A  9680               	bcf	128,3,c	;volatile
  3023   00145C                     
  3024                           ;calibration.c: 20:                 LATDbits.LATD7 = 0;
  3025   00145C  9E7C               	bcf	124,7,c	;volatile
  3026                           
  3027                           ;calibration.c: 21:                 break;
  3028   00145E  EF9D  F00A         	goto	l29
  3029   001462                     l23:
  3030                           
  3031                           ;calibration.c: 24:                 if(!PORTFbits.RF2){
  3032   001462  B48E               	btfsc	142,2,c	;volatile
  3033   001464  EF36  F00A         	goto	u1351
  3034   001468  EF38  F00A         	goto	u1350
  3035   00146C                     u1351:
  3036   00146C  EF64  F00A         	goto	l2091
  3037   001470                     u1350:
  3038   001470                     
  3039                           ;calibration.c: 25:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  3040   001470  0E11               	movlw	17
  3041   001472  6E36               	movwf	(??_adjust_calibration+1)^0,c
  3042   001474  0E3C               	movlw	60
  3043   001476  6E35               	movwf	??_adjust_calibration^0,c
  3044   001478  0ECB               	movlw	203
  3045   00147A                     u1787:
  3046   00147A  2EE8               	decfsz	wreg,f,c
  3047   00147C  D7FE               	bra	u1787
  3048   00147E  2E35               	decfsz	??_adjust_calibration^0,f,c
  3049   001480  D7FC               	bra	u1787
  3050   001482  2E36               	decfsz	(??_adjust_calibration+1)^0,f,c
  3051   001484  D7FA               	bra	u1787
  3052   001486  0000               	nop	
  3053   001488                     
  3054                           ;calibration.c: 26:                     *calibration_label = *calibration_label + 5;
  3055   001488  5034               	movf	adjust_calibration@calibration_label^0,w,c
  3056   00148A  6ED9               	movwf	fsr2l,c
  3057   00148C  6ADA               	clrf	fsr2h,c
  3058   00148E  CFDE F035          	movff	postinc2,??_adjust_calibration
  3059   001492  CFDD F036          	movff	postdec2,??_adjust_calibration+1
  3060   001496  0E05               	movlw	5
  3061   001498  2635               	addwf	??_adjust_calibration^0,f,c
  3062   00149A  0E00               	movlw	0
  3063   00149C  2236               	addwfc	(??_adjust_calibration+1)^0,f,c
  3064   00149E  5034               	movf	adjust_calibration@calibration_label^0,w,c
  3065   0014A0  6ED9               	movwf	fsr2l,c
  3066   0014A2  6ADA               	clrf	fsr2h,c
  3067   0014A4  C035  FFDE         	movff	??_adjust_calibration,postinc2
  3068   0014A8  C036  FFDD         	movff	??_adjust_calibration+1,postdec2
  3069   0014AC                     
  3070                           ;calibration.c: 27:                     LATDbits.LATD7 = 1;
  3071   0014AC  8E7C               	bsf	124,7,c	;volatile
  3072   0014AE                     
  3073                           ;calibration.c: 28:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  3074   0014AE  0E11               	movlw	17
  3075   0014B0  6E36               	movwf	(??_adjust_calibration+1)^0,c
  3076   0014B2  0E3C               	movlw	60
  3077   0014B4  6E35               	movwf	??_adjust_calibration^0,c
  3078   0014B6  0ECB               	movlw	203
  3079   0014B8                     u1797:
  3080   0014B8  2EE8               	decfsz	wreg,f,c
  3081   0014BA  D7FE               	bra	u1797
  3082   0014BC  2E35               	decfsz	??_adjust_calibration^0,f,c
  3083   0014BE  D7FC               	bra	u1797
  3084   0014C0  2E36               	decfsz	(??_adjust_calibration+1)^0,f,c
  3085   0014C2  D7FA               	bra	u1797
  3086   0014C4  0000               	nop	
  3087   0014C6                     
  3088                           ;calibration.c: 29:                     LATDbits.LATD7 = 0;
  3089   0014C6  9E7C               	bcf	124,7,c	;volatile
  3090   0014C8                     l2091:
  3091                           
  3092                           ;calibration.c: 32:                 if(!PORTFbits.RF3){
  3093   0014C8  B68E               	btfsc	142,3,c	;volatile
  3094   0014CA  EF69  F00A         	goto	u1361
  3095   0014CE  EF6B  F00A         	goto	u1360
  3096   0014D2                     u1361:
  3097   0014D2  EF9B  F00A         	goto	l20
  3098   0014D6                     u1360:
  3099   0014D6                     
  3100                           ;calibration.c: 33:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  3101   0014D6  0E11               	movlw	17
  3102   0014D8  6E36               	movwf	(??_adjust_calibration+1)^0,c
  3103   0014DA  0E3C               	movlw	60
  3104   0014DC  6E35               	movwf	??_adjust_calibration^0,c
  3105   0014DE  0ECB               	movlw	203
  3106   0014E0                     u1807:
  3107   0014E0  2EE8               	decfsz	wreg,f,c
  3108   0014E2  D7FE               	bra	u1807
  3109   0014E4  2E35               	decfsz	??_adjust_calibration^0,f,c
  3110   0014E6  D7FC               	bra	u1807
  3111   0014E8  2E36               	decfsz	(??_adjust_calibration+1)^0,f,c
  3112   0014EA  D7FA               	bra	u1807
  3113   0014EC  0000               	nop	
  3114   0014EE                     
  3115                           ;calibration.c: 34:                     *calibration_label = *calibration_label - 5;
  3116   0014EE  5034               	movf	adjust_calibration@calibration_label^0,w,c
  3117   0014F0  6ED9               	movwf	fsr2l,c
  3118   0014F2  6ADA               	clrf	fsr2h,c
  3119   0014F4  CFDE F035          	movff	postinc2,??_adjust_calibration
  3120   0014F8  CFDD F036          	movff	postdec2,??_adjust_calibration+1
  3121   0014FC  0EFB               	movlw	251
  3122   0014FE  2435               	addwf	??_adjust_calibration^0,w,c
  3123   001500  6E37               	movwf	(??_adjust_calibration+2)^0,c
  3124   001502  0EFF               	movlw	255
  3125   001504  2036               	addwfc	(??_adjust_calibration+1)^0,w,c
  3126   001506  6E38               	movwf	(??_adjust_calibration+3)^0,c
  3127   001508  5034               	movf	adjust_calibration@calibration_label^0,w,c
  3128   00150A  6ED9               	movwf	fsr2l,c
  3129   00150C  6ADA               	clrf	fsr2h,c
  3130   00150E  C037  FFDE         	movff	??_adjust_calibration+2,postinc2
  3131   001512  C038  FFDD         	movff	??_adjust_calibration+3,postdec2
  3132   001516                     
  3133                           ;calibration.c: 35:                     LATHbits.LATH3 = 1;
  3134   001516  8680               	bsf	128,3,c	;volatile
  3135   001518                     
  3136                           ;calibration.c: 36:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  3137   001518  0E11               	movlw	17
  3138   00151A  6E36               	movwf	(??_adjust_calibration+1)^0,c
  3139   00151C  0E3C               	movlw	60
  3140   00151E  6E35               	movwf	??_adjust_calibration^0,c
  3141   001520  0ECB               	movlw	203
  3142   001522                     u1817:
  3143   001522  2EE8               	decfsz	wreg,f,c
  3144   001524  D7FE               	bra	u1817
  3145   001526  2E35               	decfsz	??_adjust_calibration^0,f,c
  3146   001528  D7FC               	bra	u1817
  3147   00152A  2E36               	decfsz	(??_adjust_calibration+1)^0,f,c
  3148   00152C  D7FA               	bra	u1817
  3149   00152E  0000               	nop	
  3150   001530                     
  3151                           ;calibration.c: 37:                     LATHbits.LATH3 = 0;
  3152   001530  9680               	bcf	128,3,c	;volatile
  3153   001532  EFF7  F009         	goto	l19
  3154   001536                     l20:
  3155   001536  EFF7  F009         	goto	l19
  3156   00153A                     l29:
  3157   00153A  0012               	return		;funcret
  3158   00153C                     __end_of_adjust_calibration:
  3159                           	callstack 0
  3160                           
  3161                           	psect	rparam
  3162   000000                     
  3163                           	psect	config
  3164                           
  3165                           ;Config register CONFIG1L @ 0x300000
  3166                           ;	External Oscillator mode Selection bits
  3167                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  3168                           ;	Power-up default value for COSC bits
  3169                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  3170   300000                     	org	3145728
  3171   300000  AA                 	db	170
  3172                           
  3173                           ;Config register CONFIG1H @ 0x300001
  3174                           ;	unspecified, using default values
  3175                           ;	Clock Out Enable bit
  3176                           ;	CLKOUTEN = 0x1, unprogrammed default
  3177                           ;	Clock Switch Enable bit
  3178                           ;	CSWEN = 0x1, unprogrammed default
  3179                           ;	Fail-Safe Clock Monitor Enable bit
  3180                           ;	FCMEN = 0x1, unprogrammed default
  3181   300001                     	org	3145729
  3182   300001  FF                 	db	255
  3183                           
  3184                           ;Config register CONFIG3L @ 0x300004
  3185                           ;	WDT Period Select bits
  3186                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3187                           ;	WDT operating mode
  3188                           ;	WDTE = OFF, WDT Disabled
  3189   300004                     	org	3145732
  3190   300004  9F                 	db	159
  3191                           
  3192                           ;Config register CONFIG3H @ 0x300005
  3193                           ;	unspecified, using default values
  3194                           ;	WDT Window Select bits
  3195                           ;	WDTCWS = 0x7, unprogrammed default
  3196                           ;	WDT input clock selector
  3197                           ;	WDTCCS = 0x7, unprogrammed default
  3198   300005                     	org	3145733
  3199   300005  FF                 	db	255
  3200                           tosu	equ	0xFFF
  3201                           tosh	equ	0xFFE
  3202                           tosl	equ	0xFFD
  3203                           stkptr	equ	0xFFC
  3204                           pclatu	equ	0xFFB
  3205                           pclath	equ	0xFFA
  3206                           pcl	equ	0xFF9
  3207                           tblptru	equ	0xFF8
  3208                           tblptrh	equ	0xFF7
  3209                           tblptrl	equ	0xFF6
  3210                           tablat	equ	0xFF5
  3211                           prodh	equ	0xFF4
  3212                           prodl	equ	0xFF3
  3213                           indf0	equ	0xFEF
  3214                           postinc0	equ	0xFEE
  3215                           postdec0	equ	0xFED
  3216                           preinc0	equ	0xFEC
  3217                           plusw0	equ	0xFEB
  3218                           fsr0h	equ	0xFEA
  3219                           fsr0l	equ	0xFE9
  3220                           wreg	equ	0xFE8
  3221                           indf1	equ	0xFE7
  3222                           postinc1	equ	0xFE6
  3223                           postdec1	equ	0xFE5
  3224                           preinc1	equ	0xFE4
  3225                           plusw1	equ	0xFE3
  3226                           fsr1h	equ	0xFE2
  3227                           fsr1l	equ	0xFE1
  3228                           bsr	equ	0xFE0
  3229                           indf2	equ	0xFDF
  3230                           postinc2	equ	0xFDE
  3231                           postdec2	equ	0xFDD
  3232                           preinc2	equ	0xFDC
  3233                           plusw2	equ	0xFDB
  3234                           fsr2h	equ	0xFDA
  3235                           fsr2l	equ	0xFD9
  3236                           status	equ	0xFD8

Data Sizes:
    Strings     28
    Constant    0
    Data        1
    BSS         111
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     32      84
    BANK0           160      0      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    adjust_calibration@calibration_label	PTR int  size(1) Largest target is 9
		 -> calibration(COMRAM[9]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    forward@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    forward@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllhhhlllll[1]), 

    forward@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllhhhlllll[1]), 

    forward@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    forward@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllhhhlllll[1]), 

    forward@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllhhhlllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllhhhlllll[1]), 

    S2370$buffer	PTR unsigned char  size(2) Largest target is 0

    S2370$source	PTR const unsigned char  size(2) Largest target is 0

    S34DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllhhhlllll[1]), 

    S34DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllhhhlllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllhhhlllll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllhhhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllhhhlllll[1]), 

    switch_calibration@calibration_index	PTR int  size(1) Largest target is 9
		 -> calibration(COMRAM[9]), 

    turnLEFT@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLEFT@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllhhhlllll[1]), 

    turnLEFT@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllhhhlllll[1]), 

    turnLEFT@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLEFT@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllhhhlllll[1]), 

    turnLEFT@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllhhhlllll[1]), 

    turnRIGHT@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRIGHT@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllhhhlllll[1]), 

    turnRIGHT@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllhhhlllll[1]), 

    turnRIGHT@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRIGHT@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhlll[1]), CCPR4H(BITBIGSFRllllhhhlllll[1]), 

    turnRIGHT@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhlll[1]), CCPR3H(BITBIGSFRllllhhhlllll[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 28
		 -> STR_1(CODE[28]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_forward
    _main->_turnLEFT
    _main->_turnRIGHT
    _turnRIGHT->_setMotorPWM
    _turnLEFT->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   13205
                 _adjust_calibration
                   _color_click_init
                            _forward
                    _initDCmotorsPWM
                 _switch_calibration
                           _turnLEFT
                          _turnRIGHT
 ---------------------------------------------------------------------------------
 (1) _turnRIGHT                                           16    14      2    4055
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLEFT                                            16    14      2    4055
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _switch_calibration                                   3     2      1     272
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                             16    14      2    4055
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2133
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _delay_ms_function                                    3     1      2     479
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     756
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adjust_calibration                                   5     4      1     316
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adjust_calibration
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _forward
     ___awdiv
     _delay_ms_function
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _switch_calibration
   _turnLEFT
     ___awdiv
     _delay_ms_function
     _setMotorPWM
   _turnRIGHT
     ___awdiv
     _delay_ms_function
     _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      59        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3C       5       37.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     20      54       1       88.4%
BITBIGSFRllllhh     52      0       0      40        0.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRllllhh     37      0       0      42        0.0%
BITBIGSFRllllll     2A      0       0      53        0.0%
BITBIGSFRllllll     26      0       0      57        0.0%
BITBIGSFRllllhh     20      0       0      45        0.0%
BITBIGSFRllllhh     1E      0       0      47        0.0%
BITBIGSFRhlll       17      0       0      36        0.0%
BITBIGSFRllllhh     11      0       0      48        0.0%
BITBIGSFRllllll      F      0       0      55        0.0%
BITBIGSFRhlhh        E      0       0      33        0.0%
BITBIGSFRllllhh      C      0       0      46        0.0%
BITBIGSFRllllll      9      0       0      54        0.0%
BITBIGSFRllllhh      8      0       0      43        0.0%
BITBIGSFRllllll      6      0       0      56        0.0%
BITBIGSFRllllll      6      0       0      52        0.0%
BITBIGSFRlllllh      5      0       0      51        0.0%
BITBIGSFRlhh         5      0       0      37        0.0%
BITBIGSFRlllllh      3      0       0      50        0.0%
BITBIGSFRllllhh      2      0       0      41        0.0%
BITBIGSFRhllh        2      0       0      35        0.0%
BITBIGSFRllllhh      1      0       0      44        0.0%
BITBIGSFRhlhl        1      0       0      34        0.0%
BITBIGSFRllllhl      1      0       0      49        0.0%
BITBIGSFRlllh        1      0       0      39        0.0%
BITBIGSFRlhll        1      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      90      58        0.0%
DATA                 0      0      90       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 14 15:11:31 2024

                                 l20 1536                                   l23 1462  
                                 l32 1732                                   l33 179C  
                                 l19 13EE                                   l29 153A  
                                 l37 17DE                                   l92 1932  
                                 l95 1A30                                   u10 19D4  
                                 u11 19D0                                   u20 19EA  
                                 u21 19E6                         ___awdiv@sign 0039  
                ___wmul@multiplicand 0036                                  l230 1986  
                                l320 19C4                                  l240 13EC  
                                l233 1998                                  l323 19EA  
                                l227 1872                                  l332 1A46  
                                l317 19C2                                  l326 1A50  
                                l262 0F9C                                  l254 0EF0  
                                l335 1A3C                                  l290 111A  
                                l282 106E                                  l276 1298  
                                l268 11EC                                  l710 1730  
                                l392 166A                                  l479 1A10  
                                l970 18DE                                  l977 18E6  
                                wreg 0FE8           __end_of_adjust_calibration 153C  
                               l2001 1980                                 l1211 19AE  
                               l1203 199A                                 l2011 1318  
                               l2003 129A                                 l2101 1530  
                               l1213 19B0                                 l1205 19A4  
                               l2021 1672                                 l2013 1356  
                               l2005 12B4                                 l1207 19AA  
                               l2031 16A2                                 l2023 1680  
                               l2015 1370                                 l2007 1302  
                               l2111 1796                                 l2103 1740  
                               l1209 19AC                                 l1161 19D4  
                               l2121 18EC                                 l2041 16D0  
                               l2033 16A6                                 l2025 1688  
                               l2017 13B0                                 l2009 1314  
                               l2201 0EB4                                 l2113 17AA  
                               l2105 1758                                 l1163 1A48  
                               l1171 1A3E                                 l2131 191C  
                               l2123 18F6                                 l2051 1704  
                               l2043 16DE                                 l2035 16AE  
                               l2027 168C                                 l2019 166E  
                               l2211 0F2E                                 l2203 0ED2  
                               l2115 17C2                                 l2107 177C  
                               l1165 1A4C                                 l1173 1A42  
                               l2141 1926                                 l2133 191E  
                               l2125 1906                                 l2053 170A  
                               l2045 16E4                                 l2037 16C0  
                               l2029 169A                                 l2221 0F64  
                               l2213 0F36                                 l2205 0EDE  
                               l2117 17DC                                 l2109 177E  
                               l2301 1096                                 l2071 143E  
                               l2063 13FC                                 l1159 19C4  
                               l1167 1A34                                 l2151 1930  
                               l2143 1928                                 l2135 1920  
                               l2127 1910                                 l2119 18E8  
                               l2047 16FA                                 l2039 16C8  
                               l2055 1710                                 l2215 0F4C  
                               l2223 0F70                                 l2207 0EEC  
                               l2231 1140                                 l2311 10DA  
                               l2303 10AC                                 l2081 1470  
                               l2073 1442                                 l2065 140A  
                               l1169 1A38                                 l2145 192A  
                               l2137 1922                                 l2129 191A  
                               l2057 1720                                 l2049 1702  
                               l2225 0F86                                 l2217 0F54  
                               l2209 0F18                                 l2161 183E  
                               l2153 17E0                                 l2241 1198  
                               l2233 1140                                 l2313 10E2  
                               l2305 10B4                                 l2401 15DA  
                               l2083 1488                                 l2091 14C8  
                               l2075 145A                                 l2067 1422  
                               l2147 192C                                 l2139 1924  
                               l2059 1728                                 l2219 0F5C  
                               l2171 1860                                 l2163 1848  
                               l2155 17F0                                 l2251 11DA  
                               l2243 11A0                                 l2235 115C  
                               l2227 111E                                 l2307 10CA  
                               l2315 10EE                                 l2411 1612  
                               l2403 15E2                                 l2093 14D6  
                               l2085 14AC                                 l2077 145C  
                               l2069 1430                                 l2149 192E  
                               l2181 0E20                                 l2173 1862  
                               l2165 184A                                 l2157 1816  
                               l2261 1248                                 l2253 11E8  
                               l2245 11AC                                 l2237 1168  
                               l2229 1138                                 l2317 1104  
                               l2309 10D2                                 l2421 1650  
                               l2413 1620                                 l2405 15F0  
                               l2341 153C                                 l2095 14EE  
                               l2087 14AE                                 l2191 0E6C  
                               l2183 0E3C                                 l2175 186C  
                               l2167 1854                                 l2159 181A  
                               l2271 1282                                 l2263 1250  
                               l2255 1214                                 l2239 1190  
                               l2247 11B0                                 l2423 1658  
                               l2415 1628                                 l2407 15F8  
                               l2351 1558                                 l2343 1548  
                               l2097 1516                                 l2089 14C6  
                               l2193 0E94                                 l2185 0E44  
                               l2177 186E                                 l2169 1856  
                               l2265 1258                                 l2257 122A  
                               l2249 11CE                                 l2281 0FDE  
                               l2273 0FA0                                 l2417 163A  
                               l2409 160A                                 l2361 1578  
                               l2353 1560                                 l2345 154C  
                               l2099 1518                                 l2195 0E9C  
                               l2187 0E44                                 l2179 1870  
                               l2267 1260                                 l2259 1232  
                               l2291 102E                                 l2283 0FEA  
                               l2275 0FBA                                 l2419 1642  
                               l2371 159A                                 l2363 158C  
                               l2355 1568                                 l2347 1550  
                               l2339 153C                                 l2197 0EA4  
                               l2189 0E60                                 l2269 126C  
                               l2285 1012                                 l2293 1032  
                               l2277 0FC2                                 l2381 15A6  
                               l2373 159C                                 l2365 1594  
                               l2357 1570                                 l2349 1554  
                               l2199 0EB0                                 l2295 1050  
                               l2287 101A                                 l2279 0FC2  
                               l2391 15BA                                 l2383 15AA  
                               l2375 159E                                 l2367 1596  
                               l2359 1574                                 l2297 105C  
                               l2289 1022                                 l2393 15BE  
                               l2385 15AE                                 l2377 15A2  
                               l2369 1598                                 l2299 106A  
                               l2395 15C2                                 l2387 15B2  
                               l2379 15A4                                 l2397 15C6  
                               l2389 15B6                                 l2399 15CA  
                               l1981 189E                                 l1973 1874  
                               l1991 18D2                                 l1983 18AC  
                               l1975 187C                                 l1967 19EC  
                               l1993 18D8                                 l1985 18B2  
                               l1977 188E                                 l1969 1A08  
                               l1995 1A14                                 l1987 18C8  
                               l1979 1896                                 l1997 196C  
                               l1989 18D0                                 l1999 1970  
                               STR_1 0E01                                 u1200 18AC  
                               u1201 18A8                                 u1210 18C8  
                               u1211 18C4                                 u1300 1720  
                               u1220 1998                                 u1301 171C  
                               u1221 1994                                 u1310 13FC  
                               u1230 12B4                                 u1311 13F8  
                               u1231 12B0                                 u1320 140A  
                               u1240 1370                                 u1400 0F14  
                               u1321 1406                                 u1241 136C  
                               u1401 0F10                                 u1330 1430  
                               u1250 1680                                 u1410 0F2E  
                               u1331 142C                                 u1251 167C  
                               u1411 0F2A                                 u1340 143E  
                               u1260 169A                                 u1420 0F4C  
                               u1500 1298                                 u1341 143A  
                               u1261 1696                                 u1421 0F48  
                               u1501 1294                                 u1350 1470  
                               u1270 16C0                                 u1190 188E  
                               u1430 0F86                                 u1510 1050  
                               u1351 146C                                 u1271 16BC  
                               u1191 188A                                 u1431 0F82  
                               u1511 104C                                 u1360 14D6  
                               u1280 16DE                                 u1440 0F9C  
                               u1520 1092                         _BAUD4CONbits 0EE9  
                               u1361 14D2                                 u1281 16DA  
                               u1441 0F98                                 u1521 108E  
                               u1290 16FA                                 u1370 1740  
                               u1450 11CE                                 u1530 10AC  
                               u1610 15DA                                 u1291 16F6  
                               u1371 173C                                 u1451 11CA  
                               u1531 10A8                                 u1611 15D6  
                               u1380 17AA                                 u1460 1210  
                               u1540 10CA                                 u1620 160A  
                               u1381 17A6                                 u1461 120C  
                               u1541 10C6                                 u1621 1606  
                               u1390 0ED2                                 u1470 122A  
                               u1550 1104                                 u1630 163A  
                               u1391 0ECE                                 u1471 1226  
                               u1551 1100                                 u1631 1636  
                               u1480 1248                                 u1560 111A  
                               u1640 166A                                 u1481 1244  
                               u1561 1116                                 u1641 1666  
                               u1490 1282                                 _T2PR 0FBC  
                               u1707 1788                                 u1491 127E  
                               u1717 17B4                                 u1807 14E0  
                               u1727 17CE                                 u1817 1522  
                               u1737 0EE4                                 u1747 1976  
                               u1757 18FC                                 u1677 1062  
                               u1767 1414                                 u1687 11E0  
                               u1777 144C                                 u1697 174A  
                               u1787 147A                                 u1797 14B8  
                               _main 153C                                 _temp 0054  
                               fsr1h 0FE2                                 fsr2h 0FDA  
                               indf1 0FE7                                 indf2 0FDF  
                               fsr1l 0FE1                                 fsr2l 0FD9  
                               prodh 0FF4                                 prodl 0FF3  
                               start 0000                         ___param_bank 0000  
                              ?_main 0034                      __end_of___awdiv 1732  
                    ___awdiv@divisor 0036                      __end_of___lwdiv 18E8  
                    ___awdiv@counter 0038           __end_of_I2C_2_Master_Start 1A52  
         __end_of_I2C_2_Master_Write 1A3E                      __end_of_forward 0F9E  
                              tablat 0FF5                                status 0FD8  
                 _switch_calibration 1732                      __initialization 1934  
                       __end_of_main 166E                  ?_switch_calibration 0034  
                             ??_main 0054                        __activetblptr 0001  
                       ?_setMotorPWM 0041                               _CCPR1H 0FAA  
                             _CCPR2H 0FA6                               _CCPR3H 0F25  
                             _CCPR4H 0F21                     ___awdiv@dividend 0034  
               ??_switch_calibration 0035                               _RC0PPS 0E62  
                             _RC4REG 0EE3                               _RE2PPS 0E74  
                             _RD5PPS 0E6F                               _RC7PPS 0E69  
                             _RD6PPS 0E70                               _RE4PPS 0E76  
                             _RG6PPS 0E88             __end_of_color_click_init 1934  
                             _RX4PPS 0E15                     forward@max_power 0050  
                             _TX4REG 0EE4                         _CCPTMRS0bits 0FAD  
                             ___wmul 19EC                            ??___awdiv 0038  
                          ??___lwdiv 003E        delay_ms_function@milliseconds 0034  
                             clear_0 194C                               clear_1 1958  
                   ___awdiv@quotient 003A                               _motorL 0022  
                             _motorR 0019                               isa$std 0001  
                       __pdataCOMRAM 0054                            ??_forward 0048  
                       __mediumconst 0000                               tblptrh 0FF7  
                             tblptrl 0FF6                               tblptru 0FF8  
                  ??_initDCmotorsPWM 0036                     __end_of_turnLEFT 129A  
                         __accesstop 0060              __end_of__initialization 195E  
                      ___rparam_used 0001                       __pcstackCOMRAM 0034  
                  forward@delay_time 0052                           __pbssBANK0 0060  
                  _color_writetoaddr 1A12                         _T2CLKCONbits 0FBF  
                 _adjust_calibration 13EE                   ?_color_writetoaddr 0036  
                            ?___wmul 0034                  ?_adjust_calibration 0034  
                ??_color_writetoaddr 0037                    _delay_ms_function 196C  
                 ?_delay_ms_function 0034                              _SP4BRGH 0EE6  
                            _SP4BRGL 0EE5                              _SSP2ADD 0ED6  
                            _SSP2BUF 0ED5                  ??_delay_ms_function 0036  
               ??_adjust_calibration 0035               color_writetoaddr@value 0036  
       turnLEFT@rotation_calibration 004B            __end_of_color_writetoaddr 1A32  
                 _I2C_2_Master_Start 1A48                   _I2C_2_Master_Write 1A32  
                            __Hparam 0000                              __Lparam 0000  
                            ___awdiv 166E                  ?_I2C_2_Master_Start 0034  
                            ___lwdiv 1874                  ?_I2C_2_Master_Write 0034  
                       __psmallconst 0E00                            ?_turnLEFT 0046  
          __end_of_delay_ms_function 199A                              __pcinit 1934  
                            __ramtop 0E00                              __ptext0 153C  
                            __ptext1 0F9E                              __ptext2 111C  
                            __ptext3 1732                              __ptext4 17E0  
                            __ptext5 0E1E                              __ptext6 129A  
                            __ptext7 19EC                              __ptext8 1874  
                            __ptext9 196C                            _T2CONbits 0FBD  
                            _forward 0E1E                            _T2HLTbits 0FBE  
                      _RxBufWriteCnt 0018                 ??_I2C_2_Master_Start 0035  
               ??_I2C_2_Master_Write 0035                 end_of_initialization 195E  
                  ?_color_click_init 0034                   ??_color_click_init 0038  
                            postdec2 0FDD                              postinc0 0FEE  
                            postinc2 0FDE                           ??_turnLEFT 0048  
                  __end_of_turnRIGHT 111C                      _initDCmotorsPWM 17E0  
                 turnRIGHT@max_power 0050                            _PORTFbits 0F8E  
                 setMotorPWM@negDuty 0045                            _TRISAbits 0F81  
                 setMotorPWM@posDuty 0044                            _TRISCbits 0F83  
                          _TRISDbits 0F84                            _TRISEbits 0F85  
                          _TRISFbits 0F86                            _TRISGbits 0F87  
                          _TRISHbits 0F88  adjust_calibration@calibration_label 0034  
switch_calibration@calibration_index 0034             color_writetoaddr@address 0037  
                        _CCP1CONbits 0FAB                         _EUSART4RXbuf 0001  
                       _EUSART4TXbuf 0060                          _CCP2CONbits 0FA7  
                        _CCP3CONbits 0F26          forward@Distance_Calibration 004B  
                        _CCP4CONbits 0F22                       __end_of___wmul 1A12  
                      __pidataCOMRAM 1A52                  start_initialization 1934  
                      _TxBufWriteCnt 0016                   turnLEFT@delay_time 0052  
            __end_of_initDCmotorsPWM 1874                             ??___wmul 0038  
                        _calibration 002B                          __pbssCOMRAM 0001  
                   ___lwdiv@dividend 003A                          turnRIGHT@mL 0046  
                        turnRIGHT@mR 0047                             ?___awdiv 0034  
                           ?___lwdiv 003A                          __smallconst 0E00  
                           ?_forward 0046                    _I2C_2_Master_Idle 19C4  
                  _I2C_2_Master_Init 199A                    _I2C_2_Master_Stop 1A3E  
                       _RxBufReadCnt 0017                   ?_I2C_2_Master_Idle 0034  
                 ?_I2C_2_Master_Init 0034                        ??_setMotorPWM 0042  
                 ?_I2C_2_Master_Stop 0034                     ___lwdiv@quotient 003E  
           initDCmotorsPWM@PWMperiod 0034                  ??_I2C_2_Master_Idle 0034  
                ??_I2C_2_Master_Init 0034                       ___wmul@product 0038  
                           _LATAbits 0F79                  ??_I2C_2_Master_Stop 0035  
                           _LATCbits 0F7B                             _LATDbits 0F7C  
                           _LATEbits 0F7D                             _LATFbits 0F7E  
                           _LATGbits 0F7F                             _LATHbits 0F80  
                           _PIE4bits 0E2D                             _PIR4bits 0E37  
                   ?_initDCmotorsPWM 0034                             _SSP2CON2 0EDA  
                           _SSP2STAT 0ED8            __end_of_I2C_2_Master_Idle 19EC  
          __end_of_I2C_2_Master_Init 19C4                    ___wmul@multiplier 0034  
          __end_of_I2C_2_Master_Stop 1A48                         setMotorPWM@m 0041  
        I2C_2_Master_Write@data_byte 0035        turnRIGHT@rotation_calibration 004B  
                          _turnRIGHT 0F9E                         _TxBufReadCnt 0015  
                __end_of_setMotorPWM 13EE                             __Hrparam 0000  
                           __Lrparam 0000                         __Lsmallconst 0E00  
                          forward@mL 0046                            forward@mR 0047  
                         _ANSELDbits 0EA7                           _ANSELFbits 0EB4  
                         turnLEFT@mL 0046                           turnLEFT@mR 0047  
                         ?_turnRIGHT 0046                      ___lwdiv@divisor 003C  
                         turnRIGHT@i 004C                           turnRIGHT@j 004E  
         __end_of_switch_calibration 17E0                      ___lwdiv@counter 0040  
                           __ptext10 166E                             __ptext11 18E8  
                           __ptext12 1A12                             __ptext13 1A32  
                           __ptext14 1A3E                             __ptext15 1A48  
                           __ptext16 19C4                             __ptext17 199A  
                           __ptext18 13EE                    turnLEFT@max_power 0050  
                       _SSP2CON1bits 0ED9                         _SSP2CON2bits 0EDA  
                           isa$xinst 0000                           _RC4STAbits 0EE7  
                           _turnLEFT 111C                  turnRIGHT@delay_time 0052  
                           forward@i 004C                             forward@j 004E  
                        _setMotorPWM 129A                            turnLEFT@i 004C  
                          turnLEFT@j 004E                     _color_click_init 18E8  
                         _SSP2DATPPS 0E1D                           _SSP2CLKPPS 0E1C  
                        ??_turnRIGHT 0048                           _TX4STAbits 0EE8  
