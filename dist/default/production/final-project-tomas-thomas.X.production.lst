

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 22:07:36 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    27   000000                     
    28                           ; Generated 21/07/2023 GMT
    29                           ; 
    30                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F67K40 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62   000000                     
    63                           	psect	idataCOMRAM
    64   001970                     __pidataCOMRAM:
    65                           	callstack 0
    66                           
    67                           ;initializer for _temp
    68   001970  07                 	db	7
    69   000000                     _TRISDbits	set	3972
    70   000000                     _LATEbits	set	3965
    71   000000                     _LATHbits	set	3968
    72   000000                     _RC7PPS	set	3689
    73   000000                     _RE2PPS	set	3700
    74   000000                     _LATAbits	set	3961
    75   000000                     _LATGbits	set	3967
    76   000000                     _TRISAbits	set	3969
    77   000000                     _TRISGbits	set	3975
    78   000000                     _TRISHbits	set	3976
    79   000000                     _PORTFbits	set	3982
    80   000000                     _TRISCbits	set	3971
    81   000000                     _TRISEbits	set	3973
    82   000000                     _TRISFbits	set	3974
    83   000000                     _LATCbits	set	3963
    84   000000                     _LATDbits	set	3964
    85   000000                     _LATFbits	set	3966
    86   000000                     _T2PR	set	4028
    87   000000                     _T2CONbits	set	4029
    88   000000                     _CCPR2H	set	4006
    89   000000                     _CCPR1H	set	4010
    90   000000                     _RE4PPS	set	3702
    91   000000                     _RG6PPS	set	3720
    92   000000                     _ANSELFbits	set	3764
    93   000000                     _CCPR4H	set	3873
    94   000000                     _CCPR3H	set	3877
    95   000000                     _T2CLKCONbits	set	4031
    96   000000                     _T2HLTbits	set	4030
    97   000000                     _CCP1CONbits	set	4011
    98   000000                     _CCPTMRS0bits	set	4013
    99   000000                     _CCP2CONbits	set	4007
   100   000000                     _CCP3CONbits	set	3878
   101   000000                     _CCP4CONbits	set	3874
   102                           
   103                           	psect	smallconst
   104   000E00                     __psmallconst:
   105                           	callstack 0
   106   000E00  00                 	db	0
   107   000E01  48                 	db	72	;'H'
   108   000E02  3A                 	db	58	;':'
   109   000E03  25                 	db	37
   110   000E04  2E                 	db	46
   111   000E05  32                 	db	50	;'2'
   112   000E06  66                 	db	102	;'f'
   113   000E07  20                 	db	32
   114   000E08  53                 	db	83	;'S'
   115   000E09  3A                 	db	58	;':'
   116   000E0A  20                 	db	32
   117   000E0B  25                 	db	37
   118   000E0C  2E                 	db	46
   119   000E0D  32                 	db	50	;'2'
   120   000E0E  66                 	db	102	;'f'
   121   000E0F  20                 	db	32
   122   000E10  56                 	db	86	;'V'
   123   000E11  3A                 	db	58	;':'
   124   000E12  20                 	db	32
   125   000E13  25                 	db	37
   126   000E14  2E                 	db	46
   127   000E15  32                 	db	50	;'2'
   128   000E16  66                 	db	102	;'f'
   129   000E17  20                 	db	32
   130   000E18  43                 	db	67	;'C'
   131   000E19  3A                 	db	58	;':'
   132   000E1A  25                 	db	37
   133   000E1B  75                 	db	117	;'u'
   134   000E1C  00                 	db	0
   135   000E1D  00                 	db	0	; dummy byte at the end
   136   000000                     
   137                           ; #config settings
   138                           
   139                           	psect	cinit
   140   0018E4                     __pcinit:
   141                           	callstack 0
   142   0018E4                     start_initialization:
   143                           	callstack 0
   144   0018E4                     __initialization:
   145                           	callstack 0
   146                           
   147                           ; Initialize objects allocated to COMRAM (1 bytes)
   148                           ; load TBLPTR registers with __pidataCOMRAM
   149   0018E4  0E70               	movlw	low __pidataCOMRAM
   150   0018E6  6EF6               	movwf	tblptrl,c
   151   0018E8  0E19               	movlw	high __pidataCOMRAM
   152   0018EA  6EF7               	movwf	tblptrh,c
   153   0018EC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   154   0018EE  6EF8               	movwf	tblptru,c
   155   0018F0  0009               	tblrd		*+	;fetch initializer
   156   0018F2  CFF5 F054          	movff	tablat,__pdataCOMRAM
   157                           
   158                           ; Clear objects allocated to BANK0 (60 bytes)
   159   0018F6  EE00  F060         	lfsr	0,__pbssBANK0
   160   0018FA  0E3C               	movlw	60
   161   0018FC                     clear_0:
   162   0018FC  6AEE               	clrf	postinc0,c
   163   0018FE  06E8               	decf	wreg,f,c
   164   001900  E1FD               	bnz	clear_0
   165                           
   166                           ; Clear objects allocated to COMRAM (51 bytes)
   167   001902  EE00  F001         	lfsr	0,__pbssCOMRAM
   168   001906  0E33               	movlw	51
   169   001908                     clear_1:
   170   001908  6AEE               	clrf	postinc0,c
   171   00190A  06E8               	decf	wreg,f,c
   172   00190C  E1FD               	bnz	clear_1
   173   00190E                     end_of_initialization:
   174                           	callstack 0
   175   00190E                     __end_of__initialization:
   176                           	callstack 0
   177   00190E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   178   001910  6EF8               	movwf	tblptru,c
   179   001912  0E0E               	movlw	high __Lsmallconst
   180   001914  6EF7               	movwf	tblptrh,c
   181   001916  0100               	movlb	0
   182   001918  EF9E  F00A         	goto	_main	;jump to C main() function
   183                           
   184                           	psect	bssCOMRAM
   185   000001                     __pbssCOMRAM:
   186                           	callstack 0
   187   000001                     _EUSART4RXbuf:
   188                           	callstack 0
   189   000001                     	ds	20
   190   000015                     _TxBufReadCnt:
   191                           	callstack 0
   192   000015                     	ds	1
   193   000016                     _TxBufWriteCnt:
   194                           	callstack 0
   195   000016                     	ds	1
   196   000017                     _RxBufReadCnt:
   197                           	callstack 0
   198   000017                     	ds	1
   199   000018                     _RxBufWriteCnt:
   200                           	callstack 0
   201   000018                     	ds	1
   202   000019                     _motorR:
   203                           	callstack 0
   204   000019                     	ds	9
   205   000022                     _motorL:
   206                           	callstack 0
   207   000022                     	ds	9
   208   00002B                     _calibration:
   209                           	callstack 0
   210   00002B                     	ds	9
   211                           
   212                           	psect	dataCOMRAM
   213   000054                     __pdataCOMRAM:
   214                           	callstack 0
   215   000054                     _temp:
   216                           	callstack 0
   217   000054                     	ds	1
   218                           
   219                           	psect	bssBANK0
   220   000060                     __pbssBANK0:
   221                           	callstack 0
   222   000060                     _EUSART4TXbuf:
   223                           	callstack 0
   224   000060                     	ds	60
   225                           
   226                           	psect	cstackCOMRAM
   227   000034                     __pcstackCOMRAM:
   228                           	callstack 0
   229   000034                     ?___wmul:
   230                           	callstack 0
   231   000034                     ?___awdiv:
   232                           	callstack 0
   233   000034                     adjust_calibration@calibration_label:
   234                           	callstack 0
   235   000034                     switch_calibration@calibration_index:
   236                           	callstack 0
   237   000034                     initDCmotorsPWM@PWMperiod:
   238                           	callstack 0
   239   000034                     delay_ms_function@milliseconds:
   240                           	callstack 0
   241   000034                     ___wmul@multiplier:
   242                           	callstack 0
   243   000034                     ___awdiv@dividend:
   244                           	callstack 0
   245                           
   246                           ; 2 bytes @ 0x0
   247   000034                     	ds	1
   248   000035                     ??_adjust_calibration:
   249   000035                     ??_switch_calibration:
   250                           
   251                           ; 1 bytes @ 0x1
   252   000035                     	ds	1
   253   000036                     ??_delay_ms_function:
   254   000036                     ___wmul@multiplicand:
   255                           	callstack 0
   256   000036                     ___awdiv@divisor:
   257                           	callstack 0
   258                           
   259                           ; 2 bytes @ 0x2
   260   000036                     	ds	2
   261   000038                     ___awdiv@counter:
   262                           	callstack 0
   263   000038                     ___wmul@product:
   264                           	callstack 0
   265                           
   266                           ; 2 bytes @ 0x4
   267   000038                     	ds	1
   268   000039                     ___awdiv@sign:
   269                           	callstack 0
   270                           
   271                           ; 1 bytes @ 0x5
   272   000039                     	ds	1
   273   00003A                     ?___lwdiv:
   274                           	callstack 0
   275   00003A                     ___awdiv@quotient:
   276                           	callstack 0
   277   00003A                     ___lwdiv@dividend:
   278                           	callstack 0
   279                           
   280                           ; 2 bytes @ 0x6
   281   00003A                     	ds	2
   282   00003C                     ___lwdiv@divisor:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0x8
   286   00003C                     	ds	2
   287   00003E                     ___lwdiv@quotient:
   288                           	callstack 0
   289                           
   290                           ; 2 bytes @ 0xA
   291   00003E                     	ds	2
   292   000040                     ___lwdiv@counter:
   293                           	callstack 0
   294                           
   295                           ; 1 bytes @ 0xC
   296   000040                     	ds	1
   297   000041                     setMotorPWM@m:
   298                           	callstack 0
   299                           
   300                           ; 1 bytes @ 0xD
   301   000041                     	ds	1
   302   000042                     ??_setMotorPWM:
   303                           
   304                           ; 1 bytes @ 0xE
   305   000042                     	ds	2
   306   000044                     setMotorPWM@posDuty:
   307                           	callstack 0
   308                           
   309                           ; 1 bytes @ 0x10
   310   000044                     	ds	1
   311   000045                     setMotorPWM@negDuty:
   312                           	callstack 0
   313                           
   314                           ; 1 bytes @ 0x11
   315   000045                     	ds	1
   316   000046                     forward@mL:
   317                           	callstack 0
   318   000046                     turnLEFT@mL:
   319                           	callstack 0
   320   000046                     turnRIGHT@mL:
   321                           	callstack 0
   322                           
   323                           ; 1 bytes @ 0x12
   324   000046                     	ds	1
   325   000047                     forward@mR:
   326                           	callstack 0
   327   000047                     turnLEFT@mR:
   328                           	callstack 0
   329   000047                     turnRIGHT@mR:
   330                           	callstack 0
   331                           
   332                           ; 1 bytes @ 0x13
   333   000047                     	ds	1
   334   000048                     ??_forward:
   335   000048                     ??_turnLEFT:
   336   000048                     ??_turnRIGHT:
   337                           
   338                           ; 1 bytes @ 0x14
   339   000048                     	ds	3
   340   00004B                     forward@Distance_Calibration:
   341                           	callstack 0
   342   00004B                     turnLEFT@rotation_calibration:
   343                           	callstack 0
   344   00004B                     turnRIGHT@rotation_calibration:
   345                           	callstack 0
   346                           
   347                           ; 1 bytes @ 0x17
   348   00004B                     	ds	1
   349   00004C                     forward@i:
   350                           	callstack 0
   351   00004C                     turnLEFT@i:
   352                           	callstack 0
   353   00004C                     turnRIGHT@i:
   354                           	callstack 0
   355                           
   356                           ; 2 bytes @ 0x18
   357   00004C                     	ds	2
   358   00004E                     forward@j:
   359                           	callstack 0
   360   00004E                     turnLEFT@j:
   361                           	callstack 0
   362   00004E                     turnRIGHT@j:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x1A
   366   00004E                     	ds	2
   367   000050                     forward@max_power:
   368                           	callstack 0
   369   000050                     turnLEFT@max_power:
   370                           	callstack 0
   371   000050                     turnRIGHT@max_power:
   372                           	callstack 0
   373                           
   374                           ; 2 bytes @ 0x1C
   375   000050                     	ds	2
   376   000052                     forward@delay_time:
   377                           	callstack 0
   378   000052                     turnLEFT@delay_time:
   379                           	callstack 0
   380   000052                     turnRIGHT@delay_time:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x1E
   384   000052                     	ds	2
   385   000054                     
   386                           ; 1 bytes @ 0x20
   387 ;;
   388 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   389 ;;
   390 ;; *************** function _main *****************
   391 ;; Defined at:
   392 ;;		line 18 in file "main.c"
   393 ;; Parameters:    Size  Location     Type
   394 ;;		None
   395 ;; Auto vars:     Size  Location     Type
   396 ;;  PWMperiod       2    0        unsigned int 
   397 ;; Return value:  Size  Location     Type
   398 ;;                  1    wreg      void 
   399 ;; Registers used:
   400 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   401 ;; Tracked objects:
   402 ;;		On entry : 0/0
   403 ;;		On exit  : 0/0
   404 ;;		Unchanged: 0/0
   405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   410 ;;Total ram usage:        0 bytes
   411 ;; Hardware stack levels required when called: 3
   412 ;; This function calls:
   413 ;;		_adjust_calibration
   414 ;;		_forward
   415 ;;		_initDCmotorsPWM
   416 ;;		_switch_calibration
   417 ;;		_turnLEFT
   418 ;;		_turnRIGHT
   419 ;; This function is called by:
   420 ;;		Startup code after reset
   421 ;; This function uses a non-reentrant model
   422 ;;
   423                           
   424                           	psect	text0
   425   00153C                     __ptext0:
   426                           	callstack 0
   427   00153C                     _main:
   428                           	callstack 28
   429   00153C                     
   430                           ;main.c: 20:     initDCmotorsPWM(PWMperiod);
   431   00153C  0E00               	movlw	0
   432   00153E  6E35               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   433   001540  0E63               	movlw	99
   434   001542  6E34               	movwf	initDCmotorsPWM@PWMperiod^0,c
   435   001544  ECEE  F00B         	call	_initDCmotorsPWM	;wreg free
   436   001548                     
   437                           ;main.c: 24:     motorL.power=0;
   438   001548  0E00               	movlw	0
   439   00154A  6E22               	movwf	_motorL^0,c
   440   00154C                     
   441                           ;main.c: 25:     motorL.direction=1;
   442   00154C  0E01               	movlw	1
   443   00154E  6E23               	movwf	(_motorL+1)^0,c
   444   001550                     
   445                           ;main.c: 26:     motorL.brakemode=1;
   446   001550  0E01               	movlw	1
   447   001552  6E24               	movwf	(_motorL+2)^0,c
   448   001554                     
   449                           ;main.c: 27:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   450   001554  0EAA               	movlw	170
   451   001556  6E27               	movwf	(_motorL+5)^0,c
   452   001558  0E0F               	movlw	15
   453   00155A  6E28               	movwf	(_motorL+6)^0,c
   454   00155C                     
   455                           ;main.c: 28:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   456   00155C  0EA6               	movlw	166
   457   00155E  6E29               	movwf	(_motorL+7)^0,c
   458   001560  0E0F               	movlw	15
   459   001562  6E2A               	movwf	(_motorL+8)^0,c
   460   001564                     
   461                           ;main.c: 29:     motorL.PWMperiod=PWMperiod;
   462   001564  0E00               	movlw	0
   463   001566  6E26               	movwf	(_motorL+4)^0,c
   464   001568  0E63               	movlw	99
   465   00156A  6E25               	movwf	(_motorL+3)^0,c
   466   00156C                     
   467                           ;main.c: 31:     motorR.power=0;
   468   00156C  0E00               	movlw	0
   469   00156E  6E19               	movwf	_motorR^0,c
   470   001570                     
   471                           ;main.c: 32:     motorR.direction=1;
   472   001570  0E01               	movlw	1
   473   001572  6E1A               	movwf	(_motorR+1)^0,c
   474   001574                     
   475                           ;main.c: 33:     motorR.brakemode=1;
   476   001574  0E01               	movlw	1
   477   001576  6E1B               	movwf	(_motorR+2)^0,c
   478   001578                     
   479                           ;main.c: 34:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   480   001578  0E25               	movlw	37
   481   00157A  6E1E               	movwf	(_motorR+5)^0,c
   482   00157C  0E0F               	movlw	15
   483   00157E  6E1F               	movwf	(_motorR+6)^0,c
   484   001580                     
   485                           ;main.c: 35:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   486   001580  0E21               	movlw	33
   487   001582  6E20               	movwf	(_motorR+7)^0,c
   488   001584  0E0F               	movlw	15
   489   001586  6E21               	movwf	(_motorR+8)^0,c
   490   001588                     
   491                           ;main.c: 36:     motorR.PWMperiod=PWMperiod;
   492   001588  0E00               	movlw	0
   493   00158A  6E1D               	movwf	(_motorR+4)^0,c
   494   00158C  0E63               	movlw	99
   495   00158E  6E1C               	movwf	(_motorR+3)^0,c
   496   001590                     
   497                           ;main.c: 42:     TRISDbits.TRISD7 = 0;
   498   001590  9E84               	bcf	132,7,c	;volatile
   499   001592                     
   500                           ;main.c: 43:     LATDbits.LATD7 = 0;
   501   001592  9E7C               	bcf	124,7,c	;volatile
   502   001594                     
   503                           ;main.c: 46:     TRISHbits.TRISH3 = 0;
   504   001594  9688               	bcf	136,3,c	;volatile
   505   001596                     
   506                           ;main.c: 47:     LATHbits.LATH3 = 0;
   507   001596  9680               	bcf	128,3,c	;volatile
   508   001598                     
   509                           ;main.c: 50:     TRISFbits.TRISF2=1;
   510   001598  8486               	bsf	134,2,c	;volatile
   511   00159A                     
   512                           ;main.c: 51:     ANSELFbits.ANSELF2=0;
   513   00159A  010E               	movlb	14	; () banked
   514   00159C  95B4               	bcf	180,2,b	;volatile
   515   00159E                     
   516                           ; BSR set to: 14
   517                           ;main.c: 54:     TRISFbits.TRISF3=1;
   518   00159E  8686               	bsf	134,3,c	;volatile
   519   0015A0                     
   520                           ; BSR set to: 14
   521                           ;main.c: 55:     ANSELFbits.ANSELF3=0;
   522   0015A0  97B4               	bcf	180,3,b	;volatile
   523   0015A2                     
   524                           ; BSR set to: 14
   525                           ;main.c: 59:     calibration.index = 1;
   526   0015A2  0E01               	movlw	1
   527   0015A4  6E2B               	movwf	_calibration^0,c
   528   0015A6                     
   529                           ; BSR set to: 14
   530                           ;main.c: 60:     calibration.over = 0;
   531   0015A6  0E00               	movlw	0
   532   0015A8  6E2C               	movwf	(_calibration+1)^0,c
   533   0015AA                     
   534                           ; BSR set to: 14
   535                           ;main.c: 66:     calibration.left_90 = 60;
   536   0015AA  0E3C               	movlw	60
   537   0015AC  6E2D               	movwf	(_calibration+2)^0,c
   538   0015AE                     
   539                           ; BSR set to: 14
   540                           ;main.c: 67:     calibration.right_90 = 10;
   541   0015AE  0E0A               	movlw	10
   542   0015B0  6E2E               	movwf	(_calibration+3)^0,c
   543   0015B2                     
   544                           ; BSR set to: 14
   545                           ;main.c: 68:     calibration.left_135 = 60;
   546   0015B2  0E3C               	movlw	60
   547   0015B4  6E2F               	movwf	(_calibration+4)^0,c
   548   0015B6                     
   549                           ; BSR set to: 14
   550                           ;main.c: 69:     calibration.right_135 = 10;
   551   0015B6  0E0A               	movlw	10
   552   0015B8  6E30               	movwf	(_calibration+5)^0,c
   553   0015BA                     
   554                           ; BSR set to: 14
   555                           ;main.c: 70:     calibration.forward = 10;
   556   0015BA  0E0A               	movlw	10
   557   0015BC  6E31               	movwf	(_calibration+6)^0,c
   558   0015BE                     
   559                           ; BSR set to: 14
   560                           ;main.c: 71:     calibration.forward_motorL = 20;
   561   0015BE  0E14               	movlw	20
   562   0015C0  6E32               	movwf	(_calibration+7)^0,c
   563   0015C2                     
   564                           ; BSR set to: 14
   565                           ;main.c: 72:     calibration.forward_motorR = 20;
   566   0015C2  0E14               	movlw	20
   567   0015C4  6E33               	movwf	(_calibration+8)^0,c
   568   0015C6                     l2065:
   569                           
   570                           ;main.c: 83:         if(calibration.index == 1){
   571   0015C6  042B               	decf	_calibration^0,w,c
   572   0015C8  A4D8               	btfss	status,2,c
   573   0015CA  EFE9  F00A         	goto	u1471
   574   0015CE  EFEB  F00A         	goto	u1470
   575   0015D2                     u1471:
   576   0015D2  EFFA  F00A         	goto	l2073
   577   0015D6                     u1470:
   578   0015D6                     
   579                           ;main.c: 84:             adjust_calibration(&calibration.right_90);
   580   0015D6  0E2E               	movlw	low (_calibration+3)
   581   0015D8  6E34               	movwf	adjust_calibration@calibration_label^0,c
   582   0015DA  ECF7  F009         	call	_adjust_calibration	;wreg free
   583   0015DE                     
   584                           ;main.c: 85:             turnRIGHT(calibration.right_90, &motorL, &motorR);
   585   0015DE  0E22               	movlw	low _motorL
   586   0015E0  6E46               	movwf	turnRIGHT@mL^0,c
   587   0015E2  0E19               	movlw	low _motorR
   588   0015E4  6E47               	movwf	turnRIGHT@mR^0,c
   589   0015E6  502E               	movf	(_calibration+3)^0,w,c
   590   0015E8  ECCF  F007         	call	_turnRIGHT
   591   0015EC                     
   592                           ;main.c: 86:             switch_calibration(&calibration.index);
   593   0015EC  0E2B               	movlw	low _calibration
   594   0015EE  6E34               	movwf	switch_calibration@calibration_index^0,c
   595   0015F0  EC97  F00B         	call	_switch_calibration	;wreg free
   596   0015F4                     l2073:
   597                           
   598                           ;main.c: 90:         if(calibration.index == 2){
   599   0015F4  0E02               	movlw	2
   600   0015F6  182B               	xorwf	_calibration^0,w,c
   601   0015F8  A4D8               	btfss	status,2,c
   602   0015FA  EF01  F00B         	goto	u1481
   603   0015FE  EF03  F00B         	goto	u1480
   604   001602                     u1481:
   605   001602  EF12  F00B         	goto	l2081
   606   001606                     u1480:
   607   001606                     
   608                           ;main.c: 91:             adjust_calibration(&calibration.left_90);
   609   001606  0E2D               	movlw	low (_calibration+2)
   610   001608  6E34               	movwf	adjust_calibration@calibration_label^0,c
   611   00160A  ECF7  F009         	call	_adjust_calibration	;wreg free
   612   00160E                     
   613                           ;main.c: 92:             turnLEFT(calibration.left_90, &motorL, &motorR);
   614   00160E  0E22               	movlw	low _motorL
   615   001610  6E46               	movwf	turnLEFT@mL^0,c
   616   001612  0E19               	movlw	low _motorR
   617   001614  6E47               	movwf	turnLEFT@mR^0,c
   618   001616  502D               	movf	(_calibration+2)^0,w,c
   619   001618  EC8E  F008         	call	_turnLEFT
   620   00161C                     
   621                           ;main.c: 93:             switch_calibration(&calibration.index);
   622   00161C  0E2B               	movlw	low _calibration
   623   00161E  6E34               	movwf	switch_calibration@calibration_index^0,c
   624   001620  EC97  F00B         	call	_switch_calibration	;wreg free
   625   001624                     l2081:
   626                           
   627                           ;main.c: 97:         if(calibration.index == 3){
   628   001624  0E03               	movlw	3
   629   001626  182B               	xorwf	_calibration^0,w,c
   630   001628  A4D8               	btfss	status,2,c
   631   00162A  EF19  F00B         	goto	u1491
   632   00162E  EF1B  F00B         	goto	u1490
   633   001632                     u1491:
   634   001632  EF2A  F00B         	goto	l2089
   635   001636                     u1490:
   636   001636                     
   637                           ;main.c: 98:             adjust_calibration(&calibration.forward);
   638   001636  0E31               	movlw	low (_calibration+6)
   639   001638  6E34               	movwf	adjust_calibration@calibration_label^0,c
   640   00163A  ECF7  F009         	call	_adjust_calibration	;wreg free
   641   00163E                     
   642                           ;main.c: 99:             forward(calibration.forward, &motorL, &motorR);
   643   00163E  0E22               	movlw	low _motorL
   644   001640  6E46               	movwf	forward@mL^0,c
   645   001642  0E19               	movlw	low _motorR
   646   001644  6E47               	movwf	forward@mR^0,c
   647   001646  5031               	movf	(_calibration+6)^0,w,c
   648   001648  EC0F  F007         	call	_forward
   649   00164C                     
   650                           ;main.c: 100:             switch_calibration(&calibration.index);
   651   00164C  0E2B               	movlw	low _calibration
   652   00164E  6E34               	movwf	switch_calibration@calibration_index^0,c
   653   001650  EC97  F00B         	call	_switch_calibration	;wreg free
   654   001654                     l2089:
   655                           
   656                           ;main.c: 108:         if(calibration.index == 4){
   657   001654  0E04               	movlw	4
   658   001656  182B               	xorwf	_calibration^0,w,c
   659   001658  A4D8               	btfss	status,2,c
   660   00165A  EF31  F00B         	goto	u1501
   661   00165E  EF33  F00B         	goto	u1500
   662   001662                     u1501:
   663   001662  EFE3  F00A         	goto	l2065
   664   001666                     u1500:
   665   001666  EF00  F000         	goto	start
   666   00166A                     __end_of_main:
   667                           	callstack 0
   668                           
   669 ;; *************** function _turnRIGHT *****************
   670 ;; Defined at:
   671 ;;		line 206 in file "dc_motor_v1.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;  rotation_cal    1    wreg     unsigned char 
   674 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   675 ;;		 -> motorL(9), 
   676 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   677 ;;		 -> motorR(9), 
   678 ;; Auto vars:     Size  Location     Type
   679 ;;  rotation_cal    1   23[COMRAM] unsigned char 
   680 ;;  j               2   26[COMRAM] int 
   681 ;;  i               2   24[COMRAM] int 
   682 ;;  delay_time      2   30[COMRAM] int 
   683 ;;  max_power       2   28[COMRAM] int 
   684 ;;  acceleration    2    0        int 
   685 ;; Return value:  Size  Location     Type
   686 ;;                  1    wreg      void 
   687 ;; Registers used:
   688 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   689 ;; Tracked objects:
   690 ;;		On entry : 0/0
   691 ;;		On exit  : 0/0
   692 ;;		Unchanged: 0/0
   693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   694 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   695 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   696 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   697 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   698 ;;Total ram usage:       14 bytes
   699 ;; Hardware stack levels used: 1
   700 ;; Hardware stack levels required when called: 2
   701 ;; This function calls:
   702 ;;		___awdiv
   703 ;;		_delay_ms_function
   704 ;;		_setMotorPWM
   705 ;; This function is called by:
   706 ;;		_main
   707 ;; This function uses a non-reentrant model
   708 ;;
   709                           
   710                           	psect	text1
   711   000F9E                     __ptext1:
   712                           	callstack 0
   713   000F9E                     _turnRIGHT:
   714                           	callstack 28
   715                           
   716                           ;incstack = 0
   717                           ;turnRIGHT@rotation_calibration stored from wreg
   718   000F9E  6E4B               	movwf	turnRIGHT@rotation_calibration^0,c
   719   000FA0                     
   720                           ;dc_motor_v1.c: 207:     mL->direction = 1;
   721   000FA0  5046               	movf	turnRIGHT@mL^0,w,c
   722   000FA2  6ED9               	movwf	fsr2l,c
   723   000FA4  6ADA               	clrf	fsr2h,c
   724   000FA6  0E01               	movlw	1
   725   000FA8  26D9               	addwf	fsr2l,f,c
   726   000FAA  0E01               	movlw	1
   727   000FAC  6EDF               	movwf	indf2,c
   728                           
   729                           ;dc_motor_v1.c: 208:     mR->direction = 0;
   730   000FAE  5047               	movf	turnRIGHT@mR^0,w,c
   731   000FB0  6ED9               	movwf	fsr2l,c
   732   000FB2  6ADA               	clrf	fsr2h,c
   733   000FB4  0E01               	movlw	1
   734   000FB6  26D9               	addwf	fsr2l,f,c
   735   000FB8  6ADF               	clrf	indf2,c
   736   000FBA                     
   737                           ;dc_motor_v1.c: 210:    int max_power = 20;
   738   000FBA  0E00               	movlw	0
   739   000FBC  6E51               	movwf	(turnRIGHT@max_power+1)^0,c
   740   000FBE  0E14               	movlw	20
   741   000FC0  6E50               	movwf	turnRIGHT@max_power^0,c
   742   000FC2                     
   743                           ;dc_motor_v1.c: 212:     int delay_time = acceleration_time/max_power;
   744   000FC2  0E00               	movlw	0
   745   000FC4  6E35               	movwf	(___awdiv@dividend+1)^0,c
   746   000FC6  0E64               	movlw	100
   747   000FC8  6E34               	movwf	___awdiv@dividend^0,c
   748   000FCA  0E00               	movlw	0
   749   000FCC  6E37               	movwf	(___awdiv@divisor+1)^0,c
   750   000FCE  0E14               	movlw	20
   751   000FD0  6E36               	movwf	___awdiv@divisor^0,c
   752   000FD2  EC35  F00B         	call	___awdiv	;wreg free
   753   000FD6  C034  F052         	movff	?___awdiv,turnRIGHT@delay_time
   754   000FDA  C035  F053         	movff	?___awdiv+1,turnRIGHT@delay_time+1
   755   000FDE                     
   756                           ;dc_motor_v1.c: 215:     for(int i=0; i< max_power; i++){
   757   000FDE  0E00               	movlw	0
   758   000FE0  6E4D               	movwf	(turnRIGHT@i+1)^0,c
   759   000FE2  0E00               	movlw	0
   760   000FE4  6E4C               	movwf	turnRIGHT@i^0,c
   761   000FE6  EF19  F008         	goto	l1957
   762   000FEA                     l1947:
   763                           
   764                           ;dc_motor_v1.c: 216:         mL->power = mL->power + 1;
   765   000FEA  5046               	movf	turnRIGHT@mL^0,w,c
   766   000FEC  6ED9               	movwf	fsr2l,c
   767   000FEE  6ADA               	clrf	fsr2h,c
   768   000FF0  5046               	movf	turnRIGHT@mL^0,w,c
   769   000FF2  6EE1               	movwf	fsr1l,c
   770   000FF4  6AE2               	clrf	fsr1h,c
   771   000FF6  50E7               	movf	indf1,w,c
   772   000FF8  6E48               	movwf	??_turnRIGHT^0,c
   773   000FFA  2848               	incf	??_turnRIGHT^0,w,c
   774   000FFC  6EDF               	movwf	indf2,c
   775                           
   776                           ;dc_motor_v1.c: 217:         mR->power = mR->power + 1 ;
   777   000FFE  5047               	movf	turnRIGHT@mR^0,w,c
   778   001000  6ED9               	movwf	fsr2l,c
   779   001002  6ADA               	clrf	fsr2h,c
   780   001004  5047               	movf	turnRIGHT@mR^0,w,c
   781   001006  6EE1               	movwf	fsr1l,c
   782   001008  6AE2               	clrf	fsr1h,c
   783   00100A  50E7               	movf	indf1,w,c
   784   00100C  6E48               	movwf	??_turnRIGHT^0,c
   785   00100E  2848               	incf	??_turnRIGHT^0,w,c
   786   001010  6EDF               	movwf	indf2,c
   787   001012                     
   788                           ;dc_motor_v1.c: 218:         setMotorPWM(mR);
   789   001012  C047  F041         	movff	turnRIGHT@mR,setMotorPWM@m
   790   001016  EC4D  F009         	call	_setMotorPWM	;wreg free
   791   00101A                     
   792                           ;dc_motor_v1.c: 219:         setMotorPWM(mL);
   793   00101A  C046  F041         	movff	turnRIGHT@mL,setMotorPWM@m
   794   00101E  EC4D  F009         	call	_setMotorPWM	;wreg free
   795   001022                     
   796                           ;dc_motor_v1.c: 220:         delay_ms_function(delay_time);
   797   001022  C052  F034         	movff	turnRIGHT@delay_time,delay_ms_function@milliseconds
   798   001026  C053  F035         	movff	turnRIGHT@delay_time+1,delay_ms_function@milliseconds+1
   799   00102A  EC8E  F00C         	call	_delay_ms_function	;wreg free
   800   00102E                     
   801                           ;dc_motor_v1.c: 221:     }
   802   00102E  4A4C               	infsnz	turnRIGHT@i^0,f,c
   803   001030  2A4D               	incf	(turnRIGHT@i+1)^0,f,c
   804   001032                     l1957:
   805   001032  5050               	movf	turnRIGHT@max_power^0,w,c
   806   001034  5C4C               	subwf	turnRIGHT@i^0,w,c
   807   001036  504D               	movf	(turnRIGHT@i+1)^0,w,c
   808   001038  0A80               	xorlw	128
   809   00103A  6E48               	movwf	??_turnRIGHT^0,c
   810   00103C  5051               	movf	(turnRIGHT@max_power+1)^0,w,c
   811   00103E  0A80               	xorlw	128
   812   001040  5848               	subwfb	??_turnRIGHT^0,w,c
   813   001042  A0D8               	btfss	status,0,c
   814   001044  EF26  F008         	goto	u1371
   815   001048  EF28  F008         	goto	u1370
   816   00104C                     u1371:
   817   00104C  EFF5  F007         	goto	l1947
   818   001050                     u1370:
   819   001050                     
   820                           ;dc_motor_v1.c: 224:     for(int j=0; j<rotation_calibration; j++){
   821   001050  0E00               	movlw	0
   822   001052  6E4F               	movwf	(turnRIGHT@j+1)^0,c
   823   001054  0E00               	movlw	0
   824   001056  6E4E               	movwf	turnRIGHT@j^0,c
   825   001058  EF37  F008         	goto	l274
   826   00105C                     l1961:
   827                           
   828                           ;dc_motor_v1.c: 225:         _delay((unsigned long)((10)*(64000000/4000.0)));
   829   00105C  0ED0               	movlw	208
   830   00105E  6E48               	movwf	??_turnRIGHT^0,c
   831   001060  0ECA               	movlw	202
   832   001062                     u1517:
   833   001062  2EE8               	decfsz	wreg,f,c
   834   001064  D7FE               	bra	u1517
   835   001066  2E48               	decfsz	??_turnRIGHT^0,f,c
   836   001068  D7FC               	bra	u1517
   837   00106A                     
   838                           ;dc_motor_v1.c: 226:     }
   839   00106A  4A4E               	infsnz	turnRIGHT@j^0,f,c
   840   00106C  2A4F               	incf	(turnRIGHT@j+1)^0,f,c
   841   00106E                     l274:
   842   00106E  504B               	movf	turnRIGHT@rotation_calibration^0,w,c
   843   001070  6E48               	movwf	??_turnRIGHT^0,c
   844   001072  6A49               	clrf	(??_turnRIGHT+1)^0,c
   845   001074  5048               	movf	??_turnRIGHT^0,w,c
   846   001076  5C4E               	subwf	turnRIGHT@j^0,w,c
   847   001078  504F               	movf	(turnRIGHT@j+1)^0,w,c
   848   00107A  0A80               	xorlw	128
   849   00107C  6E4A               	movwf	(??_turnRIGHT+2)^0,c
   850   00107E  5049               	movf	(??_turnRIGHT+1)^0,w,c
   851   001080  0A80               	xorlw	128
   852   001082  584A               	subwfb	(??_turnRIGHT+2)^0,w,c
   853   001084  A0D8               	btfss	status,0,c
   854   001086  EF47  F008         	goto	u1381
   855   00108A  EF49  F008         	goto	u1380
   856   00108E                     u1381:
   857   00108E  EF2E  F008         	goto	l1961
   858   001092                     u1380:
   859   001092  EF77  F008         	goto	l1979
   860   001096                     l1965:
   861                           
   862                           ;dc_motor_v1.c: 230:         if(mR->power> 0 ){
   863   001096  5047               	movf	turnRIGHT@mR^0,w,c
   864   001098  6ED9               	movwf	fsr2l,c
   865   00109A  6ADA               	clrf	fsr2h,c
   866   00109C  50DF               	movf	indf2,w,c
   867   00109E  B4D8               	btfsc	status,2,c
   868   0010A0  EF54  F008         	goto	u1391
   869   0010A4  EF56  F008         	goto	u1390
   870   0010A8                     u1391:
   871   0010A8  EF5A  F008         	goto	l1969
   872   0010AC                     u1390:
   873   0010AC                     
   874                           ;dc_motor_v1.c: 231:             mR->power--;
   875   0010AC  5047               	movf	turnRIGHT@mR^0,w,c
   876   0010AE  6ED9               	movwf	fsr2l,c
   877   0010B0  6ADA               	clrf	fsr2h,c
   878   0010B2  06DF               	decf	indf2,f,c
   879   0010B4                     l1969:
   880                           
   881                           ;dc_motor_v1.c: 233:         if(mL->power> 0 ){
   882   0010B4  5046               	movf	turnRIGHT@mL^0,w,c
   883   0010B6  6ED9               	movwf	fsr2l,c
   884   0010B8  6ADA               	clrf	fsr2h,c
   885   0010BA  50DF               	movf	indf2,w,c
   886   0010BC  B4D8               	btfsc	status,2,c
   887   0010BE  EF63  F008         	goto	u1401
   888   0010C2  EF65  F008         	goto	u1400
   889   0010C6                     u1401:
   890   0010C6  EF69  F008         	goto	l1973
   891   0010CA                     u1400:
   892   0010CA                     
   893                           ;dc_motor_v1.c: 234:             mL->power--;
   894   0010CA  5046               	movf	turnRIGHT@mL^0,w,c
   895   0010CC  6ED9               	movwf	fsr2l,c
   896   0010CE  6ADA               	clrf	fsr2h,c
   897   0010D0  06DF               	decf	indf2,f,c
   898   0010D2                     l1973:
   899                           
   900                           ;dc_motor_v1.c: 236:         setMotorPWM(mR);
   901   0010D2  C047  F041         	movff	turnRIGHT@mR,setMotorPWM@m
   902   0010D6  EC4D  F009         	call	_setMotorPWM	;wreg free
   903   0010DA                     
   904                           ;dc_motor_v1.c: 237:         setMotorPWM(mL);
   905   0010DA  C046  F041         	movff	turnRIGHT@mL,setMotorPWM@m
   906   0010DE  EC4D  F009         	call	_setMotorPWM	;wreg free
   907   0010E2                     
   908                           ;dc_motor_v1.c: 238:         delay_ms_function(delay_time);
   909   0010E2  C052  F034         	movff	turnRIGHT@delay_time,delay_ms_function@milliseconds
   910   0010E6  C053  F035         	movff	turnRIGHT@delay_time+1,delay_ms_function@milliseconds+1
   911   0010EA  EC8E  F00C         	call	_delay_ms_function	;wreg free
   912   0010EE                     l1979:
   913                           
   914                           ;dc_motor_v1.c: 229:     while(mL->power || mR->power > 0){
   915   0010EE  5046               	movf	turnRIGHT@mL^0,w,c
   916   0010F0  6ED9               	movwf	fsr2l,c
   917   0010F2  6ADA               	clrf	fsr2h,c
   918   0010F4  50DF               	movf	indf2,w,c
   919   0010F6  A4D8               	btfss	status,2,c
   920   0010F8  EF80  F008         	goto	u1411
   921   0010FC  EF82  F008         	goto	u1410
   922   001100                     u1411:
   923   001100  EF4B  F008         	goto	l1965
   924   001104                     u1410:
   925   001104  5047               	movf	turnRIGHT@mR^0,w,c
   926   001106  6ED9               	movwf	fsr2l,c
   927   001108  6ADA               	clrf	fsr2h,c
   928   00110A  50DF               	movf	indf2,w,c
   929   00110C  A4D8               	btfss	status,2,c
   930   00110E  EF8B  F008         	goto	u1421
   931   001112  EF8D  F008         	goto	u1420
   932   001116                     u1421:
   933   001116  EF4B  F008         	goto	l1965
   934   00111A                     u1420:
   935   00111A  0012               	return		;funcret
   936   00111C                     __end_of_turnRIGHT:
   937                           	callstack 0
   938                           
   939 ;; *************** function _turnLEFT *****************
   940 ;; Defined at:
   941 ;;		line 168 in file "dc_motor_v1.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;  rotation_cal    1    wreg     unsigned char 
   944 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   945 ;;		 -> motorL(9), 
   946 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   947 ;;		 -> motorR(9), 
   948 ;; Auto vars:     Size  Location     Type
   949 ;;  rotation_cal    1   23[COMRAM] unsigned char 
   950 ;;  j               2   26[COMRAM] int 
   951 ;;  i               2   24[COMRAM] int 
   952 ;;  delay_time      2   30[COMRAM] int 
   953 ;;  max_power       2   28[COMRAM] int 
   954 ;;  acceleration    2    0        int 
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      void 
   957 ;; Registers used:
   958 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   964 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   965 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   966 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   967 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   968 ;;Total ram usage:       14 bytes
   969 ;; Hardware stack levels used: 1
   970 ;; Hardware stack levels required when called: 2
   971 ;; This function calls:
   972 ;;		___awdiv
   973 ;;		_delay_ms_function
   974 ;;		_setMotorPWM
   975 ;; This function is called by:
   976 ;;		_main
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           	psect	text2
   981   00111C                     __ptext2:
   982                           	callstack 0
   983   00111C                     _turnLEFT:
   984                           	callstack 28
   985                           
   986                           ;incstack = 0
   987                           ;turnLEFT@rotation_calibration stored from wreg
   988   00111C  6E4B               	movwf	turnLEFT@rotation_calibration^0,c
   989   00111E                     
   990                           ;dc_motor_v1.c: 169:     mL->direction = 0;
   991   00111E  5046               	movf	turnLEFT@mL^0,w,c
   992   001120  6ED9               	movwf	fsr2l,c
   993   001122  6ADA               	clrf	fsr2h,c
   994   001124  0E01               	movlw	1
   995   001126  26D9               	addwf	fsr2l,f,c
   996   001128  6ADF               	clrf	indf2,c
   997                           
   998                           ;dc_motor_v1.c: 170:     mR->direction = 1;
   999   00112A  5047               	movf	turnLEFT@mR^0,w,c
  1000   00112C  6ED9               	movwf	fsr2l,c
  1001   00112E  6ADA               	clrf	fsr2h,c
  1002   001130  0E01               	movlw	1
  1003   001132  26D9               	addwf	fsr2l,f,c
  1004   001134  0E01               	movlw	1
  1005   001136  6EDF               	movwf	indf2,c
  1006   001138                     
  1007                           ;dc_motor_v1.c: 172:     int max_power = 20;
  1008   001138  0E00               	movlw	0
  1009   00113A  6E51               	movwf	(turnLEFT@max_power+1)^0,c
  1010   00113C  0E14               	movlw	20
  1011   00113E  6E50               	movwf	turnLEFT@max_power^0,c
  1012   001140                     
  1013                           ;dc_motor_v1.c: 174:     int delay_time = acceleration_time/max_power;
  1014   001140  0E00               	movlw	0
  1015   001142  6E35               	movwf	(___awdiv@dividend+1)^0,c
  1016   001144  0E64               	movlw	100
  1017   001146  6E34               	movwf	___awdiv@dividend^0,c
  1018   001148  0E00               	movlw	0
  1019   00114A  6E37               	movwf	(___awdiv@divisor+1)^0,c
  1020   00114C  0E14               	movlw	20
  1021   00114E  6E36               	movwf	___awdiv@divisor^0,c
  1022   001150  EC35  F00B         	call	___awdiv	;wreg free
  1023   001154  C034  F052         	movff	?___awdiv,turnLEFT@delay_time
  1024   001158  C035  F053         	movff	?___awdiv+1,turnLEFT@delay_time+1
  1025   00115C                     
  1026                           ;dc_motor_v1.c: 177:     for(int i=0; i< max_power; i++){
  1027   00115C  0E00               	movlw	0
  1028   00115E  6E4D               	movwf	(turnLEFT@i+1)^0,c
  1029   001160  0E00               	movlw	0
  1030   001162  6E4C               	movwf	turnLEFT@i^0,c
  1031   001164  EFD8  F008         	goto	l1911
  1032   001168                     l1901:
  1033                           
  1034                           ;dc_motor_v1.c: 178:         mL->power = mL->power + 1;
  1035   001168  5046               	movf	turnLEFT@mL^0,w,c
  1036   00116A  6ED9               	movwf	fsr2l,c
  1037   00116C  6ADA               	clrf	fsr2h,c
  1038   00116E  5046               	movf	turnLEFT@mL^0,w,c
  1039   001170  6EE1               	movwf	fsr1l,c
  1040   001172  6AE2               	clrf	fsr1h,c
  1041   001174  50E7               	movf	indf1,w,c
  1042   001176  6E48               	movwf	??_turnLEFT^0,c
  1043   001178  2848               	incf	??_turnLEFT^0,w,c
  1044   00117A  6EDF               	movwf	indf2,c
  1045                           
  1046                           ;dc_motor_v1.c: 179:         mR->power = mR->power + 1 ;
  1047   00117C  5047               	movf	turnLEFT@mR^0,w,c
  1048   00117E  6ED9               	movwf	fsr2l,c
  1049   001180  6ADA               	clrf	fsr2h,c
  1050   001182  5047               	movf	turnLEFT@mR^0,w,c
  1051   001184  6EE1               	movwf	fsr1l,c
  1052   001186  6AE2               	clrf	fsr1h,c
  1053   001188  50E7               	movf	indf1,w,c
  1054   00118A  6E48               	movwf	??_turnLEFT^0,c
  1055   00118C  2848               	incf	??_turnLEFT^0,w,c
  1056   00118E  6EDF               	movwf	indf2,c
  1057   001190                     
  1058                           ;dc_motor_v1.c: 180:         setMotorPWM(mR);
  1059   001190  C047  F041         	movff	turnLEFT@mR,setMotorPWM@m
  1060   001194  EC4D  F009         	call	_setMotorPWM	;wreg free
  1061   001198                     
  1062                           ;dc_motor_v1.c: 181:         setMotorPWM(mL);
  1063   001198  C046  F041         	movff	turnLEFT@mL,setMotorPWM@m
  1064   00119C  EC4D  F009         	call	_setMotorPWM	;wreg free
  1065   0011A0                     
  1066                           ;dc_motor_v1.c: 182:         delay_ms_function(delay_time);
  1067   0011A0  C052  F034         	movff	turnLEFT@delay_time,delay_ms_function@milliseconds
  1068   0011A4  C053  F035         	movff	turnLEFT@delay_time+1,delay_ms_function@milliseconds+1
  1069   0011A8  EC8E  F00C         	call	_delay_ms_function	;wreg free
  1070   0011AC                     
  1071                           ;dc_motor_v1.c: 183:     }
  1072   0011AC  4A4C               	infsnz	turnLEFT@i^0,f,c
  1073   0011AE  2A4D               	incf	(turnLEFT@i+1)^0,f,c
  1074   0011B0                     l1911:
  1075   0011B0  5050               	movf	turnLEFT@max_power^0,w,c
  1076   0011B2  5C4C               	subwf	turnLEFT@i^0,w,c
  1077   0011B4  504D               	movf	(turnLEFT@i+1)^0,w,c
  1078   0011B6  0A80               	xorlw	128
  1079   0011B8  6E48               	movwf	??_turnLEFT^0,c
  1080   0011BA  5051               	movf	(turnLEFT@max_power+1)^0,w,c
  1081   0011BC  0A80               	xorlw	128
  1082   0011BE  5848               	subwfb	??_turnLEFT^0,w,c
  1083   0011C0  A0D8               	btfss	status,0,c
  1084   0011C2  EFE5  F008         	goto	u1311
  1085   0011C6  EFE7  F008         	goto	u1310
  1086   0011CA                     u1311:
  1087   0011CA  EFB4  F008         	goto	l1901
  1088   0011CE                     u1310:
  1089   0011CE                     
  1090                           ;dc_motor_v1.c: 186:     for(int j=0; j<rotation_calibration; j++){
  1091   0011CE  0E00               	movlw	0
  1092   0011D0  6E4F               	movwf	(turnLEFT@j+1)^0,c
  1093   0011D2  0E00               	movlw	0
  1094   0011D4  6E4E               	movwf	turnLEFT@j^0,c
  1095   0011D6  EFF6  F008         	goto	l260
  1096   0011DA                     l1915:
  1097                           
  1098                           ;dc_motor_v1.c: 187:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1099   0011DA  0ED0               	movlw	208
  1100   0011DC  6E48               	movwf	??_turnLEFT^0,c
  1101   0011DE  0ECA               	movlw	202
  1102   0011E0                     u1527:
  1103   0011E0  2EE8               	decfsz	wreg,f,c
  1104   0011E2  D7FE               	bra	u1527
  1105   0011E4  2E48               	decfsz	??_turnLEFT^0,f,c
  1106   0011E6  D7FC               	bra	u1527
  1107   0011E8                     
  1108                           ;dc_motor_v1.c: 188:     }
  1109   0011E8  4A4E               	infsnz	turnLEFT@j^0,f,c
  1110   0011EA  2A4F               	incf	(turnLEFT@j+1)^0,f,c
  1111   0011EC                     l260:
  1112   0011EC  504B               	movf	turnLEFT@rotation_calibration^0,w,c
  1113   0011EE  6E48               	movwf	??_turnLEFT^0,c
  1114   0011F0  6A49               	clrf	(??_turnLEFT+1)^0,c
  1115   0011F2  5048               	movf	??_turnLEFT^0,w,c
  1116   0011F4  5C4E               	subwf	turnLEFT@j^0,w,c
  1117   0011F6  504F               	movf	(turnLEFT@j+1)^0,w,c
  1118   0011F8  0A80               	xorlw	128
  1119   0011FA  6E4A               	movwf	(??_turnLEFT+2)^0,c
  1120   0011FC  5049               	movf	(??_turnLEFT+1)^0,w,c
  1121   0011FE  0A80               	xorlw	128
  1122   001200  584A               	subwfb	(??_turnLEFT+2)^0,w,c
  1123   001202  A0D8               	btfss	status,0,c
  1124   001204  EF06  F009         	goto	u1321
  1125   001208  EF08  F009         	goto	u1320
  1126   00120C                     u1321:
  1127   00120C  EFED  F008         	goto	l1915
  1128   001210                     u1320:
  1129   001210  EF36  F009         	goto	l1933
  1130   001214                     l1919:
  1131                           
  1132                           ;dc_motor_v1.c: 192:         if(mR->power> 0 ){
  1133   001214  5047               	movf	turnLEFT@mR^0,w,c
  1134   001216  6ED9               	movwf	fsr2l,c
  1135   001218  6ADA               	clrf	fsr2h,c
  1136   00121A  50DF               	movf	indf2,w,c
  1137   00121C  B4D8               	btfsc	status,2,c
  1138   00121E  EF13  F009         	goto	u1331
  1139   001222  EF15  F009         	goto	u1330
  1140   001226                     u1331:
  1141   001226  EF19  F009         	goto	l1923
  1142   00122A                     u1330:
  1143   00122A                     
  1144                           ;dc_motor_v1.c: 193:             mR->power--;
  1145   00122A  5047               	movf	turnLEFT@mR^0,w,c
  1146   00122C  6ED9               	movwf	fsr2l,c
  1147   00122E  6ADA               	clrf	fsr2h,c
  1148   001230  06DF               	decf	indf2,f,c
  1149   001232                     l1923:
  1150                           
  1151                           ;dc_motor_v1.c: 195:         if(mL->power> 0 ){
  1152   001232  5046               	movf	turnLEFT@mL^0,w,c
  1153   001234  6ED9               	movwf	fsr2l,c
  1154   001236  6ADA               	clrf	fsr2h,c
  1155   001238  50DF               	movf	indf2,w,c
  1156   00123A  B4D8               	btfsc	status,2,c
  1157   00123C  EF22  F009         	goto	u1341
  1158   001240  EF24  F009         	goto	u1340
  1159   001244                     u1341:
  1160   001244  EF28  F009         	goto	l1927
  1161   001248                     u1340:
  1162   001248                     
  1163                           ;dc_motor_v1.c: 196:             mL->power--;
  1164   001248  5046               	movf	turnLEFT@mL^0,w,c
  1165   00124A  6ED9               	movwf	fsr2l,c
  1166   00124C  6ADA               	clrf	fsr2h,c
  1167   00124E  06DF               	decf	indf2,f,c
  1168   001250                     l1927:
  1169                           
  1170                           ;dc_motor_v1.c: 198:         setMotorPWM(mR);
  1171   001250  C047  F041         	movff	turnLEFT@mR,setMotorPWM@m
  1172   001254  EC4D  F009         	call	_setMotorPWM	;wreg free
  1173   001258                     
  1174                           ;dc_motor_v1.c: 199:         setMotorPWM(mL);
  1175   001258  C046  F041         	movff	turnLEFT@mL,setMotorPWM@m
  1176   00125C  EC4D  F009         	call	_setMotorPWM	;wreg free
  1177   001260                     
  1178                           ;dc_motor_v1.c: 200:         delay_ms_function(delay_time);
  1179   001260  C052  F034         	movff	turnLEFT@delay_time,delay_ms_function@milliseconds
  1180   001264  C053  F035         	movff	turnLEFT@delay_time+1,delay_ms_function@milliseconds+1
  1181   001268  EC8E  F00C         	call	_delay_ms_function	;wreg free
  1182   00126C                     l1933:
  1183                           
  1184                           ;dc_motor_v1.c: 191:     while(mL->power || mR->power > 0){
  1185   00126C  5046               	movf	turnLEFT@mL^0,w,c
  1186   00126E  6ED9               	movwf	fsr2l,c
  1187   001270  6ADA               	clrf	fsr2h,c
  1188   001272  50DF               	movf	indf2,w,c
  1189   001274  A4D8               	btfss	status,2,c
  1190   001276  EF3F  F009         	goto	u1351
  1191   00127A  EF41  F009         	goto	u1350
  1192   00127E                     u1351:
  1193   00127E  EF0A  F009         	goto	l1919
  1194   001282                     u1350:
  1195   001282  5047               	movf	turnLEFT@mR^0,w,c
  1196   001284  6ED9               	movwf	fsr2l,c
  1197   001286  6ADA               	clrf	fsr2h,c
  1198   001288  50DF               	movf	indf2,w,c
  1199   00128A  A4D8               	btfss	status,2,c
  1200   00128C  EF4A  F009         	goto	u1361
  1201   001290  EF4C  F009         	goto	u1360
  1202   001294                     u1361:
  1203   001294  EF0A  F009         	goto	l1919
  1204   001298                     u1360:
  1205   001298  0012               	return		;funcret
  1206   00129A                     __end_of_turnLEFT:
  1207                           	callstack 0
  1208                           
  1209 ;; *************** function _switch_calibration *****************
  1210 ;; Defined at:
  1211 ;;		line 44 in file "calibration.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;  calibration_    1    0[COMRAM] PTR int 
  1214 ;;		 -> calibration(9), 
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;		None
  1217 ;; Return value:  Size  Location     Type
  1218 ;;                  1    wreg      void 
  1219 ;; Registers used:
  1220 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1221 ;; Tracked objects:
  1222 ;;		On entry : 0/0
  1223 ;;		On exit  : 0/0
  1224 ;;		Unchanged: 0/0
  1225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1226 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1228 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1229 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1230 ;;Total ram usage:        3 bytes
  1231 ;; Hardware stack levels used: 1
  1232 ;; This function calls:
  1233 ;;		Nothing
  1234 ;; This function is called by:
  1235 ;;		_main
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           	psect	text3
  1240   00172E                     __ptext3:
  1241                           	callstack 0
  1242   00172E                     _switch_calibration:
  1243                           	callstack 30
  1244   00172E                     l153:
  1245                           
  1246                           ;calibration.c: 46:         if(!PORTFbits.RF2){
  1247   00172E  B48E               	btfsc	142,2,c	;volatile
  1248   001730  EF9C  F00B         	goto	u1231
  1249   001734  EF9E  F00B         	goto	u1230
  1250   001738                     u1231:
  1251   001738  EFCC  F00B         	goto	l154
  1252   00173C                     u1230:
  1253   00173C                     
  1254                           ;calibration.c: 47:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1255   00173C  0E11               	movlw	17
  1256   00173E  6E36               	movwf	(??_switch_calibration+1)^0,c
  1257   001740  0E3C               	movlw	60
  1258   001742  6E35               	movwf	??_switch_calibration^0,c
  1259   001744  0ECB               	movlw	203
  1260   001746                     u1537:
  1261   001746  2EE8               	decfsz	wreg,f,c
  1262   001748  D7FE               	bra	u1537
  1263   00174A  2E35               	decfsz	??_switch_calibration^0,f,c
  1264   00174C  D7FC               	bra	u1537
  1265   00174E  2E36               	decfsz	(??_switch_calibration+1)^0,f,c
  1266   001750  D7FA               	bra	u1537
  1267   001752  0000               	nop	
  1268   001754                     
  1269                           ;calibration.c: 48:             *calibration_index = *calibration_index + 1;
  1270   001754  5034               	movf	switch_calibration@calibration_index^0,w,c
  1271   001756  6ED9               	movwf	fsr2l,c
  1272   001758  6ADA               	clrf	fsr2h,c
  1273   00175A  CFDE F035          	movff	postinc2,??_switch_calibration
  1274   00175E  CFDD F036          	movff	postdec2,??_switch_calibration+1
  1275   001762  0E01               	movlw	1
  1276   001764  2635               	addwf	??_switch_calibration^0,f,c
  1277   001766  0E00               	movlw	0
  1278   001768  2236               	addwfc	(??_switch_calibration+1)^0,f,c
  1279   00176A  5034               	movf	switch_calibration@calibration_index^0,w,c
  1280   00176C  6ED9               	movwf	fsr2l,c
  1281   00176E  6ADA               	clrf	fsr2h,c
  1282   001770  C035  FFDE         	movff	??_switch_calibration,postinc2
  1283   001774  C036  FFDD         	movff	??_switch_calibration+1,postdec2
  1284   001778                     
  1285                           ;calibration.c: 49:             LATDbits.LATD7 = 1;
  1286   001778  8E7C               	bsf	124,7,c	;volatile
  1287   00177A                     
  1288                           ;calibration.c: 50:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1289   00177A  0E11               	movlw	17
  1290   00177C  6E36               	movwf	(??_switch_calibration+1)^0,c
  1291   00177E  0E3C               	movlw	60
  1292   001780  6E35               	movwf	??_switch_calibration^0,c
  1293   001782  0ECB               	movlw	203
  1294   001784                     u1547:
  1295   001784  2EE8               	decfsz	wreg,f,c
  1296   001786  D7FE               	bra	u1547
  1297   001788  2E35               	decfsz	??_switch_calibration^0,f,c
  1298   00178A  D7FC               	bra	u1547
  1299   00178C  2E36               	decfsz	(??_switch_calibration+1)^0,f,c
  1300   00178E  D7FA               	bra	u1547
  1301   001790  0000               	nop	
  1302   001792                     
  1303                           ;calibration.c: 51:             LATDbits.LATD7 = 0;
  1304   001792  9E7C               	bcf	124,7,c	;volatile
  1305                           
  1306                           ;calibration.c: 52:             break;
  1307   001794  EFED  F00B         	goto	l158
  1308   001798                     l154:
  1309                           
  1310                           ;calibration.c: 55:         if(!PORTFbits.RF3){
  1311   001798  B68E               	btfsc	142,3,c	;volatile
  1312   00179A  EFD1  F00B         	goto	u1241
  1313   00179E  EFD3  F00B         	goto	u1240
  1314   0017A2                     u1241:
  1315   0017A2  EF97  F00B         	goto	l153
  1316   0017A6                     u1240:
  1317   0017A6                     
  1318                           ;calibration.c: 56:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1319   0017A6  0E11               	movlw	17
  1320   0017A8  6E36               	movwf	(??_switch_calibration+1)^0,c
  1321   0017AA  0E3C               	movlw	60
  1322   0017AC  6E35               	movwf	??_switch_calibration^0,c
  1323   0017AE  0ECB               	movlw	203
  1324   0017B0                     u1557:
  1325   0017B0  2EE8               	decfsz	wreg,f,c
  1326   0017B2  D7FE               	bra	u1557
  1327   0017B4  2E35               	decfsz	??_switch_calibration^0,f,c
  1328   0017B6  D7FC               	bra	u1557
  1329   0017B8  2E36               	decfsz	(??_switch_calibration+1)^0,f,c
  1330   0017BA  D7FA               	bra	u1557
  1331   0017BC  0000               	nop	
  1332   0017BE                     
  1333                           ;calibration.c: 57:             LATHbits.LATH3 = 1;
  1334   0017BE  8680               	bsf	128,3,c	;volatile
  1335                           
  1336                           ;calibration.c: 58:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1337   0017C0  0E11               	movlw	17
  1338   0017C2  6E36               	movwf	(??_switch_calibration+1)^0,c
  1339   0017C4  0E3C               	movlw	60
  1340   0017C6  6E35               	movwf	??_switch_calibration^0,c
  1341   0017C8  0ECB               	movlw	203
  1342   0017CA                     u1567:
  1343   0017CA  2EE8               	decfsz	wreg,f,c
  1344   0017CC  D7FE               	bra	u1567
  1345   0017CE  2E35               	decfsz	??_switch_calibration^0,f,c
  1346   0017D0  D7FC               	bra	u1567
  1347   0017D2  2E36               	decfsz	(??_switch_calibration+1)^0,f,c
  1348   0017D4  D7FA               	bra	u1567
  1349   0017D6  0000               	nop	
  1350   0017D8                     
  1351                           ;calibration.c: 59:             LATHbits.LATH3 = 0;
  1352   0017D8  9680               	bcf	128,3,c	;volatile
  1353   0017DA                     l158:
  1354   0017DA  0012               	return		;funcret
  1355   0017DC                     __end_of_switch_calibration:
  1356                           	callstack 0
  1357                           
  1358 ;; *************** function _initDCmotorsPWM *****************
  1359 ;; Defined at:
  1360 ;;		line 5 in file "dc_motor_v1.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;		None
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      void 
  1367 ;; Registers used:
  1368 ;;		wreg, status,2
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1374 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1377 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1378 ;;Total ram usage:        2 bytes
  1379 ;; Hardware stack levels used: 1
  1380 ;; This function calls:
  1381 ;;		Nothing
  1382 ;; This function is called by:
  1383 ;;		_main
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387                           	psect	text4
  1388   0017DC                     __ptext4:
  1389                           	callstack 0
  1390   0017DC                     _initDCmotorsPWM:
  1391                           	callstack 30
  1392   0017DC                     
  1393                           ;dc_motor_v1.c: 7:     TRISEbits.TRISE2 = 0;
  1394   0017DC  9485               	bcf	133,2,c	;volatile
  1395                           
  1396                           ;dc_motor_v1.c: 8:     TRISEbits.TRISE4 = 0;
  1397   0017DE  9885               	bcf	133,4,c	;volatile
  1398                           
  1399                           ;dc_motor_v1.c: 9:     TRISCbits.TRISC7 = 0;
  1400   0017E0  9E83               	bcf	131,7,c	;volatile
  1401                           
  1402                           ;dc_motor_v1.c: 10:     TRISGbits.TRISG6 = 0;
  1403   0017E2  9C87               	bcf	135,6,c	;volatile
  1404                           
  1405                           ;dc_motor_v1.c: 12:     LATEbits.LATE2 = 0;
  1406   0017E4  947D               	bcf	125,2,c	;volatile
  1407                           
  1408                           ;dc_motor_v1.c: 13:     LATEbits.LATE4 = 0;
  1409   0017E6  987D               	bcf	125,4,c	;volatile
  1410                           
  1411                           ;dc_motor_v1.c: 14:     LATCbits.LATC7 = 0;
  1412   0017E8  9E7B               	bcf	123,7,c	;volatile
  1413                           
  1414                           ;dc_motor_v1.c: 15:     LATGbits.LATG6 = 0;
  1415   0017EA  9C7F               	bcf	127,6,c	;volatile
  1416   0017EC                     
  1417                           ;dc_motor_v1.c: 18:     RE2PPS=0x05;
  1418   0017EC  0E05               	movlw	5
  1419   0017EE  010E               	movlb	14	; () banked
  1420   0017F0  6F74               	movwf	116,b	;volatile
  1421                           
  1422                           ;dc_motor_v1.c: 19:     RE4PPS=0x06;
  1423   0017F2  0E06               	movlw	6
  1424   0017F4  6F76               	movwf	118,b	;volatile
  1425                           
  1426                           ;dc_motor_v1.c: 20:     RC7PPS=0x07;
  1427   0017F6  0E07               	movlw	7
  1428   0017F8  6F69               	movwf	105,b	;volatile
  1429                           
  1430                           ;dc_motor_v1.c: 21:     RG6PPS=0x08;
  1431   0017FA  0E08               	movlw	8
  1432   0017FC  6F88               	movwf	136,b	;volatile
  1433                           
  1434                           ;dc_motor_v1.c: 24:     T2CONbits.CKPS=100;
  1435   0017FE  50BD               	movf	189,w,c	;volatile
  1436   001800  0B8F               	andlw	-113
  1437   001802  0940               	iorlw	64
  1438   001804  6EBD               	movwf	189,c	;volatile
  1439                           
  1440                           ;dc_motor_v1.c: 25:     T2HLTbits.MODE=0b00000;
  1441   001806  0EE0               	movlw	-32
  1442   001808  16BE               	andwf	190,f,c	;volatile
  1443                           
  1444                           ;dc_motor_v1.c: 26:     T2CLKCONbits.CS=0b0001;
  1445   00180A  50BF               	movf	191,w,c	;volatile
  1446   00180C  0BF0               	andlw	-16
  1447   00180E  0901               	iorlw	1
  1448   001810  6EBF               	movwf	191,c	;volatile
  1449   001812                     
  1450                           ; BSR set to: 14
  1451                           ;dc_motor_v1.c: 30:     T2PR=PWMperiod;
  1452   001812  C034  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1453   001816                     
  1454                           ; BSR set to: 14
  1455                           ;dc_motor_v1.c: 31:     T2CONbits.ON=1;
  1456   001816  8EBD               	bsf	189,7,c	;volatile
  1457                           
  1458                           ;dc_motor_v1.c: 35:     CCPR1H=0;
  1459   001818  0E00               	movlw	0
  1460   00181A  6EAA               	movwf	170,c	;volatile
  1461                           
  1462                           ;dc_motor_v1.c: 36:     CCPR2H=0;
  1463   00181C  0E00               	movlw	0
  1464   00181E  6EA6               	movwf	166,c	;volatile
  1465                           
  1466                           ;dc_motor_v1.c: 37:     CCPR3H=0;
  1467   001820  0E00               	movlw	0
  1468   001822  010F               	movlb	15	; () banked
  1469   001824  6F25               	movwf	37,b	;volatile
  1470                           
  1471                           ;dc_motor_v1.c: 38:     CCPR4H=0;
  1472   001826  0E00               	movlw	0
  1473   001828  6F21               	movwf	33,b	;volatile
  1474                           
  1475                           ;dc_motor_v1.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1476   00182A  0EFC               	movlw	-4
  1477   00182C  16AD               	andwf	173,f,c	;volatile
  1478                           
  1479                           ;dc_motor_v1.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1480   00182E  0EF3               	movlw	-13
  1481   001830  16AD               	andwf	173,f,c	;volatile
  1482                           
  1483                           ;dc_motor_v1.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1484   001832  0ECF               	movlw	-49
  1485   001834  16AD               	andwf	173,f,c	;volatile
  1486                           
  1487                           ;dc_motor_v1.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1488   001836  0E3F               	movlw	-193
  1489   001838  16AD               	andwf	173,f,c	;volatile
  1490   00183A                     
  1491                           ; BSR set to: 15
  1492                           ;dc_motor_v1.c: 47:     CCP1CONbits.FMT=1;
  1493   00183A  88AB               	bsf	171,4,c	;volatile
  1494                           
  1495                           ;dc_motor_v1.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1496   00183C  50AB               	movf	171,w,c	;volatile
  1497   00183E  0BF0               	andlw	-16
  1498   001840  090C               	iorlw	12
  1499   001842  6EAB               	movwf	171,c	;volatile
  1500   001844                     
  1501                           ; BSR set to: 15
  1502                           ;dc_motor_v1.c: 49:     CCP1CONbits.EN=1;
  1503   001844  8EAB               	bsf	171,7,c	;volatile
  1504   001846                     
  1505                           ; BSR set to: 15
  1506                           ;dc_motor_v1.c: 51:     CCP2CONbits.FMT=1;
  1507   001846  88A7               	bsf	167,4,c	;volatile
  1508                           
  1509                           ;dc_motor_v1.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  1510   001848  50A7               	movf	167,w,c	;volatile
  1511   00184A  0BF0               	andlw	-16
  1512   00184C  090C               	iorlw	12
  1513   00184E  6EA7               	movwf	167,c	;volatile
  1514   001850                     
  1515                           ; BSR set to: 15
  1516                           ;dc_motor_v1.c: 53:     CCP2CONbits.EN=1;
  1517   001850  8EA7               	bsf	167,7,c	;volatile
  1518   001852                     
  1519                           ; BSR set to: 15
  1520                           ;dc_motor_v1.c: 55:     CCP3CONbits.FMT=1;
  1521   001852  8926               	bsf	38,4,b	;volatile
  1522                           
  1523                           ;dc_motor_v1.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  1524   001854  5126               	movf	38,w,b	;volatile
  1525   001856  0BF0               	andlw	-16
  1526   001858  090C               	iorlw	12
  1527   00185A  6F26               	movwf	38,b	;volatile
  1528   00185C                     
  1529                           ; BSR set to: 15
  1530                           ;dc_motor_v1.c: 57:     CCP3CONbits.EN=1;
  1531   00185C  8F26               	bsf	38,7,b	;volatile
  1532   00185E                     
  1533                           ; BSR set to: 15
  1534                           ;dc_motor_v1.c: 59:     CCP4CONbits.FMT=1;
  1535   00185E  8922               	bsf	34,4,b	;volatile
  1536                           
  1537                           ;dc_motor_v1.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  1538   001860  5122               	movf	34,w,b	;volatile
  1539   001862  0BF0               	andlw	-16
  1540   001864  090C               	iorlw	12
  1541   001866  6F22               	movwf	34,b	;volatile
  1542   001868                     
  1543                           ; BSR set to: 15
  1544                           ;dc_motor_v1.c: 61:     CCP4CONbits.EN=1;
  1545   001868  8F22               	bsf	34,7,b	;volatile
  1546   00186A                     
  1547                           ; BSR set to: 15
  1548                           ;dc_motor_v1.c: 64:     TRISHbits.TRISH3 = 0;
  1549   00186A  9688               	bcf	136,3,c	;volatile
  1550   00186C                     
  1551                           ; BSR set to: 15
  1552                           ;dc_motor_v1.c: 65:     LATHbits.LATH3 = 0;
  1553   00186C  9680               	bcf	128,3,c	;volatile
  1554   00186E                     
  1555                           ; BSR set to: 15
  1556   00186E  0012               	return		;funcret
  1557   001870                     __end_of_initDCmotorsPWM:
  1558                           	callstack 0
  1559                           
  1560 ;; *************** function _forward *****************
  1561 ;; Defined at:
  1562 ;;		line 122 in file "dc_motor_v1.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  Distance_Cal    1    wreg     unsigned char 
  1565 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1566 ;;		 -> motorL(9), 
  1567 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1568 ;;		 -> motorR(9), 
  1569 ;; Auto vars:     Size  Location     Type
  1570 ;;  Distance_Cal    1   23[COMRAM] unsigned char 
  1571 ;;  j               2   26[COMRAM] int 
  1572 ;;  i               2   24[COMRAM] int 
  1573 ;;  delay_time      2   30[COMRAM] int 
  1574 ;;  max_power       2   28[COMRAM] int 
  1575 ;;  acceleration    2    0        int 
  1576 ;; Return value:  Size  Location     Type
  1577 ;;                  1    wreg      void 
  1578 ;; Registers used:
  1579 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1585 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1586 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1587 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1588 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1589 ;;Total ram usage:       14 bytes
  1590 ;; Hardware stack levels used: 1
  1591 ;; Hardware stack levels required when called: 2
  1592 ;; This function calls:
  1593 ;;		___awdiv
  1594 ;;		_delay_ms_function
  1595 ;;		_setMotorPWM
  1596 ;; This function is called by:
  1597 ;;		_main
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           	psect	text5
  1602   000E1E                     __ptext5:
  1603                           	callstack 0
  1604   000E1E                     _forward:
  1605                           	callstack 28
  1606                           
  1607                           ; BSR set to: 15
  1608                           ;incstack = 0
  1609                           ;forward@Distance_Calibration stored from wreg
  1610   000E1E  6E4B               	movwf	forward@Distance_Calibration^0,c
  1611   000E20                     
  1612                           ;dc_motor_v1.c: 123:     mL->direction = 1;
  1613   000E20  5046               	movf	forward@mL^0,w,c
  1614   000E22  6ED9               	movwf	fsr2l,c
  1615   000E24  6ADA               	clrf	fsr2h,c
  1616   000E26  0E01               	movlw	1
  1617   000E28  26D9               	addwf	fsr2l,f,c
  1618   000E2A  0E01               	movlw	1
  1619   000E2C  6EDF               	movwf	indf2,c
  1620                           
  1621                           ;dc_motor_v1.c: 124:     mR->direction = 1;
  1622   000E2E  5047               	movf	forward@mR^0,w,c
  1623   000E30  6ED9               	movwf	fsr2l,c
  1624   000E32  6ADA               	clrf	fsr2h,c
  1625   000E34  0E01               	movlw	1
  1626   000E36  26D9               	addwf	fsr2l,f,c
  1627   000E38  0E01               	movlw	1
  1628   000E3A  6EDF               	movwf	indf2,c
  1629   000E3C                     
  1630                           ;dc_motor_v1.c: 131:     int max_power = 20;
  1631   000E3C  0E00               	movlw	0
  1632   000E3E  6E51               	movwf	(forward@max_power+1)^0,c
  1633   000E40  0E14               	movlw	20
  1634   000E42  6E50               	movwf	forward@max_power^0,c
  1635   000E44                     
  1636                           ;dc_motor_v1.c: 133:     int delay_time = acceleration_time/max_power;
  1637   000E44  0E00               	movlw	0
  1638   000E46  6E35               	movwf	(___awdiv@dividend+1)^0,c
  1639   000E48  0E64               	movlw	100
  1640   000E4A  6E34               	movwf	___awdiv@dividend^0,c
  1641   000E4C  0E00               	movlw	0
  1642   000E4E  6E37               	movwf	(___awdiv@divisor+1)^0,c
  1643   000E50  0E14               	movlw	20
  1644   000E52  6E36               	movwf	___awdiv@divisor^0,c
  1645   000E54  EC35  F00B         	call	___awdiv	;wreg free
  1646   000E58  C034  F052         	movff	?___awdiv,forward@delay_time
  1647   000E5C  C035  F053         	movff	?___awdiv+1,forward@delay_time+1
  1648   000E60                     
  1649                           ;dc_motor_v1.c: 136:     for(int i=0; i< max_power; i++){
  1650   000E60  0E00               	movlw	0
  1651   000E62  6E4D               	movwf	(forward@i+1)^0,c
  1652   000E64  0E00               	movlw	0
  1653   000E66  6E4C               	movwf	forward@i^0,c
  1654   000E68  EF5A  F007         	goto	l1865
  1655   000E6C                     l1855:
  1656                           
  1657                           ;dc_motor_v1.c: 137:         mL->power = mL->power + 1;
  1658   000E6C  5046               	movf	forward@mL^0,w,c
  1659   000E6E  6ED9               	movwf	fsr2l,c
  1660   000E70  6ADA               	clrf	fsr2h,c
  1661   000E72  5046               	movf	forward@mL^0,w,c
  1662   000E74  6EE1               	movwf	fsr1l,c
  1663   000E76  6AE2               	clrf	fsr1h,c
  1664   000E78  50E7               	movf	indf1,w,c
  1665   000E7A  6E48               	movwf	??_forward^0,c
  1666   000E7C  2848               	incf	??_forward^0,w,c
  1667   000E7E  6EDF               	movwf	indf2,c
  1668                           
  1669                           ;dc_motor_v1.c: 138:         mR->power = mR->power + 1 ;
  1670   000E80  5047               	movf	forward@mR^0,w,c
  1671   000E82  6ED9               	movwf	fsr2l,c
  1672   000E84  6ADA               	clrf	fsr2h,c
  1673   000E86  5047               	movf	forward@mR^0,w,c
  1674   000E88  6EE1               	movwf	fsr1l,c
  1675   000E8A  6AE2               	clrf	fsr1h,c
  1676   000E8C  50E7               	movf	indf1,w,c
  1677   000E8E  6E48               	movwf	??_forward^0,c
  1678   000E90  2848               	incf	??_forward^0,w,c
  1679   000E92  6EDF               	movwf	indf2,c
  1680   000E94                     
  1681                           ;dc_motor_v1.c: 139:         setMotorPWM(mR);
  1682   000E94  C047  F041         	movff	forward@mR,setMotorPWM@m
  1683   000E98  EC4D  F009         	call	_setMotorPWM	;wreg free
  1684   000E9C                     
  1685                           ;dc_motor_v1.c: 140:         setMotorPWM(mL);
  1686   000E9C  C046  F041         	movff	forward@mL,setMotorPWM@m
  1687   000EA0  EC4D  F009         	call	_setMotorPWM	;wreg free
  1688   000EA4                     
  1689                           ;dc_motor_v1.c: 141:         delay_ms_function(delay_time);
  1690   000EA4  C052  F034         	movff	forward@delay_time,delay_ms_function@milliseconds
  1691   000EA8  C053  F035         	movff	forward@delay_time+1,delay_ms_function@milliseconds+1
  1692   000EAC  EC8E  F00C         	call	_delay_ms_function	;wreg free
  1693   000EB0                     
  1694                           ;dc_motor_v1.c: 142:     }
  1695   000EB0  4A4C               	infsnz	forward@i^0,f,c
  1696   000EB2  2A4D               	incf	(forward@i+1)^0,f,c
  1697   000EB4                     l1865:
  1698   000EB4  5050               	movf	forward@max_power^0,w,c
  1699   000EB6  5C4C               	subwf	forward@i^0,w,c
  1700   000EB8  504D               	movf	(forward@i+1)^0,w,c
  1701   000EBA  0A80               	xorlw	128
  1702   000EBC  6E48               	movwf	??_forward^0,c
  1703   000EBE  5051               	movf	(forward@max_power+1)^0,w,c
  1704   000EC0  0A80               	xorlw	128
  1705   000EC2  5848               	subwfb	??_forward^0,w,c
  1706   000EC4  A0D8               	btfss	status,0,c
  1707   000EC6  EF67  F007         	goto	u1251
  1708   000ECA  EF69  F007         	goto	u1250
  1709   000ECE                     u1251:
  1710   000ECE  EF36  F007         	goto	l1855
  1711   000ED2                     u1250:
  1712   000ED2                     
  1713                           ;dc_motor_v1.c: 147:     for(int j=0; j<Distance_Calibration; j++){
  1714   000ED2  0E00               	movlw	0
  1715   000ED4  6E4F               	movwf	(forward@j+1)^0,c
  1716   000ED6  0E00               	movlw	0
  1717   000ED8  6E4E               	movwf	forward@j^0,c
  1718   000EDA  EF78  F007         	goto	l246
  1719   000EDE                     l1869:
  1720                           
  1721                           ;dc_motor_v1.c: 148:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1722   000EDE  0ED0               	movlw	208
  1723   000EE0  6E48               	movwf	??_forward^0,c
  1724   000EE2  0ECA               	movlw	202
  1725   000EE4                     u1577:
  1726   000EE4  2EE8               	decfsz	wreg,f,c
  1727   000EE6  D7FE               	bra	u1577
  1728   000EE8  2E48               	decfsz	??_forward^0,f,c
  1729   000EEA  D7FC               	bra	u1577
  1730   000EEC                     
  1731                           ;dc_motor_v1.c: 149:     }
  1732   000EEC  4A4E               	infsnz	forward@j^0,f,c
  1733   000EEE  2A4F               	incf	(forward@j+1)^0,f,c
  1734   000EF0                     l246:
  1735   000EF0  504B               	movf	forward@Distance_Calibration^0,w,c
  1736   000EF2  6E48               	movwf	??_forward^0,c
  1737   000EF4  6A49               	clrf	(??_forward+1)^0,c
  1738   000EF6  5048               	movf	??_forward^0,w,c
  1739   000EF8  5C4E               	subwf	forward@j^0,w,c
  1740   000EFA  504F               	movf	(forward@j+1)^0,w,c
  1741   000EFC  0A80               	xorlw	128
  1742   000EFE  6E4A               	movwf	(??_forward+2)^0,c
  1743   000F00  5049               	movf	(??_forward+1)^0,w,c
  1744   000F02  0A80               	xorlw	128
  1745   000F04  584A               	subwfb	(??_forward+2)^0,w,c
  1746   000F06  A0D8               	btfss	status,0,c
  1747   000F08  EF88  F007         	goto	u1261
  1748   000F0C  EF8A  F007         	goto	u1260
  1749   000F10                     u1261:
  1750   000F10  EF6F  F007         	goto	l1869
  1751   000F14                     u1260:
  1752   000F14  EFB8  F007         	goto	l1887
  1753   000F18                     l1873:
  1754                           
  1755                           ;dc_motor_v1.c: 153:         if(mR->power> 0 ){
  1756   000F18  5047               	movf	forward@mR^0,w,c
  1757   000F1A  6ED9               	movwf	fsr2l,c
  1758   000F1C  6ADA               	clrf	fsr2h,c
  1759   000F1E  50DF               	movf	indf2,w,c
  1760   000F20  B4D8               	btfsc	status,2,c
  1761   000F22  EF95  F007         	goto	u1271
  1762   000F26  EF97  F007         	goto	u1270
  1763   000F2A                     u1271:
  1764   000F2A  EF9B  F007         	goto	l1877
  1765   000F2E                     u1270:
  1766   000F2E                     
  1767                           ;dc_motor_v1.c: 154:             mR->power--;
  1768   000F2E  5047               	movf	forward@mR^0,w,c
  1769   000F30  6ED9               	movwf	fsr2l,c
  1770   000F32  6ADA               	clrf	fsr2h,c
  1771   000F34  06DF               	decf	indf2,f,c
  1772   000F36                     l1877:
  1773                           
  1774                           ;dc_motor_v1.c: 156:         if(mL->power> 0 ){
  1775   000F36  5046               	movf	forward@mL^0,w,c
  1776   000F38  6ED9               	movwf	fsr2l,c
  1777   000F3A  6ADA               	clrf	fsr2h,c
  1778   000F3C  50DF               	movf	indf2,w,c
  1779   000F3E  B4D8               	btfsc	status,2,c
  1780   000F40  EFA4  F007         	goto	u1281
  1781   000F44  EFA6  F007         	goto	u1280
  1782   000F48                     u1281:
  1783   000F48  EFAA  F007         	goto	l1881
  1784   000F4C                     u1280:
  1785   000F4C                     
  1786                           ;dc_motor_v1.c: 157:             mL->power--;
  1787   000F4C  5046               	movf	forward@mL^0,w,c
  1788   000F4E  6ED9               	movwf	fsr2l,c
  1789   000F50  6ADA               	clrf	fsr2h,c
  1790   000F52  06DF               	decf	indf2,f,c
  1791   000F54                     l1881:
  1792                           
  1793                           ;dc_motor_v1.c: 159:         setMotorPWM(mR);
  1794   000F54  C047  F041         	movff	forward@mR,setMotorPWM@m
  1795   000F58  EC4D  F009         	call	_setMotorPWM	;wreg free
  1796   000F5C                     
  1797                           ;dc_motor_v1.c: 160:         setMotorPWM(mL);
  1798   000F5C  C046  F041         	movff	forward@mL,setMotorPWM@m
  1799   000F60  EC4D  F009         	call	_setMotorPWM	;wreg free
  1800   000F64                     
  1801                           ;dc_motor_v1.c: 161:         delay_ms_function(delay_time);
  1802   000F64  C052  F034         	movff	forward@delay_time,delay_ms_function@milliseconds
  1803   000F68  C053  F035         	movff	forward@delay_time+1,delay_ms_function@milliseconds+1
  1804   000F6C  EC8E  F00C         	call	_delay_ms_function	;wreg free
  1805   000F70                     l1887:
  1806                           
  1807                           ;dc_motor_v1.c: 152:     while(mL->power || mR->power > 0){
  1808   000F70  5046               	movf	forward@mL^0,w,c
  1809   000F72  6ED9               	movwf	fsr2l,c
  1810   000F74  6ADA               	clrf	fsr2h,c
  1811   000F76  50DF               	movf	indf2,w,c
  1812   000F78  A4D8               	btfss	status,2,c
  1813   000F7A  EFC1  F007         	goto	u1291
  1814   000F7E  EFC3  F007         	goto	u1290
  1815   000F82                     u1291:
  1816   000F82  EF8C  F007         	goto	l1873
  1817   000F86                     u1290:
  1818   000F86  5047               	movf	forward@mR^0,w,c
  1819   000F88  6ED9               	movwf	fsr2l,c
  1820   000F8A  6ADA               	clrf	fsr2h,c
  1821   000F8C  50DF               	movf	indf2,w,c
  1822   000F8E  A4D8               	btfss	status,2,c
  1823   000F90  EFCC  F007         	goto	u1301
  1824   000F94  EFCE  F007         	goto	u1300
  1825   000F98                     u1301:
  1826   000F98  EF8C  F007         	goto	l1873
  1827   000F9C                     u1300:
  1828   000F9C  0012               	return		;funcret
  1829   000F9E                     __end_of_forward:
  1830                           	callstack 0
  1831                           
  1832 ;; *************** function _setMotorPWM *****************
  1833 ;; Defined at:
  1834 ;;		line 75 in file "dc_motor_v1.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1837 ;;		 -> motorR(9), motorL(9), 
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;  negDuty         1   17[COMRAM] unsigned char 
  1840 ;;  posDuty         1   16[COMRAM] unsigned char 
  1841 ;; Return value:  Size  Location     Type
  1842 ;;                  1    wreg      void 
  1843 ;; Registers used:
  1844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1850 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1851 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1852 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1853 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1854 ;;Total ram usage:        5 bytes
  1855 ;; Hardware stack levels used: 1
  1856 ;; Hardware stack levels required when called: 1
  1857 ;; This function calls:
  1858 ;;		___lwdiv
  1859 ;;		___wmul
  1860 ;; This function is called by:
  1861 ;;		_forward
  1862 ;;		_turnLEFT
  1863 ;;		_turnRIGHT
  1864 ;;		_stop
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           	psect	text6
  1869   00129A                     __ptext6:
  1870                           	callstack 0
  1871   00129A                     _setMotorPWM:
  1872                           	callstack 28
  1873   00129A                     
  1874                           ;dc_motor_v1.c: 75: void setMotorPWM(DC_motor *m);dc_motor_v1.c: 76: {;dc_motor_v1.c: 77
      +                          :     unsigned char posDuty, negDuty;;dc_motor_v1.c: 79:     if(m->brakemode) {
  1875   00129A  5041               	movf	setMotorPWM@m^0,w,c
  1876   00129C  6ED9               	movwf	fsr2l,c
  1877   00129E  6ADA               	clrf	fsr2h,c
  1878   0012A0  0E02               	movlw	2
  1879   0012A2  26D9               	addwf	fsr2l,f,c
  1880   0012A4  50DF               	movf	indf2,w,c
  1881   0012A6  B4D8               	btfsc	status,2,c
  1882   0012A8  EF58  F009         	goto	u1091
  1883   0012AC  EF5A  F009         	goto	u1090
  1884   0012B0                     u1091:
  1885   0012B0  EF8A  F009         	goto	l1707
  1886   0012B4                     u1090:
  1887   0012B4                     
  1888                           ;dc_motor_v1.c: 80:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperi
      +                          od))/100;
  1889   0012B4  5041               	movf	setMotorPWM@m^0,w,c
  1890   0012B6  6ED9               	movwf	fsr2l,c
  1891   0012B8  6ADA               	clrf	fsr2h,c
  1892   0012BA  50DF               	movf	indf2,w,c
  1893   0012BC  6E42               	movwf	??_setMotorPWM^0,c
  1894   0012BE  5042               	movf	??_setMotorPWM^0,w,c
  1895   0012C0  6E34               	movwf	___wmul@multiplier^0,c
  1896   0012C2  6A35               	clrf	(___wmul@multiplier+1)^0,c
  1897   0012C4  5041               	movf	setMotorPWM@m^0,w,c
  1898   0012C6  6ED9               	movwf	fsr2l,c
  1899   0012C8  6ADA               	clrf	fsr2h,c
  1900   0012CA  0E03               	movlw	3
  1901   0012CC  26D9               	addwf	fsr2l,f,c
  1902   0012CE  CFDE F036          	movff	postinc2,___wmul@multiplicand
  1903   0012D2  CFDD F037          	movff	postdec2,___wmul@multiplicand+1
  1904   0012D6  ECA5  F00C         	call	___wmul	;wreg free
  1905   0012DA  C034  F03A         	movff	?___wmul,___lwdiv@dividend
  1906   0012DE  C035  F03B         	movff	?___wmul+1,___lwdiv@dividend+1
  1907   0012E2  0E00               	movlw	0
  1908   0012E4  6E3D               	movwf	(___lwdiv@divisor+1)^0,c
  1909   0012E6  0E64               	movlw	100
  1910   0012E8  6E3C               	movwf	___lwdiv@divisor^0,c
  1911   0012EA  EC38  F00C         	call	___lwdiv	;wreg free
  1912   0012EE  5041               	movf	setMotorPWM@m^0,w,c
  1913   0012F0  6ED9               	movwf	fsr2l,c
  1914   0012F2  6ADA               	clrf	fsr2h,c
  1915   0012F4  0E03               	movlw	3
  1916   0012F6  26D9               	addwf	fsr2l,f,c
  1917   0012F8  50DF               	movf	indf2,w,c
  1918   0012FA  6E43               	movwf	(??_setMotorPWM+1)^0,c
  1919   0012FC  503A               	movf	?___lwdiv^0,w,c
  1920   0012FE  5C43               	subwf	(??_setMotorPWM+1)^0,w,c
  1921   001300  6E44               	movwf	setMotorPWM@posDuty^0,c
  1922   001302                     
  1923                           ;dc_motor_v1.c: 81:         negDuty=m->PWMperiod;
  1924   001302  5041               	movf	setMotorPWM@m^0,w,c
  1925   001304  6ED9               	movwf	fsr2l,c
  1926   001306  6ADA               	clrf	fsr2h,c
  1927   001308  0E03               	movlw	3
  1928   00130A  26D9               	addwf	fsr2l,f,c
  1929   00130C  50DF               	movf	indf2,w,c
  1930   00130E  6E45               	movwf	setMotorPWM@negDuty^0,c
  1931                           
  1932                           ;dc_motor_v1.c: 82:     }
  1933   001310  EFAB  F009         	goto	l1711
  1934   001314                     l1707:
  1935                           
  1936                           ;dc_motor_v1.c: 84:         posDuty=0;
  1937   001314  0E00               	movlw	0
  1938   001316  6E44               	movwf	setMotorPWM@posDuty^0,c
  1939   001318                     
  1940                           ;dc_motor_v1.c: 85:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1941   001318  5041               	movf	setMotorPWM@m^0,w,c
  1942   00131A  6ED9               	movwf	fsr2l,c
  1943   00131C  6ADA               	clrf	fsr2h,c
  1944   00131E  50DF               	movf	indf2,w,c
  1945   001320  6E42               	movwf	??_setMotorPWM^0,c
  1946   001322  5042               	movf	??_setMotorPWM^0,w,c
  1947   001324  6E34               	movwf	___wmul@multiplier^0,c
  1948   001326  6A35               	clrf	(___wmul@multiplier+1)^0,c
  1949   001328  5041               	movf	setMotorPWM@m^0,w,c
  1950   00132A  6ED9               	movwf	fsr2l,c
  1951   00132C  6ADA               	clrf	fsr2h,c
  1952   00132E  0E03               	movlw	3
  1953   001330  26D9               	addwf	fsr2l,f,c
  1954   001332  CFDE F036          	movff	postinc2,___wmul@multiplicand
  1955   001336  CFDD F037          	movff	postdec2,___wmul@multiplicand+1
  1956   00133A  ECA5  F00C         	call	___wmul	;wreg free
  1957   00133E  C034  F03A         	movff	?___wmul,___lwdiv@dividend
  1958   001342  C035  F03B         	movff	?___wmul+1,___lwdiv@dividend+1
  1959   001346  0E00               	movlw	0
  1960   001348  6E3D               	movwf	(___lwdiv@divisor+1)^0,c
  1961   00134A  0E64               	movlw	100
  1962   00134C  6E3C               	movwf	___lwdiv@divisor^0,c
  1963   00134E  EC38  F00C         	call	___lwdiv	;wreg free
  1964   001352  503A               	movf	?___lwdiv^0,w,c
  1965   001354  6E45               	movwf	setMotorPWM@negDuty^0,c
  1966   001356                     l1711:
  1967                           
  1968                           ;dc_motor_v1.c: 88:     if (m->direction) {
  1969   001356  5041               	movf	setMotorPWM@m^0,w,c
  1970   001358  6ED9               	movwf	fsr2l,c
  1971   00135A  6ADA               	clrf	fsr2h,c
  1972   00135C  0E01               	movlw	1
  1973   00135E  26D9               	addwf	fsr2l,f,c
  1974   001360  50DF               	movf	indf2,w,c
  1975   001362  B4D8               	btfsc	status,2,c
  1976   001364  EFB6  F009         	goto	u1101
  1977   001368  EFB8  F009         	goto	u1100
  1978   00136C                     u1101:
  1979   00136C  EFD8  F009         	goto	l1715
  1980   001370                     u1100:
  1981   001370                     
  1982                           ;dc_motor_v1.c: 89:         *(m->posDutyHighByte)=posDuty;
  1983   001370  5041               	movf	setMotorPWM@m^0,w,c
  1984   001372  6ED9               	movwf	fsr2l,c
  1985   001374  6ADA               	clrf	fsr2h,c
  1986   001376  0E05               	movlw	5
  1987   001378  26D9               	addwf	fsr2l,f,c
  1988   00137A  CFDE F042          	movff	postinc2,??_setMotorPWM
  1989   00137E  CFDD F043          	movff	postdec2,??_setMotorPWM+1
  1990   001382  C042  FFD9         	movff	??_setMotorPWM,fsr2l
  1991   001386  C043  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1992   00138A  C044  FFDF         	movff	setMotorPWM@posDuty,indf2
  1993                           
  1994                           ;dc_motor_v1.c: 90:         *(m->negDutyHighByte)=negDuty;
  1995   00138E  5041               	movf	setMotorPWM@m^0,w,c
  1996   001390  6ED9               	movwf	fsr2l,c
  1997   001392  6ADA               	clrf	fsr2h,c
  1998   001394  0E07               	movlw	7
  1999   001396  26D9               	addwf	fsr2l,f,c
  2000   001398  CFDE F042          	movff	postinc2,??_setMotorPWM
  2001   00139C  CFDD F043          	movff	postdec2,??_setMotorPWM+1
  2002   0013A0  C042  FFD9         	movff	??_setMotorPWM,fsr2l
  2003   0013A4  C043  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2004   0013A8  C045  FFDF         	movff	setMotorPWM@negDuty,indf2
  2005                           
  2006                           ;dc_motor_v1.c: 91:     } else {
  2007   0013AC  EFF6  F009         	goto	l232
  2008   0013B0                     l1715:
  2009                           
  2010                           ;dc_motor_v1.c: 92:         *(m->posDutyHighByte)=negDuty;
  2011   0013B0  5041               	movf	setMotorPWM@m^0,w,c
  2012   0013B2  6ED9               	movwf	fsr2l,c
  2013   0013B4  6ADA               	clrf	fsr2h,c
  2014   0013B6  0E05               	movlw	5
  2015   0013B8  26D9               	addwf	fsr2l,f,c
  2016   0013BA  CFDE F042          	movff	postinc2,??_setMotorPWM
  2017   0013BE  CFDD F043          	movff	postdec2,??_setMotorPWM+1
  2018   0013C2  C042  FFD9         	movff	??_setMotorPWM,fsr2l
  2019   0013C6  C043  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2020   0013CA  C045  FFDF         	movff	setMotorPWM@negDuty,indf2
  2021                           
  2022                           ;dc_motor_v1.c: 93:         *(m->negDutyHighByte)=posDuty;
  2023   0013CE  5041               	movf	setMotorPWM@m^0,w,c
  2024   0013D0  6ED9               	movwf	fsr2l,c
  2025   0013D2  6ADA               	clrf	fsr2h,c
  2026   0013D4  0E07               	movlw	7
  2027   0013D6  26D9               	addwf	fsr2l,f,c
  2028   0013D8  CFDE F042          	movff	postinc2,??_setMotorPWM
  2029   0013DC  CFDD F043          	movff	postdec2,??_setMotorPWM+1
  2030   0013E0  C042  FFD9         	movff	??_setMotorPWM,fsr2l
  2031   0013E4  C043  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2032   0013E8  C044  FFDF         	movff	setMotorPWM@posDuty,indf2
  2033   0013EC                     l232:
  2034   0013EC  0012               	return		;funcret
  2035   0013EE                     __end_of_setMotorPWM:
  2036                           	callstack 0
  2037                           
  2038 ;; *************** function ___wmul *****************
  2039 ;; Defined at:
  2040 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;  multiplier      2    0[COMRAM] unsigned int 
  2043 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;  product         2    4[COMRAM] unsigned int 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  2    0[COMRAM] unsigned int 
  2048 ;; Registers used:
  2049 ;;		wreg, status,2, status,0, prodl, prodh
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2055 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2056 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2058 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2059 ;;Total ram usage:        6 bytes
  2060 ;; Hardware stack levels used: 1
  2061 ;; This function calls:
  2062 ;;		Nothing
  2063 ;; This function is called by:
  2064 ;;		_setMotorPWM
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068                           	psect	text7
  2069   00194A                     __ptext7:
  2070                           	callstack 0
  2071   00194A                     ___wmul:
  2072                           	callstack 28
  2073   00194A  5034               	movf	___wmul@multiplier^0,w,c
  2074   00194C  0236               	mulwf	___wmul@multiplicand^0,c
  2075   00194E  CFF3 F038          	movff	prodl,___wmul@product
  2076   001952  CFF4 F039          	movff	prodh,___wmul@product+1
  2077   001956  5034               	movf	___wmul@multiplier^0,w,c
  2078   001958  0237               	mulwf	(___wmul@multiplicand+1)^0,c
  2079   00195A  50F3               	movf	243,w,c
  2080   00195C  2639               	addwf	(___wmul@product+1)^0,f,c
  2081   00195E  5035               	movf	(___wmul@multiplier+1)^0,w,c
  2082   001960  0236               	mulwf	___wmul@multiplicand^0,c
  2083   001962  50F3               	movf	243,w,c
  2084   001964  2639               	addwf	(___wmul@product+1)^0,f,c
  2085   001966  C038  F034         	movff	___wmul@product,?___wmul
  2086   00196A  C039  F035         	movff	___wmul@product+1,?___wmul+1
  2087   00196E  0012               	return		;funcret
  2088   001970                     __end_of___wmul:
  2089                           	callstack 0
  2090                           
  2091 ;; *************** function ___lwdiv *****************
  2092 ;; Defined at:
  2093 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  dividend        2    6[COMRAM] unsigned int 
  2096 ;;  divisor         2    8[COMRAM] unsigned int 
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;  quotient        2   10[COMRAM] unsigned int 
  2099 ;;  counter         1   12[COMRAM] unsigned char 
  2100 ;; Return value:  Size  Location     Type
  2101 ;;                  2    6[COMRAM] unsigned int 
  2102 ;; Registers used:
  2103 ;;		wreg, status,2, status,0
  2104 ;; Tracked objects:
  2105 ;;		On entry : 0/0
  2106 ;;		On exit  : 0/0
  2107 ;;		Unchanged: 0/0
  2108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2109 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2110 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2112 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2113 ;;Total ram usage:        7 bytes
  2114 ;; Hardware stack levels used: 1
  2115 ;; This function calls:
  2116 ;;		Nothing
  2117 ;; This function is called by:
  2118 ;;		_setMotorPWM
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           	psect	text8
  2123   001870                     __ptext8:
  2124                           	callstack 0
  2125   001870                     ___lwdiv:
  2126                           	callstack 28
  2127   001870  0E00               	movlw	0
  2128   001872  6E3F               	movwf	(___lwdiv@quotient+1)^0,c
  2129   001874  0E00               	movlw	0
  2130   001876  6E3E               	movwf	___lwdiv@quotient^0,c
  2131   001878  503C               	movf	___lwdiv@divisor^0,w,c
  2132   00187A  103D               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2133   00187C  B4D8               	btfsc	status,2,c
  2134   00187E  EF43  F00C         	goto	u1051
  2135   001882  EF45  F00C         	goto	u1050
  2136   001886                     u1051:
  2137   001886  EF6D  F00C         	goto	l828
  2138   00188A                     u1050:
  2139   00188A  0E01               	movlw	1
  2140   00188C  6E40               	movwf	___lwdiv@counter^0,c
  2141   00188E  EF4D  F00C         	goto	l1681
  2142   001892                     l1679:
  2143   001892  90D8               	bcf	status,0,c
  2144   001894  363C               	rlcf	___lwdiv@divisor^0,f,c
  2145   001896  363D               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2146   001898  2A40               	incf	___lwdiv@counter^0,f,c
  2147   00189A                     l1681:
  2148   00189A  AE3D               	btfss	(___lwdiv@divisor+1)^0,7,c
  2149   00189C  EF52  F00C         	goto	u1061
  2150   0018A0  EF54  F00C         	goto	u1060
  2151   0018A4                     u1061:
  2152   0018A4  EF49  F00C         	goto	l1679
  2153   0018A8                     u1060:
  2154   0018A8                     l1683:
  2155   0018A8  90D8               	bcf	status,0,c
  2156   0018AA  363E               	rlcf	___lwdiv@quotient^0,f,c
  2157   0018AC  363F               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2158   0018AE  503C               	movf	___lwdiv@divisor^0,w,c
  2159   0018B0  5C3A               	subwf	___lwdiv@dividend^0,w,c
  2160   0018B2  503D               	movf	(___lwdiv@divisor+1)^0,w,c
  2161   0018B4  583B               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2162   0018B6  A0D8               	btfss	status,0,c
  2163   0018B8  EF60  F00C         	goto	u1071
  2164   0018BC  EF62  F00C         	goto	u1070
  2165   0018C0                     u1071:
  2166   0018C0  EF67  F00C         	goto	l1691
  2167   0018C4                     u1070:
  2168   0018C4  503C               	movf	___lwdiv@divisor^0,w,c
  2169   0018C6  5E3A               	subwf	___lwdiv@dividend^0,f,c
  2170   0018C8  503D               	movf	(___lwdiv@divisor+1)^0,w,c
  2171   0018CA  5A3B               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2172   0018CC  803E               	bsf	___lwdiv@quotient^0,0,c
  2173   0018CE                     l1691:
  2174   0018CE  90D8               	bcf	status,0,c
  2175   0018D0  323D               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2176   0018D2  323C               	rrcf	___lwdiv@divisor^0,f,c
  2177   0018D4  2E40               	decfsz	___lwdiv@counter^0,f,c
  2178   0018D6  EF54  F00C         	goto	l1683
  2179   0018DA                     l828:
  2180   0018DA  C03E  F03A         	movff	___lwdiv@quotient,?___lwdiv
  2181   0018DE  C03F  F03B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2182   0018E2  0012               	return		;funcret
  2183   0018E4                     __end_of___lwdiv:
  2184                           	callstack 0
  2185                           
  2186 ;; *************** function _delay_ms_function *****************
  2187 ;; Defined at:
  2188 ;;		line 67 in file "dc_motor_v1.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  milliseconds    2    0[COMRAM] unsigned int 
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;		None
  2193 ;; Return value:  Size  Location     Type
  2194 ;;                  1    wreg      void 
  2195 ;; Registers used:
  2196 ;;		wreg, status,2, status,0
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2202 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2204 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2205 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2206 ;;Total ram usage:        3 bytes
  2207 ;; Hardware stack levels used: 1
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_forward
  2212 ;;		_turnLEFT
  2213 ;;		_turnRIGHT
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216                           
  2217                           	psect	text9
  2218   00191C                     __ptext9:
  2219                           	callstack 0
  2220   00191C                     _delay_ms_function:
  2221                           	callstack 29
  2222   00191C                     
  2223                           ;dc_motor_v1.c: 68:     while (milliseconds > 0) {
  2224   00191C  EF9B  F00C         	goto	l222
  2225   001920                     l1697:
  2226                           
  2227                           ;dc_motor_v1.c: 69:         _delay((unsigned long)((1)*(64000000/4000.0)));
  2228   001920  0E15               	movlw	21
  2229   001922  6E36               	movwf	??_delay_ms_function^0,c
  2230   001924  0EC6               	movlw	198
  2231   001926                     u1587:
  2232   001926  2EE8               	decfsz	wreg,f,c
  2233   001928  D7FE               	bra	u1587
  2234   00192A  2E36               	decfsz	??_delay_ms_function^0,f,c
  2235   00192C  D7FC               	bra	u1587
  2236   00192E  D000               	nop2	
  2237   001930                     
  2238                           ;dc_motor_v1.c: 70:         milliseconds--;
  2239   001930  0634               	decf	delay_ms_function@milliseconds^0,f,c
  2240   001932  A0D8               	btfss	status,0,c
  2241   001934  0635               	decf	(delay_ms_function@milliseconds+1)^0,f,c
  2242   001936                     l222:
  2243                           
  2244                           ;dc_motor_v1.c: 68:     while (milliseconds > 0) {
  2245   001936  5034               	movf	delay_ms_function@milliseconds^0,w,c
  2246   001938  1035               	iorwf	(delay_ms_function@milliseconds+1)^0,w,c
  2247   00193A  A4D8               	btfss	status,2,c
  2248   00193C  EFA2  F00C         	goto	u1081
  2249   001940  EFA4  F00C         	goto	u1080
  2250   001944                     u1081:
  2251   001944  EF90  F00C         	goto	l1697
  2252   001948                     u1080:
  2253   001948  0012               	return		;funcret
  2254   00194A                     __end_of_delay_ms_function:
  2255                           	callstack 0
  2256                           
  2257 ;; *************** function ___awdiv *****************
  2258 ;; Defined at:
  2259 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;  dividend        2    0[COMRAM] int 
  2262 ;;  divisor         2    2[COMRAM] int 
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;  quotient        2    6[COMRAM] int 
  2265 ;;  sign            1    5[COMRAM] unsigned char 
  2266 ;;  counter         1    4[COMRAM] unsigned char 
  2267 ;; Return value:  Size  Location     Type
  2268 ;;                  2    0[COMRAM] int 
  2269 ;; Registers used:
  2270 ;;		wreg, status,2, status,0
  2271 ;; Tracked objects:
  2272 ;;		On entry : 0/0
  2273 ;;		On exit  : 0/0
  2274 ;;		Unchanged: 0/0
  2275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2276 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2277 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2279 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2280 ;;Total ram usage:        8 bytes
  2281 ;; Hardware stack levels used: 1
  2282 ;; This function calls:
  2283 ;;		Nothing
  2284 ;; This function is called by:
  2285 ;;		_forward
  2286 ;;		_turnLEFT
  2287 ;;		_turnRIGHT
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           	psect	text10
  2292   00166A                     __ptext10:
  2293                           	callstack 0
  2294   00166A                     ___awdiv:
  2295                           	callstack 29
  2296   00166A  0E00               	movlw	0
  2297   00166C  6E39               	movwf	___awdiv@sign^0,c
  2298   00166E  BE37               	btfsc	(___awdiv@divisor+1)^0,7,c
  2299   001670  EF3E  F00B         	goto	u1110
  2300   001674  EF3C  F00B         	goto	u1111
  2301   001678                     u1111:
  2302   001678  EF44  F00B         	goto	l1725
  2303   00167C                     u1110:
  2304   00167C  6C36               	negf	___awdiv@divisor^0,c
  2305   00167E  1E37               	comf	(___awdiv@divisor+1)^0,f,c
  2306   001680  B0D8               	btfsc	status,0,c
  2307   001682  2A37               	incf	(___awdiv@divisor+1)^0,f,c
  2308   001684  0E01               	movlw	1
  2309   001686  6E39               	movwf	___awdiv@sign^0,c
  2310   001688                     l1725:
  2311   001688  BE35               	btfsc	(___awdiv@dividend+1)^0,7,c
  2312   00168A  EF4B  F00B         	goto	u1120
  2313   00168E  EF49  F00B         	goto	u1121
  2314   001692                     u1121:
  2315   001692  EF51  F00B         	goto	l1731
  2316   001696                     u1120:
  2317   001696  6C34               	negf	___awdiv@dividend^0,c
  2318   001698  1E35               	comf	(___awdiv@dividend+1)^0,f,c
  2319   00169A  B0D8               	btfsc	status,0,c
  2320   00169C  2A35               	incf	(___awdiv@dividend+1)^0,f,c
  2321   00169E  0E01               	movlw	1
  2322   0016A0  1A39               	xorwf	___awdiv@sign^0,f,c
  2323   0016A2                     l1731:
  2324   0016A2  0E00               	movlw	0
  2325   0016A4  6E3B               	movwf	(___awdiv@quotient+1)^0,c
  2326   0016A6  0E00               	movlw	0
  2327   0016A8  6E3A               	movwf	___awdiv@quotient^0,c
  2328   0016AA  5036               	movf	___awdiv@divisor^0,w,c
  2329   0016AC  1037               	iorwf	(___awdiv@divisor+1)^0,w,c
  2330   0016AE  B4D8               	btfsc	status,2,c
  2331   0016B0  EF5C  F00B         	goto	u1131
  2332   0016B4  EF5E  F00B         	goto	u1130
  2333   0016B8                     u1131:
  2334   0016B8  EF86  F00B         	goto	l1753
  2335   0016BC                     u1130:
  2336   0016BC  0E01               	movlw	1
  2337   0016BE  6E38               	movwf	___awdiv@counter^0,c
  2338   0016C0  EF66  F00B         	goto	l1739
  2339   0016C4                     l1737:
  2340   0016C4  90D8               	bcf	status,0,c
  2341   0016C6  3636               	rlcf	___awdiv@divisor^0,f,c
  2342   0016C8  3637               	rlcf	(___awdiv@divisor+1)^0,f,c
  2343   0016CA  2A38               	incf	___awdiv@counter^0,f,c
  2344   0016CC                     l1739:
  2345   0016CC  AE37               	btfss	(___awdiv@divisor+1)^0,7,c
  2346   0016CE  EF6B  F00B         	goto	u1141
  2347   0016D2  EF6D  F00B         	goto	u1140
  2348   0016D6                     u1141:
  2349   0016D6  EF62  F00B         	goto	l1737
  2350   0016DA                     u1140:
  2351   0016DA                     l1741:
  2352   0016DA  90D8               	bcf	status,0,c
  2353   0016DC  363A               	rlcf	___awdiv@quotient^0,f,c
  2354   0016DE  363B               	rlcf	(___awdiv@quotient+1)^0,f,c
  2355   0016E0  5036               	movf	___awdiv@divisor^0,w,c
  2356   0016E2  5C34               	subwf	___awdiv@dividend^0,w,c
  2357   0016E4  5037               	movf	(___awdiv@divisor+1)^0,w,c
  2358   0016E6  5835               	subwfb	(___awdiv@dividend+1)^0,w,c
  2359   0016E8  A0D8               	btfss	status,0,c
  2360   0016EA  EF79  F00B         	goto	u1151
  2361   0016EE  EF7B  F00B         	goto	u1150
  2362   0016F2                     u1151:
  2363   0016F2  EF80  F00B         	goto	l1749
  2364   0016F6                     u1150:
  2365   0016F6  5036               	movf	___awdiv@divisor^0,w,c
  2366   0016F8  5E34               	subwf	___awdiv@dividend^0,f,c
  2367   0016FA  5037               	movf	(___awdiv@divisor+1)^0,w,c
  2368   0016FC  5A35               	subwfb	(___awdiv@dividend+1)^0,f,c
  2369   0016FE  803A               	bsf	___awdiv@quotient^0,0,c
  2370   001700                     l1749:
  2371   001700  90D8               	bcf	status,0,c
  2372   001702  3237               	rrcf	(___awdiv@divisor+1)^0,f,c
  2373   001704  3236               	rrcf	___awdiv@divisor^0,f,c
  2374   001706  2E38               	decfsz	___awdiv@counter^0,f,c
  2375   001708  EF6D  F00B         	goto	l1741
  2376   00170C                     l1753:
  2377   00170C  5039               	movf	___awdiv@sign^0,w,c
  2378   00170E  B4D8               	btfsc	status,2,c
  2379   001710  EF8C  F00B         	goto	u1161
  2380   001714  EF8E  F00B         	goto	u1160
  2381   001718                     u1161:
  2382   001718  EF92  F00B         	goto	l1757
  2383   00171C                     u1160:
  2384   00171C  6C3A               	negf	___awdiv@quotient^0,c
  2385   00171E  1E3B               	comf	(___awdiv@quotient+1)^0,f,c
  2386   001720  B0D8               	btfsc	status,0,c
  2387   001722  2A3B               	incf	(___awdiv@quotient+1)^0,f,c
  2388   001724                     l1757:
  2389   001724  C03A  F034         	movff	___awdiv@quotient,?___awdiv
  2390   001728  C03B  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  2391   00172C  0012               	return		;funcret
  2392   00172E                     __end_of___awdiv:
  2393                           	callstack 0
  2394                           
  2395 ;; *************** function _adjust_calibration *****************
  2396 ;; Defined at:
  2397 ;;		line 6 in file "calibration.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;  calibration_    1    0[COMRAM] PTR int 
  2400 ;;		 -> calibration(9), 
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;		None
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  1    wreg      void 
  2405 ;; Registers used:
  2406 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2412 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2414 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2415 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2416 ;;Total ram usage:        5 bytes
  2417 ;; Hardware stack levels used: 1
  2418 ;; This function calls:
  2419 ;;		Nothing
  2420 ;; This function is called by:
  2421 ;;		_main
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           	psect	text11
  2426   0013EE                     __ptext11:
  2427                           	callstack 0
  2428   0013EE                     _adjust_calibration:
  2429                           	callstack 30
  2430   0013EE                     l140:
  2431                           
  2432                           ;calibration.c: 11:         if(!PORTFbits.RF3 || !PORTFbits.RF2){
  2433   0013EE  A68E               	btfss	142,3,c	;volatile
  2434   0013F0  EFFC  F009         	goto	u1171
  2435   0013F4  EFFE  F009         	goto	u1170
  2436   0013F8                     u1171:
  2437   0013F8  EF05  F00A         	goto	l1763
  2438   0013FC                     u1170:
  2439   0013FC  B48E               	btfsc	142,2,c	;volatile
  2440   0013FE  EF03  F00A         	goto	u1181
  2441   001402  EF05  F00A         	goto	u1180
  2442   001406                     u1181:
  2443   001406  EFF7  F009         	goto	l140
  2444   00140A                     u1180:
  2445   00140A                     l1763:
  2446                           
  2447                           ;calibration.c: 12:             _delay((unsigned long)((100)*(64000000/4000.0)));
  2448   00140A  0E09               	movlw	9
  2449   00140C  6E36               	movwf	(??_adjust_calibration+1)^0,c
  2450   00140E  0E1E               	movlw	30
  2451   001410  6E35               	movwf	??_adjust_calibration^0,c
  2452   001412  0EE4               	movlw	228
  2453   001414                     u1597:
  2454   001414  2EE8               	decfsz	wreg,f,c
  2455   001416  D7FE               	bra	u1597
  2456   001418  2E35               	decfsz	??_adjust_calibration^0,f,c
  2457   00141A  D7FC               	bra	u1597
  2458   00141C  2E36               	decfsz	(??_adjust_calibration+1)^0,f,c
  2459   00141E  D7FA               	bra	u1597
  2460   001420  D000               	nop2	
  2461   001422                     
  2462                           ;calibration.c: 14:             if(!PORTFbits.RF3 && !PORTFbits.RF2 ){
  2463   001422  B68E               	btfsc	142,3,c	;volatile
  2464   001424  EF16  F00A         	goto	u1191
  2465   001428  EF18  F00A         	goto	u1190
  2466   00142C                     u1191:
  2467   00142C  EF31  F00A         	goto	l144
  2468   001430                     u1190:
  2469   001430  B48E               	btfsc	142,2,c	;volatile
  2470   001432  EF1D  F00A         	goto	u1201
  2471   001436  EF1F  F00A         	goto	u1200
  2472   00143A                     u1201:
  2473   00143A  EF31  F00A         	goto	l144
  2474   00143E                     u1200:
  2475   00143E                     
  2476                           ;calibration.c: 16:                 LATHbits.LATH3 = 1;
  2477   00143E  8680               	bsf	128,3,c	;volatile
  2478                           
  2479                           ;calibration.c: 17:                 LATDbits.LATD7 = 1;
  2480   001440  8E7C               	bsf	124,7,c	;volatile
  2481   001442                     
  2482                           ;calibration.c: 18:                 _delay((unsigned long)((1000)*(64000000/4000.0)));
  2483   001442  0E52               	movlw	82
  2484   001444  6E36               	movwf	(??_adjust_calibration+1)^0,c
  2485   001446  0E2B               	movlw	43
  2486   001448  6E35               	movwf	??_adjust_calibration^0,c
  2487   00144A  0E00               	movlw	0
  2488   00144C                     u1607:
  2489   00144C  2EE8               	decfsz	wreg,f,c
  2490   00144E  D7FE               	bra	u1607
  2491   001450  2E35               	decfsz	??_adjust_calibration^0,f,c
  2492   001452  D7FC               	bra	u1607
  2493   001454  2E36               	decfsz	(??_adjust_calibration+1)^0,f,c
  2494   001456  D7FA               	bra	u1607
  2495   001458  D000               	nop2	
  2496   00145A                     
  2497                           ;calibration.c: 19:                 LATHbits.LATH3 = 0;
  2498   00145A  9680               	bcf	128,3,c	;volatile
  2499   00145C                     
  2500                           ;calibration.c: 20:                 LATDbits.LATD7 = 0;
  2501   00145C  9E7C               	bcf	124,7,c	;volatile
  2502                           
  2503                           ;calibration.c: 21:                 break;
  2504   00145E  EF9D  F00A         	goto	l150
  2505   001462                     l144:
  2506                           
  2507                           ;calibration.c: 24:                 if(!PORTFbits.RF2){
  2508   001462  B48E               	btfsc	142,2,c	;volatile
  2509   001464  EF36  F00A         	goto	u1211
  2510   001468  EF38  F00A         	goto	u1210
  2511   00146C                     u1211:
  2512   00146C  EF64  F00A         	goto	l1789
  2513   001470                     u1210:
  2514   001470                     
  2515                           ;calibration.c: 25:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  2516   001470  0E11               	movlw	17
  2517   001472  6E36               	movwf	(??_adjust_calibration+1)^0,c
  2518   001474  0E3C               	movlw	60
  2519   001476  6E35               	movwf	??_adjust_calibration^0,c
  2520   001478  0ECB               	movlw	203
  2521   00147A                     u1617:
  2522   00147A  2EE8               	decfsz	wreg,f,c
  2523   00147C  D7FE               	bra	u1617
  2524   00147E  2E35               	decfsz	??_adjust_calibration^0,f,c
  2525   001480  D7FC               	bra	u1617
  2526   001482  2E36               	decfsz	(??_adjust_calibration+1)^0,f,c
  2527   001484  D7FA               	bra	u1617
  2528   001486  0000               	nop	
  2529   001488                     
  2530                           ;calibration.c: 26:                     *calibration_label = *calibration_label + 5;
  2531   001488  5034               	movf	adjust_calibration@calibration_label^0,w,c
  2532   00148A  6ED9               	movwf	fsr2l,c
  2533   00148C  6ADA               	clrf	fsr2h,c
  2534   00148E  CFDE F035          	movff	postinc2,??_adjust_calibration
  2535   001492  CFDD F036          	movff	postdec2,??_adjust_calibration+1
  2536   001496  0E05               	movlw	5
  2537   001498  2635               	addwf	??_adjust_calibration^0,f,c
  2538   00149A  0E00               	movlw	0
  2539   00149C  2236               	addwfc	(??_adjust_calibration+1)^0,f,c
  2540   00149E  5034               	movf	adjust_calibration@calibration_label^0,w,c
  2541   0014A0  6ED9               	movwf	fsr2l,c
  2542   0014A2  6ADA               	clrf	fsr2h,c
  2543   0014A4  C035  FFDE         	movff	??_adjust_calibration,postinc2
  2544   0014A8  C036  FFDD         	movff	??_adjust_calibration+1,postdec2
  2545   0014AC                     
  2546                           ;calibration.c: 27:                     LATDbits.LATD7 = 1;
  2547   0014AC  8E7C               	bsf	124,7,c	;volatile
  2548   0014AE                     
  2549                           ;calibration.c: 28:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  2550   0014AE  0E11               	movlw	17
  2551   0014B0  6E36               	movwf	(??_adjust_calibration+1)^0,c
  2552   0014B2  0E3C               	movlw	60
  2553   0014B4  6E35               	movwf	??_adjust_calibration^0,c
  2554   0014B6  0ECB               	movlw	203
  2555   0014B8                     u1627:
  2556   0014B8  2EE8               	decfsz	wreg,f,c
  2557   0014BA  D7FE               	bra	u1627
  2558   0014BC  2E35               	decfsz	??_adjust_calibration^0,f,c
  2559   0014BE  D7FC               	bra	u1627
  2560   0014C0  2E36               	decfsz	(??_adjust_calibration+1)^0,f,c
  2561   0014C2  D7FA               	bra	u1627
  2562   0014C4  0000               	nop	
  2563   0014C6                     
  2564                           ;calibration.c: 29:                     LATDbits.LATD7 = 0;
  2565   0014C6  9E7C               	bcf	124,7,c	;volatile
  2566   0014C8                     l1789:
  2567                           
  2568                           ;calibration.c: 32:                 if(!PORTFbits.RF3){
  2569   0014C8  B68E               	btfsc	142,3,c	;volatile
  2570   0014CA  EF69  F00A         	goto	u1221
  2571   0014CE  EF6B  F00A         	goto	u1220
  2572   0014D2                     u1221:
  2573   0014D2  EF9B  F00A         	goto	l141
  2574   0014D6                     u1220:
  2575   0014D6                     
  2576                           ;calibration.c: 33:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  2577   0014D6  0E11               	movlw	17
  2578   0014D8  6E36               	movwf	(??_adjust_calibration+1)^0,c
  2579   0014DA  0E3C               	movlw	60
  2580   0014DC  6E35               	movwf	??_adjust_calibration^0,c
  2581   0014DE  0ECB               	movlw	203
  2582   0014E0                     u1637:
  2583   0014E0  2EE8               	decfsz	wreg,f,c
  2584   0014E2  D7FE               	bra	u1637
  2585   0014E4  2E35               	decfsz	??_adjust_calibration^0,f,c
  2586   0014E6  D7FC               	bra	u1637
  2587   0014E8  2E36               	decfsz	(??_adjust_calibration+1)^0,f,c
  2588   0014EA  D7FA               	bra	u1637
  2589   0014EC  0000               	nop	
  2590   0014EE                     
  2591                           ;calibration.c: 34:                     *calibration_label = *calibration_label - 5;
  2592   0014EE  5034               	movf	adjust_calibration@calibration_label^0,w,c
  2593   0014F0  6ED9               	movwf	fsr2l,c
  2594   0014F2  6ADA               	clrf	fsr2h,c
  2595   0014F4  CFDE F035          	movff	postinc2,??_adjust_calibration
  2596   0014F8  CFDD F036          	movff	postdec2,??_adjust_calibration+1
  2597   0014FC  0EFB               	movlw	251
  2598   0014FE  2435               	addwf	??_adjust_calibration^0,w,c
  2599   001500  6E37               	movwf	(??_adjust_calibration+2)^0,c
  2600   001502  0EFF               	movlw	255
  2601   001504  2036               	addwfc	(??_adjust_calibration+1)^0,w,c
  2602   001506  6E38               	movwf	(??_adjust_calibration+3)^0,c
  2603   001508  5034               	movf	adjust_calibration@calibration_label^0,w,c
  2604   00150A  6ED9               	movwf	fsr2l,c
  2605   00150C  6ADA               	clrf	fsr2h,c
  2606   00150E  C037  FFDE         	movff	??_adjust_calibration+2,postinc2
  2607   001512  C038  FFDD         	movff	??_adjust_calibration+3,postdec2
  2608   001516                     
  2609                           ;calibration.c: 35:                     LATHbits.LATH3 = 1;
  2610   001516  8680               	bsf	128,3,c	;volatile
  2611   001518                     
  2612                           ;calibration.c: 36:                     _delay((unsigned long)((200)*(64000000/4000.0)))
      +                          ;
  2613   001518  0E11               	movlw	17
  2614   00151A  6E36               	movwf	(??_adjust_calibration+1)^0,c
  2615   00151C  0E3C               	movlw	60
  2616   00151E  6E35               	movwf	??_adjust_calibration^0,c
  2617   001520  0ECB               	movlw	203
  2618   001522                     u1647:
  2619   001522  2EE8               	decfsz	wreg,f,c
  2620   001524  D7FE               	bra	u1647
  2621   001526  2E35               	decfsz	??_adjust_calibration^0,f,c
  2622   001528  D7FC               	bra	u1647
  2623   00152A  2E36               	decfsz	(??_adjust_calibration+1)^0,f,c
  2624   00152C  D7FA               	bra	u1647
  2625   00152E  0000               	nop	
  2626   001530                     
  2627                           ;calibration.c: 37:                     LATHbits.LATH3 = 0;
  2628   001530  9680               	bcf	128,3,c	;volatile
  2629   001532  EFF7  F009         	goto	l140
  2630   001536                     l141:
  2631   001536  EFF7  F009         	goto	l140
  2632   00153A                     l150:
  2633   00153A  0012               	return		;funcret
  2634   00153C                     __end_of_adjust_calibration:
  2635                           	callstack 0
  2636                           
  2637                           	psect	rparam
  2638   000000                     
  2639                           	psect	config
  2640                           
  2641                           ;Config register CONFIG1L @ 0x300000
  2642                           ;	External Oscillator mode Selection bits
  2643                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2644                           ;	Power-up default value for COSC bits
  2645                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2646   300000                     	org	3145728
  2647   300000  AA                 	db	170
  2648                           
  2649                           ;Config register CONFIG1H @ 0x300001
  2650                           ;	unspecified, using default values
  2651                           ;	Clock Out Enable bit
  2652                           ;	CLKOUTEN = 0x1, unprogrammed default
  2653                           ;	Clock Switch Enable bit
  2654                           ;	CSWEN = 0x1, unprogrammed default
  2655                           ;	Fail-Safe Clock Monitor Enable bit
  2656                           ;	FCMEN = 0x1, unprogrammed default
  2657   300001                     	org	3145729
  2658   300001  FF                 	db	255
  2659                           
  2660                           ;Config register CONFIG3L @ 0x300004
  2661                           ;	WDT Period Select bits
  2662                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2663                           ;	WDT operating mode
  2664                           ;	WDTE = OFF, WDT Disabled
  2665   300004                     	org	3145732
  2666   300004  9F                 	db	159
  2667                           
  2668                           ;Config register CONFIG3H @ 0x300005
  2669                           ;	unspecified, using default values
  2670                           ;	WDT Window Select bits
  2671                           ;	WDTCWS = 0x7, unprogrammed default
  2672                           ;	WDT input clock selector
  2673                           ;	WDTCCS = 0x7, unprogrammed default
  2674   300005                     	org	3145733
  2675   300005  FF                 	db	255
  2676                           tosu	equ	0xFFF
  2677                           tosh	equ	0xFFE
  2678                           tosl	equ	0xFFD
  2679                           stkptr	equ	0xFFC
  2680                           pclatu	equ	0xFFB
  2681                           pclath	equ	0xFFA
  2682                           pcl	equ	0xFF9
  2683                           tblptru	equ	0xFF8
  2684                           tblptrh	equ	0xFF7
  2685                           tblptrl	equ	0xFF6
  2686                           tablat	equ	0xFF5
  2687                           prodh	equ	0xFF4
  2688                           prodl	equ	0xFF3
  2689                           indf0	equ	0xFEF
  2690                           postinc0	equ	0xFEE
  2691                           postdec0	equ	0xFED
  2692                           preinc0	equ	0xFEC
  2693                           plusw0	equ	0xFEB
  2694                           fsr0h	equ	0xFEA
  2695                           fsr0l	equ	0xFE9
  2696                           wreg	equ	0xFE8
  2697                           indf1	equ	0xFE7
  2698                           postinc1	equ	0xFE6
  2699                           postdec1	equ	0xFE5
  2700                           preinc1	equ	0xFE4
  2701                           plusw1	equ	0xFE3
  2702                           fsr1h	equ	0xFE2
  2703                           fsr1l	equ	0xFE1
  2704                           bsr	equ	0xFE0
  2705                           indf2	equ	0xFDF
  2706                           postinc2	equ	0xFDE
  2707                           postdec2	equ	0xFDD
  2708                           preinc2	equ	0xFDC
  2709                           plusw2	equ	0xFDB
  2710                           fsr2h	equ	0xFDA
  2711                           fsr2l	equ	0xFD9
  2712                           status	equ	0xFD8

Data Sizes:
    Strings     28
    Constant    0
    Data        1
    BSS         111
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     32      84
    BANK0           160      0      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    adjust_calibration@calibration_label	PTR int  size(1) Largest target is 9
		 -> calibration(COMRAM[9]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    forward@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    forward@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    forward@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    forward@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    forward@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    forward@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    S1937$buffer	PTR unsigned char  size(2) Largest target is 0

    S1937$source	PTR const unsigned char  size(2) Largest target is 0

    S369DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    S369DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    sendStringSerial4$0	PTR unsigned char  size(1) Largest target is 25
		 -> color_cardCheck@senddata(COMRAM[25]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    switch_calibration@calibration_index	PTR int  size(1) Largest target is 9
		 -> calibration(COMRAM[9]), 

    turnLEFT@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLEFT@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    turnLEFT@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    turnLEFT@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLEFT@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    turnLEFT@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    turnRIGHT@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRIGHT@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    turnRIGHT@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    turnRIGHT@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRIGHT@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllllhhhlll[1]), 

    turnRIGHT@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllllhhhlll[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 28
		 -> STR_1(CODE[28]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_forward
    _main->_turnLEFT
    _main->_turnRIGHT
    _turnRIGHT->_setMotorPWM
    _turnLEFT->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   12918
                 _adjust_calibration
                            _forward
                    _initDCmotorsPWM
                 _switch_calibration
                           _turnLEFT
                          _turnRIGHT
 ---------------------------------------------------------------------------------
 (1) _turnRIGHT                                           16    14      2    4055
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLEFT                                            16    14      2    4055
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _switch_calibration                                   3     2      1     272
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                             16    14      2    4055
                                             18 COMRAM    14    12      2
                            ___awdiv
                  _delay_ms_function
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2133
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _delay_ms_function                                    3     1      2     479
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     756
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _adjust_calibration                                   5     4      1     316
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adjust_calibration
   _forward
     ___awdiv
     _delay_ms_function
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _switch_calibration
   _turnLEFT
     ___awdiv
     _delay_ms_function
     _setMotorPWM
   _turnRIGHT
     ___awdiv
     _delay_ms_function
     _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      49        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3C       5       37.5%
BITBIGSFRllllll     7A      0       0      47        0.0%
BITBIGSFRllllhh     6C      0       0      42        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     20      54       1       88.4%
BITBIGSFRllllhh     52      0       0      40        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRllllhh     2B      0       0      43        0.0%
BITBIGSFRhhlll      17      0       0      36        0.0%
BITBIGSFRllllhh     11      0       0      44        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRlllllh      A      0       0      46        0.0%
BITBIGSFRhl          5      0       0      37        0.0%
BITBIGSFRllllhh      2      0       0      41        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRllllhl      1      0       0      45        0.0%
BITBIGSFRlllhl       1      0       0      39        0.0%
BITBIGSFRlhl         1      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      90      48        0.0%
DATA                 0      0      90       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 22:07:36 2024

                       ___awdiv@sign 0039                  ___wmul@multiplicand 0036  
                                l140 13EE                                  l141 1536  
                                l150 153A                                  l222 1936  
                                l144 1462                                  l232 13EC  
                                l225 1948                                  l153 172E  
                                l154 1798                                  l219 186E  
                                l260 11EC                                  l254 0F9C  
                                l246 0EF0                                  l158 17DA  
                                l334 1666                                  l337 196E  
                                l282 111A                                  l274 106E  
                                l268 1298                                  l568 172C  
                                l835 18E2                                  l828 18DA  
                                wreg 0FE8           __end_of_adjust_calibration 153C  
                               l2011 1550                                 l2003 153C  
                               l2021 1570                                 l2013 1554  
                               l2005 153C                                 l2031 1590  
                               l2023 1574                                 l2015 155C  
                               l2007 1548                                 l2041 159A  
                               l2033 1592                                 l2025 1578  
                               l2017 1564                                 l2009 154C  
                               l2051 15AA                                 l2043 159E  
                               l2035 1594                                 l2027 1580  
                               l2019 156C                                 l2061 15BE  
                               l2053 15AE                                 l2045 15A0  
                               l2037 1596                                 l2029 1588  
                               l2071 15EC                                 l2063 15C2  
                               l2055 15B2                                 l2047 15A2  
                               l2039 1598                                 l2081 1624  
                               l2073 15F4                                 l2065 15C6  
                               l2057 15B6                                 l2049 15A6  
                               l2083 1636                                 l2075 1606  
                               l2067 15D6                                 l2059 15BA  
                               l1701 129A                                 l2085 163E  
                               l2077 160E                                 l2069 15DE  
                               l1711 1356                                 l1703 12B4  
                               l2087 164C                                 l2079 161C  
                               l1721 167C                                 l1713 1370  
                               l1705 1302                                 l1801 173C  
                               l2089 1654                                 l1731 16A2  
                               l1723 1684                                 l1715 13B0  
                               l1707 1314                                 l1811 17A6  
                               l1803 1754                                 l1741 16DA  
                               l1733 16AA                                 l1725 1688  
                               l1717 166A                                 l1709 1318  
                               l1821 1812                                 l1813 17BE  
                               l1805 1778                                 l1901 1168  
                               l1751 1706                                 l1743 16E0  
                               l1735 16BC                                 l1727 1696  
                               l1719 166E                                 l1831 1850  
                               l1823 1816                                 l1815 17D8  
                               l1807 177A                                 l1903 1190  
                               l1911 11B0                                 l1761 13FC  
                               l1745 16F6                                 l1737 16C4  
                               l1753 170C                                 l1729 169E  
                               l1681 189A                                 l1673 1870  
                               l1841 186A                                 l1833 1852  
                               l1825 183A                                 l1817 17DC  
                               l1809 1792                                 l1921 122A  
                               l1913 11CE                                 l1905 1198  
                               l1771 1442                                 l1763 140A  
                               l1755 171C                                 l1747 16FE  
                               l1739 16CC                                 l1691 18CE  
                               l1683 18A8                                 l1675 1878  
                               l1667 194A                                 l1851 0E44  
                               l1843 186C                                 l1835 185C  
                               l1827 1844                                 l1819 17EC  
                               l1931 1260                                 l1923 1232  
                               l1915 11DA                                 l1907 11A0  
                               l1781 1488                                 l1773 145A  
                               l1765 1422                                 l1757 1724  
                               l1749 1700                                 l1693 18D4  
                               l1685 18AE                                 l1677 188A  
                               l1669 1966                                 l1861 0EA4  
                               l1853 0E60                                 l1845 0E20  
                               l1837 185E                                 l1829 1846  
                               l1925 1248                                 l1933 126C  
                               l1917 11E8                                 l1909 11AC  
                               l1941 0FC2                                 l1791 14D6  
                               l1783 14AC                                 l1775 145C  
                               l1767 1430                                 l1695 191C  
                               l1687 18C4                                 l1679 1892  
                               l1871 0EEC                                 l1863 0EB0  
                               l1855 0E6C                                 l1847 0E3C  
                               l1839 1868                                 l1935 1282  
                               l1927 1250                                 l1919 1214  
                               l1951 101A                                 l1943 0FC2  
                               l1793 14EE                                 l1785 14AE  
                               l1769 143E                                 l1697 1920  
                               l1689 18CC                                 l1881 0F54  
                               l1873 0F18                                 l1857 0E94  
                               l1865 0EB4                                 l1849 0E44  
                               l1929 1258                                 l1961 105C  
                               l1953 1022                                 l1945 0FDE  
                               l1937 0FA0                                 l1795 1516  
                               l1787 14C6                                 l1779 1470  
                               l1699 1930                                 l1883 0F5C  
                               l1875 0F2E                                 l1867 0ED2  
                               l1859 0E9C                                 l1891 111E  
                               l1971 10CA                                 l1963 106A  
                               l1955 102E                                 l1947 0FEA  
                               l1939 0FBA                                 l1797 1518  
                               l1789 14C8                                 l1885 0F64  
                               l1877 0F36                                 l1869 0EDE  
                               l1893 1138                                 l1981 1104  
                               l1973 10D2                                 l1965 1096  
                               l1949 1012                                 l1957 1032  
                               l1799 1530                                 l1879 0F4C  
                               l1887 0F70                                 l1895 1140  
                               l1975 10DA                                 l1967 10AC  
                               l1959 1050                                 l1889 0F86  
                               l1897 1140                                 l1977 10E2  
                               l1969 10B4                                 l1899 115C  
                               l1979 10EE                                 STR_1 0E01  
                               u1100 1370                                 u1101 136C  
                               u1110 167C                                 u1111 1678  
                               u1200 143E                                 u1120 1696  
                               u1201 143A                                 u1121 1692  
                               u1210 1470                                 u1130 16BC  
                               u1050 188A                                 u1211 146C  
                               u1131 16B8                                 u1051 1886  
                               u1220 14D6                                 u1140 16DA  
                               u1060 18A8                                 u1300 0F9C  
                               u1221 14D2                                 u1141 16D6  
                               u1061 18A4                                 u1301 0F98  
                               u1150 16F6                                 u1070 18C4  
                               u1230 173C                                 u1310 11CE  
                               u1151 16F2                                 u1071 18C0  
                               u1231 1738                                 u1311 11CA  
                               u1160 171C                                 u1080 1948  
                               u1240 17A6                                 u1320 1210  
                               u1400 10CA                                 u1161 1718  
                               u1081 1944                                 u1241 17A2  
                               u1321 120C                                 u1401 10C6  
                               u1170 13FC                                 u1090 12B4  
                               u1250 0ED2                                 u1330 122A  
                               u1410 1104                                 u1171 13F8  
                               u1091 12B0                                 u1251 0ECE  
                               u1331 1226                                 u1411 1100  
                               u1180 140A                                 u1260 0F14  
                               u1340 1248                                 u1420 111A  
                               u1500 1666                                 u1181 1406  
                               u1261 0F10                                 u1341 1244  
                               u1421 1116                                 u1501 1662  
                               u1190 1430                                 u1270 0F2E  
                               u1350 1282                                 u1191 142C  
                               u1271 0F2A                                 u1351 127E  
                               u1280 0F4C                                 u1360 1298  
                               u1281 0F48                                 u1361 1294  
                               u1290 0F86                                 u1370 1050  
                               u1291 0F82                                 u1371 104C  
                               u1380 1092                                 u1381 108E  
                               u1517 1062                                 u1390 10AC  
                               u1470 15D6                                 u1607 144C  
                               u1527 11E0                                 u1391 10A8  
                               u1471 15D2                                 u1480 1606  
                               u1617 147A                                 u1537 1746  
                               u1481 1602                                 u1490 1636  
                               _T2PR 0FBC                                 u1627 14B8  
                               u1547 1784                                 u1491 1632  
                               u1637 14E0                                 u1557 17B0  
                               u1647 1522                                 u1567 17CA  
                               u1577 0EE4                                 u1587 1926  
                               u1597 1414                                 _main 153C  
                               _temp 0054                                 fsr1h 0FE2  
                               fsr2h 0FDA                                 indf1 0FE7  
                               indf2 0FDF                                 fsr1l 0FE1  
                               fsr2l 0FD9                                 prodh 0FF4  
                               prodl 0FF3                                 start 0000  
                       ___param_bank 0000                                ?_main 0034  
                    __end_of___awdiv 172E                      ___awdiv@divisor 0036  
                    __end_of___lwdiv 18E4                      ___awdiv@counter 0038  
                    __end_of_forward 0F9E                                tablat 0FF5  
                              status 0FD8                   _switch_calibration 172E  
                    __initialization 18E4                         __end_of_main 166A  
                ?_switch_calibration 0034                               ??_main 0054  
                      __activetblptr 0001                         ?_setMotorPWM 0041  
                             _CCPR1H 0FAA                               _CCPR2H 0FA6  
                             _CCPR3H 0F25                               _CCPR4H 0F21  
                   ___awdiv@dividend 0034                 ??_switch_calibration 0035  
                             _RE2PPS 0E74                               _RC7PPS 0E69  
                             _RE4PPS 0E76                               _RG6PPS 0E88  
                   forward@max_power 0050                         _CCPTMRS0bits 0FAD  
                             ___wmul 194A                            ??___awdiv 0038  
                          ??___lwdiv 003E        delay_ms_function@milliseconds 0034  
                             clear_0 18FC                               clear_1 1908  
                   ___awdiv@quotient 003A                               _motorL 0022  
                             _motorR 0019                               isa$std 0001  
                       __pdataCOMRAM 0054                            ??_forward 0048  
                       __mediumconst 0000                               tblptrh 0FF7  
                             tblptrl 0FF6                               tblptru 0FF8  
                  ??_initDCmotorsPWM 0036                     __end_of_turnLEFT 129A  
                         __accesstop 0060              __end_of__initialization 190E  
                      ___rparam_used 0001                       __pcstackCOMRAM 0034  
                  forward@delay_time 0052                           __pbssBANK0 0060  
                       _T2CLKCONbits 0FBF                   _adjust_calibration 13EE  
                            ?___wmul 0034                  ?_adjust_calibration 0034  
                  _delay_ms_function 191C                   ?_delay_ms_function 0034  
                ??_delay_ms_function 0036                 ??_adjust_calibration 0035  
       turnLEFT@rotation_calibration 004B                              __Hparam 0000  
                            __Lparam 0000                              ___awdiv 166A  
                            ___lwdiv 1870                         __psmallconst 0E00  
                          ?_turnLEFT 0046            __end_of_delay_ms_function 194A  
                            __pcinit 18E4                              __ramtop 0E00  
                            __ptext0 153C                              __ptext1 0F9E  
                            __ptext2 111C                              __ptext3 172E  
                            __ptext4 17DC                              __ptext5 0E1E  
                            __ptext6 129A                              __ptext7 194A  
                            __ptext8 1870                              __ptext9 191C  
                          _T2CONbits 0FBD                              _forward 0E1E  
                          _T2HLTbits 0FBE                        _RxBufWriteCnt 0018  
               end_of_initialization 190E                              postdec2 0FDD  
                            postinc0 0FEE                              postinc2 0FDE  
                         ??_turnLEFT 0048                    __end_of_turnRIGHT 111C  
                    _initDCmotorsPWM 17DC                   turnRIGHT@max_power 0050  
                          _PORTFbits 0F8E                   setMotorPWM@negDuty 0045  
                          _TRISAbits 0F81                   setMotorPWM@posDuty 0044  
                          _TRISCbits 0F83                            _TRISDbits 0F84  
                          _TRISEbits 0F85                            _TRISFbits 0F86  
                          _TRISGbits 0F87                            _TRISHbits 0F88  
adjust_calibration@calibration_label 0034  switch_calibration@calibration_index 0034  
                        _CCP1CONbits 0FAB                         _EUSART4RXbuf 0001  
                       _EUSART4TXbuf 0060                          _CCP2CONbits 0FA7  
                        _CCP3CONbits 0F26          forward@Distance_Calibration 004B  
                        _CCP4CONbits 0F22                       __end_of___wmul 1970  
                      __pidataCOMRAM 1970                  start_initialization 18E4  
                      _TxBufWriteCnt 0016                   turnLEFT@delay_time 0052  
            __end_of_initDCmotorsPWM 1870                             ??___wmul 0038  
                        _calibration 002B                          __pbssCOMRAM 0001  
                   ___lwdiv@dividend 003A                          turnRIGHT@mL 0046  
                        turnRIGHT@mR 0047                             ?___awdiv 0034  
                           ?___lwdiv 003A                          __smallconst 0E00  
                           ?_forward 0046                         _RxBufReadCnt 0017  
                      ??_setMotorPWM 0042                     ___lwdiv@quotient 003E  
           initDCmotorsPWM@PWMperiod 0034                       ___wmul@product 0038  
                           _LATAbits 0F79                             _LATCbits 0F7B  
                           _LATDbits 0F7C                             _LATEbits 0F7D  
                           _LATFbits 0F7E                             _LATGbits 0F7F  
                           _LATHbits 0F80                     ?_initDCmotorsPWM 0034  
                  ___wmul@multiplier 0034                         setMotorPWM@m 0041  
      turnRIGHT@rotation_calibration 004B                            _turnRIGHT 0F9E  
                       _TxBufReadCnt 0015                  __end_of_setMotorPWM 13EE  
                           __Hrparam 0000                             __Lrparam 0000  
                       __Lsmallconst 0E00                            forward@mL 0046  
                          forward@mR 0047                           _ANSELFbits 0EB4  
                         turnLEFT@mL 0046                           turnLEFT@mR 0047  
                         ?_turnRIGHT 0046                      ___lwdiv@divisor 003C  
                         turnRIGHT@i 004C                           turnRIGHT@j 004E  
         __end_of_switch_calibration 17DC                      ___lwdiv@counter 0040  
                           __ptext10 166A                             __ptext11 13EE  
                  turnLEFT@max_power 0050                             isa$xinst 0000  
                           _turnLEFT 111C                  turnRIGHT@delay_time 0052  
                           forward@i 004C                             forward@j 004E  
                        _setMotorPWM 129A                            turnLEFT@i 004C  
                          turnLEFT@j 004E                          ??_turnRIGHT 0048  
